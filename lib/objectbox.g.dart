// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entitys.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3867794090434878240),
      name: 'ClasificacionProyecto',
      lastPropertyId: const IdUid(6, 2012161149637737564),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7521607225935953493),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6944626713596755992),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5691040412648373501),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4570083749155237849),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2012161149637737564),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 2050407571662665596),
            relationTarget: 'Emprendimientos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 859399381735454083),
      name: 'EstadoEmp',
      lastPropertyId: const IdUid(6, 2246275948466157951),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2235592658688426627),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3514219219156834755),
            name: 'estado',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7900770007418559960),
            name: 'fechaActualizacion',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8727843019342851116),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2246275948466157951),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 3139378807755772023),
            relationTarget: 'Emprendimientos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 9001070558566127547),
      name: 'PrioridadProyecto',
      lastPropertyId: const IdUid(6, 1550628132673256737),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2210981706424940712),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8149625297125514299),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1774385922646110264),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3611757609493769130),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1550628132673256737),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 2953253293288470417),
            relationTarget: 'Emprendimientos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 804684152773215409),
      name: 'Emprendimientos',
      lastPropertyId: const IdUid(17, 2815575313211393813),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4677830973327539513),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5330112956647391083),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3655261249465798823),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 807468286336679069),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4225051604479617429),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5407152779426357701),
            name: 'prioridadProyectoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 7003598226496598726),
            relationTarget: 'PrioridadProyecto'),
        ModelProperty(
            id: const IdUid(12, 8462464237235982526),
            name: 'comunidadesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 8154602671126157109),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(13, 2319564184498508408),
            name: 'emprendedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 6767241145070274732),
            relationTarget: 'Emprendedores'),
        ModelProperty(
            id: const IdUid(15, 1684532864788042377),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 6945808217463090366),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(16, 5126173959103968444),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2815575313211393813),
            name: 'archivado',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 7335578884425240534),
            name: 'usuarios',
            targetId: const IdUid(10, 252808688812742776)),
        ModelRelation(
            id: const IdUid(5, 2038229905033466972),
            name: 'jornadas',
            targetId: const IdUid(24, 6358146304075079104))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'clasifiProyecto',
            srcEntity: 'ClasificacionProyecto',
            srcField: ''),
        ModelBacklink(name: 'estadoEmp', srcEntity: 'EstadoEmp', srcField: ''),
        ModelBacklink(name: 'ventas', srcEntity: 'Ventas', srcField: ''),
        ModelBacklink(
            name: 'prodEmprendi', srcEntity: 'ProdEmprendi', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 252808688812742776),
      name: 'Usuarios',
      lastPropertyId: const IdUid(14, 2791771992441857032),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2635581039067582434),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8585539283016018259),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4453572026011528588),
            name: 'apellidoP',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 769480280417967138),
            name: 'apellidoM',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6160806538756599358),
            name: 'nacimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8241390027662058716),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8831865134001231809),
            name: 'celular',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4366827260158841734),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 715728503018425294),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3554819703177446556),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2009950526621565134),
            name: 'rol',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7064291300252248252),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2791771992441857032),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 8523822191732594212),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendimientos', srcEntity: 'Emprendimientos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 7673785883081583133),
      name: 'Ventas',
      lastPropertyId: const IdUid(7, 3759249699517018075),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3529393499177674234),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3959630620037866869),
            name: 'fechaInicio',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1842463129407517048),
            name: 'fechaTermino',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1303969564249935695),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6490506020631406852),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7248362350774841303),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3759249699517018075),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 4208244129974519526),
            relationTarget: 'Emprendimientos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 5075853906068129300),
      name: 'Consultorias',
      lastPropertyId: const IdUid(8, 7643887216735876476),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3514354406731350672),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4433239802450158965),
            name: 'documentos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8866915593674479010),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2139629849183696076),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 1231698506270026223),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(8, 7643887216735876476),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 6280604761802477456),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(13, 4156773254590137275),
      name: 'ProdEmprendi',
      lastPropertyId: const IdUid(9, 1431194771886016233),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4273736957162077610),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7661096811192140465),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5032172720157635791),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3640667548502545688),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3227581588275626757),
            name: 'costo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6169031405257917919),
            name: 'precioVenta',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3603888931156625013),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3770705136894608488),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1431194771886016233),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 8088336441644783319),
            relationTarget: 'Emprendimientos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'vendidos', srcEntity: 'Vendidos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(14, 4450301343199944733),
      name: 'Vendidos',
      lastPropertyId: const IdUid(7, 4168434124669331468),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2253290332606608104),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3861064722112440270),
            name: 'cantVendida',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5941389222733156371),
            name: 'subtotal',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5633075432279483197),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4527500675980092790),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9063014267953462768),
            name: 'ventasId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 7759963732964993012),
            relationTarget: 'Ventas'),
        ModelProperty(
            id: const IdUid(7, 4168434124669331468),
            name: 'prodEmprendiId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 5035905392252920596),
            relationTarget: 'ProdEmprendi')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 2491530739310255510),
      name: 'Tareas',
      lastPropertyId: const IdUid(13, 1159353226151624190),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1933555606703313228),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8014791709560172837),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5194084986301717278),
            name: 'observacion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7823032235829845864),
            name: 'porcentaje',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3881874201994923632),
            name: 'fechaRevision',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5323371369283368342),
            name: 'imagenes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5064642112222430336),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7410991421173790048),
            name: 'jornadaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7212582056034264336),
            relationTarget: 'Jornadas'),
        ModelProperty(
            id: const IdUid(12, 609327474518802635),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 5990507287199149727),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(13, 1159353226151624190),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(35, 4489600343659936888),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 6615538153946220074),
      name: 'Comunidades',
      lastPropertyId: const IdUid(5, 5885740297519224064),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8800100372581327104),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8730242443265006025),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 721387320777571889),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4090875136723971084),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5885740297519224064),
            name: 'municipiosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 6694643856830086551),
            relationTarget: 'Municipios')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos', srcEntity: 'Emprendimientos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(21, 311544265460535081),
      name: 'Emprendedores',
      lastPropertyId: const IdUid(15, 9187449762833663479),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8386730720267544453),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4330157751559637236),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2310204940504377436),
            name: 'apellidoP',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8222154448043311087),
            name: 'apellidoM',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 397638224005716367),
            name: 'nacimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3779379054940407382),
            name: 'curp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6772946936896296896),
            name: 'integrantesFamilia',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6532186673116404834),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1488410309800825779),
            name: 'comentarios',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 748875377023563317),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8381385900840453390),
            name: 'comunidadesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 1728042511720879376),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(13, 9142089170751540909),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 6386641065826609180),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(14, 3552854491581449237),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 5629854475557113245),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(15, 9187449762833663479),
            name: 'imagen',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 334643984474072026),
      name: 'Estados',
      lastPropertyId: const IdUid(4, 3895257262356450605),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8944844315150541404),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2660299098597049972),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4495471650360650211),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3895257262356450605),
            name: 'fechaSync',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'municipios', srcEntity: 'Municipios', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(23, 6229275484692578053),
      name: 'Municipios',
      lastPropertyId: const IdUid(5, 3651614083986583572),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8933146656611953476),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8369695090390803726),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3101198272334121532),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2584782002890659583),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3651614083986583572),
            name: 'estadosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 1773413668740873220),
            relationTarget: 'Estados')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'comunidades', srcEntity: 'Comunidades', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(24, 6358146304075079104),
      name: 'Jornadas',
      lastPropertyId: const IdUid(8, 4099773729934801460),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6358759877557227346),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 498346413789251837),
            name: 'numJornada',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5582579692261011195),
            name: 'proximaVisita',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3362702631639476479),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5712771709171787916),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 6035553439883628722),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(7, 4791150844778521105),
            name: 'tareaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 1639668133313135676),
            relationTarget: 'Tareas'),
        ModelProperty(
            id: const IdUid(8, 4099773729934801460),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 8145611823764249187),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 6276906075580230896),
      name: 'StatusSync',
      lastPropertyId: const IdUid(3, 167975598346545172),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3838759675906565787),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6577146346869035587),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 167975598346545172),
            name: 'fechaRegistro',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos',
            srcEntity: 'Emprendimientos',
            srcField: ''),
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: ''),
        ModelBacklink(name: 'usuarios', srcEntity: 'Usuarios', srcField: ''),
        ModelBacklink(name: 'jornadas', srcEntity: 'Jornadas', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(26, 6276906075580230896),
      lastIndexId: const IdUid(42, 6945808217463090366),
      lastRelationId: const IdUid(5, 2038229905033466972),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1366246136666677579,
        6117759740444770997,
        2166617641346171935,
        3964965102569712035,
        3815886273064837669,
        2781408684735737577,
        2428686942234365602,
        1323666498433169999,
        2042416188864880761,
        1021087970446956343
      ],
      retiredIndexUids: const [
        8990521503430950587,
        1607831315029447998,
        2758117709587171439,
        7680390338130917281,
        7083281142493979324,
        3380866187592452154,
        898977627675318720,
        4860061050288630164,
        6477492978039659709,
        1884784676683692244
      ],
      retiredPropertyUids: const [
        7079790605743243388,
        6172998306654734553,
        2574672497671950469,
        5347718656034637228,
        6273269044269879201,
        7911475855340885994,
        5829103266196707853,
        7515124161780938608,
        3991281244965765077,
        6017954821795207299,
        3980554204008347119,
        9086365290951858859,
        2452280981631945624,
        8341443670952491819,
        4551103649348469546,
        6909534581842096739,
        5386075232935579859,
        4364625688543508975,
        8474005816611301515,
        291034994140840826,
        7245017250220973753,
        552297950480807692,
        5889322915921969172,
        8304755835049178217,
        3462034544506880697,
        6915994077861086090,
        4932511096555161847,
        3662632218083065242,
        3180136282497114098,
        647799949869266031,
        3681945340148367110,
        2965121636634238955,
        2158551797062253471,
        6431279296723446945,
        176765185759695924,
        956997601706550466,
        3714019547848860305,
        4653993271322157592,
        7633603347667974425,
        3889022425921663783,
        3593890741921782419,
        4870033424336565884,
        6196634665502618124,
        702060131665322309,
        6834895970095104912,
        4298168455532229057,
        6494676936156636610,
        7984657088306364599,
        3469221558317808806,
        7657355535786071996,
        1460263094824080539,
        3348596078791966503,
        6686642139452024167,
        7280661973312265839,
        232832489478303902,
        7424242419126398301,
        4735971027860097783,
        7275271439444339569,
        5329076299621472283,
        4790639327797463942,
        4028495148250116114,
        7930195933533868005,
        7269234199457887678,
        3045954521590561959,
        4548731095880486014,
        3917990569343711155,
        804388285645815931,
        7240701117028268274,
        7020232340501817282,
        4082213459028815417,
        509412325826203117,
        9047558658118118651,
        1406568894842036273,
        8202387200314019143,
        6701648872907734361,
        7104768524590771840,
        7655032466536069673,
        1965574186271044849,
        1382509944249718626,
        8283328889428416807,
        3394511564896037854,
        8624158494612522146,
        5474615315576449195,
        5081084557109504408,
        174707286127388287,
        4444011821186412409,
        3952098520364674379,
        3879749783315811280,
        249851165958766302,
        7867123722378438362,
        891222057461627616,
        1618039077907563691,
        8586458724268756786,
        6140184920981313822,
        5626746320301529232,
        1758281922018199377,
        317028010342762687,
        6994977916160921655,
        6540004964666285680,
        4856817907692795203,
        3441574004683600331
      ],
      retiredRelationUids: const [1226469011453769556, 4334679211015697719],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ClasificacionProyecto: EntityDefinition<ClasificacionProyecto>(
        model: _entities[0],
        toOneRelations: (ClasificacionProyecto object) =>
            [object.emprendimientos],
        toManyRelations: (ClasificacionProyecto object) => {},
        getId: (ClasificacionProyecto object) => object.id,
        setId: (ClasificacionProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (ClasificacionProyecto object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descripcionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimientos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClasificacionProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimientos.attach(store);
          return object;
        }),
    EstadoEmp: EntityDefinition<EstadoEmp>(
        model: _entities[1],
        toOneRelations: (EstadoEmp object) => [object.emprendimientos],
        toManyRelations: (EstadoEmp object) => {},
        getId: (EstadoEmp object) => object.id,
        setId: (EstadoEmp object, int id) {
          object.id = id;
        },
        objectToFB: (EstadoEmp object, fb.Builder fbb) {
          final estadoOffset = fbb.writeString(object.estado);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, estadoOffset);
          fbb.addInt64(2, object.fechaActualizacion.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimientos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EstadoEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              estado: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaActualizacion: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimientos.attach(store);
          return object;
        }),
    PrioridadProyecto: EntityDefinition<PrioridadProyecto>(
        model: _entities[2],
        toOneRelations: (PrioridadProyecto object) => [object.emprendimientos],
        toManyRelations: (PrioridadProyecto object) => {},
        getId: (PrioridadProyecto object) => object.id,
        setId: (PrioridadProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (PrioridadProyecto object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descripcionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimientos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PrioridadProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimientos.attach(store);
          return object;
        }),
    Emprendimientos: EntityDefinition<Emprendimientos>(
        model: _entities[3],
        toOneRelations: (Emprendimientos object) => [
              object.prioridadProyecto,
              object.comunidades,
              object.emprendedor,
              object.statusSync
            ],
        toManyRelations: (Emprendimientos object) => {
              RelInfo<Emprendimientos>.toMany(2, object.id): object.usuarios,
              RelInfo<Emprendimientos>.toMany(5, object.id): object.jornadas,
              RelInfo<ClasificacionProyecto>.toOneBacklink(
                  6,
                  object.id,
                  (ClasificacionProyecto srcObject) =>
                      srcObject.emprendimientos): object.clasifiProyecto,
              RelInfo<EstadoEmp>.toOneBacklink(6, object.id,
                      (EstadoEmp srcObject) => srcObject.emprendimientos):
                  object.estadoEmp,
              RelInfo<Ventas>.toOneBacklink(7, object.id,
                      (Ventas srcObject) => srcObject.emprendimientos):
                  object.ventas,
              RelInfo<ProdEmprendi>.toOneBacklink(9, object.id,
                      (ProdEmprendi srcObject) => srcObject.emprendimientos):
                  object.prodEmprendi,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                      (Consultorias srcObject) => srcObject.emprendimiento):
                  object.consultorias
            },
        getId: (Emprendimientos object) => object.id,
        setId: (Emprendimientos object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendimientos object, fb.Builder fbb) {
          final imagenOffset = fbb.writeString(object.imagen);
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagenOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, descripcionOffset);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(6, object.prioridadProyecto.targetId);
          fbb.addInt64(11, object.comunidades.targetId);
          fbb.addInt64(12, object.emprendedor.targetId);
          fbb.addInt64(14, object.statusSync.targetId);
          fbb.addBool(15, object.activo);
          fbb.addBool(16, object.archivado);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendimientos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 34, false),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 36, false));
          object.prioridadProyecto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.prioridadProyecto.attach(store);
          object.comunidades.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.comunidades.attach(store);
          object.emprendedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.emprendedor.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Emprendimientos>.toMany(2, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Emprendimientos>.toMany(5, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.clasifiProyecto,
              store,
              RelInfo<ClasificacionProyecto>.toOneBacklink(
                  6,
                  object.id,
                  (ClasificacionProyecto srcObject) =>
                      srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.estadoEmp,
              store,
              RelInfo<EstadoEmp>.toOneBacklink(6, object.id,
                  (EstadoEmp srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.ventas,
              store,
              RelInfo<Ventas>.toOneBacklink(7, object.id,
                  (Ventas srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.prodEmprendi,
              store,
              RelInfo<ProdEmprendi>.toOneBacklink(9, object.id,
                  (ProdEmprendi srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                  (Consultorias srcObject) => srcObject.emprendimiento),
              store.box<Emprendimientos>());
          return object;
        }),
    Usuarios: EntityDefinition<Usuarios>(
        model: _entities[4],
        toOneRelations: (Usuarios object) => [object.statusSync],
        toManyRelations: (Usuarios object) => {
              RelInfo<Emprendimientos>.toManyBacklink(2, object.id):
                  object.emprendimientos
            },
        getId: (Usuarios object) => object.id,
        setId: (Usuarios object, int id) {
          object.id = id;
        },
        objectToFB: (Usuarios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoPOffset = fbb.writeString(object.apellidoP);
          final apellidoMOffset = fbb.writeString(object.apellidoM);
          final telefonoOffset = fbb.writeString(object.telefono);
          final celularOffset = fbb.writeString(object.celular);
          final correoOffset = fbb.writeString(object.correo);
          final passwordOffset = fbb.writeString(object.password);
          final imagenOffset = fbb.writeString(object.imagen);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoPOffset);
          fbb.addOffset(3, apellidoMOffset);
          fbb.addInt64(4, object.nacimiento.millisecondsSinceEpoch);
          fbb.addOffset(5, telefonoOffset);
          fbb.addOffset(6, celularOffset);
          fbb.addOffset(7, correoOffset);
          fbb.addOffset(8, passwordOffset);
          fbb.addOffset(9, imagenOffset);
          fbb.addInt64(10, object.rol);
          fbb.addInt64(11, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(13, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuarios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidoP: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              apellidoM: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nacimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              celular: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              correo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              password: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              imagen: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              rol: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toManyBacklink(2, object.id),
              store.box<Usuarios>());
          return object;
        }),
    Ventas: EntityDefinition<Ventas>(
        model: _entities[5],
        toOneRelations: (Ventas object) => [object.emprendimientos],
        toManyRelations: (Ventas object) => {},
        getId: (Ventas object) => object.id,
        setId: (Ventas object, int id) {
          object.id = id;
        },
        objectToFB: (Ventas object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaInicio.millisecondsSinceEpoch);
          fbb.addInt64(2, object.fechaTermino.millisecondsSinceEpoch);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(6, object.emprendimientos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ventas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaInicio: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              fechaTermino: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.emprendimientos.attach(store);
          return object;
        }),
    Consultorias: EntityDefinition<Consultorias>(
        model: _entities[6],
        toOneRelations: (Consultorias object) =>
            [object.emprendimiento, object.statusSync],
        toManyRelations: (Consultorias object) => {
              RelInfo<Tareas>.toOneBacklink(12, object.id,
                  (Tareas srcObject) => srcObject.consultoria): object.tareas
            },
        getId: (Consultorias object) => object.id,
        setId: (Consultorias object, int id) {
          object.id = id;
        },
        objectToFB: (Consultorias object, fb.Builder fbb) {
          final documentosOffset = fbb.writeString(object.documentos);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, documentosOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(6, object.emprendimiento.targetId);
          fbb.addInt64(7, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Consultorias(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              documentos: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.emprendimiento.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toOneBacklink(
                  12, object.id, (Tareas srcObject) => srcObject.consultoria),
              store.box<Consultorias>());
          return object;
        }),
    ProdEmprendi: EntityDefinition<ProdEmprendi>(
        model: _entities[7],
        toOneRelations: (ProdEmprendi object) => [object.emprendimientos],
        toManyRelations: (ProdEmprendi object) => {
              RelInfo<Vendidos>.toOneBacklink(7, object.id,
                      (Vendidos srcObject) => srcObject.prodEmprendi):
                  object.vendidos
            },
        getId: (ProdEmprendi object) => object.id,
        setId: (ProdEmprendi object, int id) {
          object.id = id;
        },
        objectToFB: (ProdEmprendi object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final imagenOffset = fbb.writeString(object.imagen);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, imagenOffset);
          fbb.addInt64(4, object.costo);
          fbb.addInt64(5, object.precioVenta);
          fbb.addInt64(6, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(7, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(8, object.emprendimientos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdEmprendi(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              costo:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              precioVenta:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.emprendimientos.attach(store);
          InternalToManyAccess.setRelInfo(
              object.vendidos,
              store,
              RelInfo<Vendidos>.toOneBacklink(
                  7, object.id, (Vendidos srcObject) => srcObject.prodEmprendi),
              store.box<ProdEmprendi>());
          return object;
        }),
    Vendidos: EntityDefinition<Vendidos>(
        model: _entities[8],
        toOneRelations: (Vendidos object) =>
            [object.ventas, object.prodEmprendi],
        toManyRelations: (Vendidos object) => {},
        getId: (Vendidos object) => object.id,
        setId: (Vendidos object, int id) {
          object.id = id;
        },
        objectToFB: (Vendidos object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.cantVendida);
          fbb.addInt64(2, object.subtotal);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(5, object.ventas.targetId);
          fbb.addInt64(6, object.prodEmprendi.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Vendidos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cantVendida:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              subtotal:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));
          object.ventas.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.ventas.attach(store);
          object.prodEmprendi.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.prodEmprendi.attach(store);
          return object;
        }),
    Tareas: EntityDefinition<Tareas>(
        model: _entities[9],
        toOneRelations: (Tareas object) =>
            [object.jornada, object.consultoria, object.statusSync],
        toManyRelations: (Tareas object) => {},
        getId: (Tareas object) => object.id,
        setId: (Tareas object, int id) {
          object.id = id;
        },
        objectToFB: (Tareas object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          final observacionOffset = fbb.writeString(object.observacion);
          final imagenesOffset = fbb.writeString(object.imagenes);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, observacionOffset);
          fbb.addInt64(4, object.porcentaje);
          fbb.addInt64(5, object.fechaRevision.millisecondsSinceEpoch);
          fbb.addOffset(6, imagenesOffset);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(10, object.jornada.targetId);
          fbb.addInt64(11, object.consultoria.targetId);
          fbb.addInt64(12, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tareas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              observacion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              porcentaje:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              imagenes: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)));
          object.jornada.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.jornada.attach(store);
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.consultoria.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.statusSync.attach(store);
          return object;
        }),
    Comunidades: EntityDefinition<Comunidades>(
        model: _entities[10],
        toOneRelations: (Comunidades object) => [object.municipios],
        toManyRelations: (Comunidades object) => {
              RelInfo<Emprendedores>.toOneBacklink(12, object.id,
                      (Emprendedores srcObject) => srcObject.comunidades):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toOneBacklink(12, object.id,
                      (Emprendimientos srcObject) => srcObject.comunidades):
                  object.emprendimientos
            },
        getId: (Comunidades object) => object.id,
        setId: (Comunidades object, int id) {
          object.id = id;
        },
        objectToFB: (Comunidades object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(4, object.municipios.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Comunidades(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.municipios.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.municipios.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toOneBacklink(12, object.id,
                  (Emprendedores srcObject) => srcObject.comunidades),
              store.box<Comunidades>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(12, object.id,
                  (Emprendimientos srcObject) => srcObject.comunidades),
              store.box<Comunidades>());
          return object;
        }),
    Emprendedores: EntityDefinition<Emprendedores>(
        model: _entities[11],
        toOneRelations: (Emprendedores object) =>
            [object.comunidades, object.statusSync, object.emprendimiento],
        toManyRelations: (Emprendedores object) => {},
        getId: (Emprendedores object) => object.id,
        setId: (Emprendedores object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendedores object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoPOffset = fbb.writeString(object.apellidoP);
          final apellidoMOffset = fbb.writeString(object.apellidoM);
          final curpOffset = fbb.writeString(object.curp);
          final integrantesFamiliaOffset =
              fbb.writeString(object.integrantesFamilia);
          final telefonoOffset = fbb.writeString(object.telefono);
          final comentariosOffset = fbb.writeString(object.comentarios);
          final imagenOffset = fbb.writeString(object.imagen);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoPOffset);
          fbb.addOffset(3, apellidoMOffset);
          fbb.addInt64(4, object.nacimiento.millisecondsSinceEpoch);
          fbb.addOffset(5, curpOffset);
          fbb.addOffset(6, integrantesFamiliaOffset);
          fbb.addOffset(7, telefonoOffset);
          fbb.addOffset(8, comentariosOffset);
          fbb.addInt64(9, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(11, object.comunidades.targetId);
          fbb.addInt64(12, object.statusSync.targetId);
          fbb.addInt64(13, object.emprendimiento.targetId);
          fbb.addOffset(14, imagenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendedores(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidoP: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              apellidoM: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nacimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              curp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              integrantesFamilia: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              telefono: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              comentarios: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)));
          object.comunidades.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.comunidades.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.statusSync.attach(store);
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.emprendimiento.attach(store);
          return object;
        }),
    Estados: EntityDefinition<Estados>(
        model: _entities[12],
        toOneRelations: (Estados object) => [],
        toManyRelations: (Estados object) => {
              RelInfo<Municipios>.toOneBacklink(5, object.id,
                      (Municipios srcObject) => srcObject.estados):
                  object.municipios
            },
        getId: (Estados object) => object.id,
        setId: (Estados object, int id) {
          object.id = id;
        },
        objectToFB: (Estados object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Estados(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          InternalToManyAccess.setRelInfo(
              object.municipios,
              store,
              RelInfo<Municipios>.toOneBacklink(
                  5, object.id, (Municipios srcObject) => srcObject.estados),
              store.box<Estados>());
          return object;
        }),
    Municipios: EntityDefinition<Municipios>(
        model: _entities[13],
        toOneRelations: (Municipios object) => [object.estados],
        toManyRelations: (Municipios object) => {
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                      (Comunidades srcObject) => srcObject.municipios):
                  object.comunidades
            },
        getId: (Municipios object) => object.id,
        setId: (Municipios object, int id) {
          object.id = id;
        },
        objectToFB: (Municipios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(4, object.estados.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Municipios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.estados.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.estados.attach(store);
          InternalToManyAccess.setRelInfo(
              object.comunidades,
              store,
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                  (Comunidades srcObject) => srcObject.municipios),
              store.box<Municipios>());
          return object;
        }),
    Jornadas: EntityDefinition<Jornadas>(
        model: _entities[14],
        toOneRelations: (Jornadas object) =>
            [object.emprendimiento, object.tarea, object.statusSync],
        toManyRelations: (Jornadas object) => {},
        getId: (Jornadas object) => object.id,
        setId: (Jornadas object, int id) {
          object.id = id;
        },
        objectToFB: (Jornadas object, fb.Builder fbb) {
          final numJornadaOffset = fbb.writeString(object.numJornada);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, numJornadaOffset);
          fbb.addInt64(2, object.proximaVisita.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimiento.targetId);
          fbb.addInt64(6, object.tarea.targetId);
          fbb.addInt64(7, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Jornadas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              numJornada: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              proximaVisita: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimiento.attach(store);
          object.tarea.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tarea.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.statusSync.attach(store);
          return object;
        }),
    StatusSync: EntityDefinition<StatusSync>(
        model: _entities[15],
        toOneRelations: (StatusSync object) => [],
        toManyRelations: (StatusSync object) => {
              RelInfo<Emprendedores>.toOneBacklink(13, object.id,
                      (Emprendedores srcObject) => srcObject.statusSync):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toOneBacklink(15, object.id,
                      (Emprendimientos srcObject) => srcObject.statusSync):
                  object.emprendimientos,
              RelInfo<Tareas>.toOneBacklink(13, object.id,
                  (Tareas srcObject) => srcObject.statusSync): object.tareas,
              RelInfo<Consultorias>.toOneBacklink(8, object.id,
                      (Consultorias srcObject) => srcObject.statusSync):
                  object.consultorias,
              RelInfo<Usuarios>.toOneBacklink(14, object.id,
                      (Usuarios srcObject) => srcObject.statusSync):
                  object.usuarios,
              RelInfo<Jornadas>.toOneBacklink(8, object.id,
                  (Jornadas srcObject) => srcObject.statusSync): object.jornadas
            },
        getId: (StatusSync object) => object.id,
        setId: (StatusSync object, int id) {
          object.id = id;
        },
        objectToFB: (StatusSync object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, statusOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StatusSync(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toOneBacklink(13, object.id,
                  (Emprendedores srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(15, object.id,
                  (Emprendimientos srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toOneBacklink(
                  13, object.id, (Tareas srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toOneBacklink(8, object.id,
                  (Consultorias srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Usuarios>.toOneBacklink(
                  14, object.id, (Usuarios srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Jornadas>.toOneBacklink(
                  8, object.id, (Jornadas srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ClasificacionProyecto] entity fields to define ObjectBox queries.
class ClasificacionProyecto_ {
  /// see [ClasificacionProyecto.id]
  static final id =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[0]);

  /// see [ClasificacionProyecto.descripcion]
  static final descripcion =
      QueryStringProperty<ClasificacionProyecto>(_entities[0].properties[1]);

  /// see [ClasificacionProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[2]);

  /// see [ClasificacionProyecto.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[3]);

  /// see [ClasificacionProyecto.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<ClasificacionProyecto, Emprendimientos>(
          _entities[0].properties[4]);
}

/// [EstadoEmp] entity fields to define ObjectBox queries.
class EstadoEmp_ {
  /// see [EstadoEmp.id]
  static final id = QueryIntegerProperty<EstadoEmp>(_entities[1].properties[0]);

  /// see [EstadoEmp.estado]
  static final estado =
      QueryStringProperty<EstadoEmp>(_entities[1].properties[1]);

  /// see [EstadoEmp.fechaActualizacion]
  static final fechaActualizacion =
      QueryIntegerProperty<EstadoEmp>(_entities[1].properties[2]);

  /// see [EstadoEmp.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<EstadoEmp>(_entities[1].properties[3]);

  /// see [EstadoEmp.emprendimientos]
  static final emprendimientos = QueryRelationToOne<EstadoEmp, Emprendimientos>(
      _entities[1].properties[4]);
}

/// [PrioridadProyecto] entity fields to define ObjectBox queries.
class PrioridadProyecto_ {
  /// see [PrioridadProyecto.id]
  static final id =
      QueryIntegerProperty<PrioridadProyecto>(_entities[2].properties[0]);

  /// see [PrioridadProyecto.descripcion]
  static final descripcion =
      QueryStringProperty<PrioridadProyecto>(_entities[2].properties[1]);

  /// see [PrioridadProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<PrioridadProyecto>(_entities[2].properties[2]);

  /// see [PrioridadProyecto.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<PrioridadProyecto>(_entities[2].properties[3]);

  /// see [PrioridadProyecto.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<PrioridadProyecto, Emprendimientos>(
          _entities[2].properties[4]);
}

/// [Emprendimientos] entity fields to define ObjectBox queries.
class Emprendimientos_ {
  /// see [Emprendimientos.id]
  static final id =
      QueryIntegerProperty<Emprendimientos>(_entities[3].properties[0]);

  /// see [Emprendimientos.imagen]
  static final imagen =
      QueryStringProperty<Emprendimientos>(_entities[3].properties[1]);

  /// see [Emprendimientos.nombre]
  static final nombre =
      QueryStringProperty<Emprendimientos>(_entities[3].properties[2]);

  /// see [Emprendimientos.descripcion]
  static final descripcion =
      QueryStringProperty<Emprendimientos>(_entities[3].properties[3]);

  /// see [Emprendimientos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendimientos>(_entities[3].properties[4]);

  /// see [Emprendimientos.prioridadProyecto]
  static final prioridadProyecto =
      QueryRelationToOne<Emprendimientos, PrioridadProyecto>(
          _entities[3].properties[5]);

  /// see [Emprendimientos.comunidades]
  static final comunidades = QueryRelationToOne<Emprendimientos, Comunidades>(
      _entities[3].properties[6]);

  /// see [Emprendimientos.emprendedor]
  static final emprendedor = QueryRelationToOne<Emprendimientos, Emprendedores>(
      _entities[3].properties[7]);

  /// see [Emprendimientos.statusSync]
  static final statusSync = QueryRelationToOne<Emprendimientos, StatusSync>(
      _entities[3].properties[8]);

  /// see [Emprendimientos.activo]
  static final activo =
      QueryBooleanProperty<Emprendimientos>(_entities[3].properties[9]);

  /// see [Emprendimientos.archivado]
  static final archivado =
      QueryBooleanProperty<Emprendimientos>(_entities[3].properties[10]);

  /// see [Emprendimientos.usuarios]
  static final usuarios =
      QueryRelationToMany<Emprendimientos, Usuarios>(_entities[3].relations[0]);

  /// see [Emprendimientos.jornadas]
  static final jornadas =
      QueryRelationToMany<Emprendimientos, Jornadas>(_entities[3].relations[1]);
}

/// [Usuarios] entity fields to define ObjectBox queries.
class Usuarios_ {
  /// see [Usuarios.id]
  static final id = QueryIntegerProperty<Usuarios>(_entities[4].properties[0]);

  /// see [Usuarios.nombre]
  static final nombre =
      QueryStringProperty<Usuarios>(_entities[4].properties[1]);

  /// see [Usuarios.apellidoP]
  static final apellidoP =
      QueryStringProperty<Usuarios>(_entities[4].properties[2]);

  /// see [Usuarios.apellidoM]
  static final apellidoM =
      QueryStringProperty<Usuarios>(_entities[4].properties[3]);

  /// see [Usuarios.nacimiento]
  static final nacimiento =
      QueryIntegerProperty<Usuarios>(_entities[4].properties[4]);

  /// see [Usuarios.telefono]
  static final telefono =
      QueryStringProperty<Usuarios>(_entities[4].properties[5]);

  /// see [Usuarios.celular]
  static final celular =
      QueryStringProperty<Usuarios>(_entities[4].properties[6]);

  /// see [Usuarios.correo]
  static final correo =
      QueryStringProperty<Usuarios>(_entities[4].properties[7]);

  /// see [Usuarios.password]
  static final password =
      QueryStringProperty<Usuarios>(_entities[4].properties[8]);

  /// see [Usuarios.imagen]
  static final imagen =
      QueryStringProperty<Usuarios>(_entities[4].properties[9]);

  /// see [Usuarios.rol]
  static final rol =
      QueryIntegerProperty<Usuarios>(_entities[4].properties[10]);

  /// see [Usuarios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Usuarios>(_entities[4].properties[11]);

  /// see [Usuarios.statusSync]
  static final statusSync =
      QueryRelationToOne<Usuarios, StatusSync>(_entities[4].properties[12]);
}

/// [Ventas] entity fields to define ObjectBox queries.
class Ventas_ {
  /// see [Ventas.id]
  static final id = QueryIntegerProperty<Ventas>(_entities[5].properties[0]);

  /// see [Ventas.fechaInicio]
  static final fechaInicio =
      QueryIntegerProperty<Ventas>(_entities[5].properties[1]);

  /// see [Ventas.fechaTermino]
  static final fechaTermino =
      QueryIntegerProperty<Ventas>(_entities[5].properties[2]);

  /// see [Ventas.total]
  static final total = QueryIntegerProperty<Ventas>(_entities[5].properties[3]);

  /// see [Ventas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Ventas>(_entities[5].properties[4]);

  /// see [Ventas.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Ventas>(_entities[5].properties[5]);

  /// see [Ventas.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<Ventas, Emprendimientos>(_entities[5].properties[6]);
}

/// [Consultorias] entity fields to define ObjectBox queries.
class Consultorias_ {
  /// see [Consultorias.id]
  static final id =
      QueryIntegerProperty<Consultorias>(_entities[6].properties[0]);

  /// see [Consultorias.documentos]
  static final documentos =
      QueryStringProperty<Consultorias>(_entities[6].properties[1]);

  /// see [Consultorias.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Consultorias>(_entities[6].properties[2]);

  /// see [Consultorias.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Consultorias, Emprendimientos>(
          _entities[6].properties[3]);

  /// see [Consultorias.statusSync]
  static final statusSync =
      QueryRelationToOne<Consultorias, StatusSync>(_entities[6].properties[4]);
}

/// [ProdEmprendi] entity fields to define ObjectBox queries.
class ProdEmprendi_ {
  /// see [ProdEmprendi.id]
  static final id =
      QueryIntegerProperty<ProdEmprendi>(_entities[7].properties[0]);

  /// see [ProdEmprendi.nombre]
  static final nombre =
      QueryStringProperty<ProdEmprendi>(_entities[7].properties[1]);

  /// see [ProdEmprendi.descripcion]
  static final descripcion =
      QueryStringProperty<ProdEmprendi>(_entities[7].properties[2]);

  /// see [ProdEmprendi.imagen]
  static final imagen =
      QueryStringProperty<ProdEmprendi>(_entities[7].properties[3]);

  /// see [ProdEmprendi.costo]
  static final costo =
      QueryIntegerProperty<ProdEmprendi>(_entities[7].properties[4]);

  /// see [ProdEmprendi.precioVenta]
  static final precioVenta =
      QueryIntegerProperty<ProdEmprendi>(_entities[7].properties[5]);

  /// see [ProdEmprendi.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProdEmprendi>(_entities[7].properties[6]);

  /// see [ProdEmprendi.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<ProdEmprendi>(_entities[7].properties[7]);

  /// see [ProdEmprendi.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<ProdEmprendi, Emprendimientos>(
          _entities[7].properties[8]);
}

/// [Vendidos] entity fields to define ObjectBox queries.
class Vendidos_ {
  /// see [Vendidos.id]
  static final id = QueryIntegerProperty<Vendidos>(_entities[8].properties[0]);

  /// see [Vendidos.cantVendida]
  static final cantVendida =
      QueryIntegerProperty<Vendidos>(_entities[8].properties[1]);

  /// see [Vendidos.subtotal]
  static final subtotal =
      QueryIntegerProperty<Vendidos>(_entities[8].properties[2]);

  /// see [Vendidos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Vendidos>(_entities[8].properties[3]);

  /// see [Vendidos.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Vendidos>(_entities[8].properties[4]);

  /// see [Vendidos.ventas]
  static final ventas =
      QueryRelationToOne<Vendidos, Ventas>(_entities[8].properties[5]);

  /// see [Vendidos.prodEmprendi]
  static final prodEmprendi =
      QueryRelationToOne<Vendidos, ProdEmprendi>(_entities[8].properties[6]);
}

/// [Tareas] entity fields to define ObjectBox queries.
class Tareas_ {
  /// see [Tareas.id]
  static final id = QueryIntegerProperty<Tareas>(_entities[9].properties[0]);

  /// see [Tareas.descripcion]
  static final descripcion =
      QueryStringProperty<Tareas>(_entities[9].properties[1]);

  /// see [Tareas.observacion]
  static final observacion =
      QueryStringProperty<Tareas>(_entities[9].properties[2]);

  /// see [Tareas.porcentaje]
  static final porcentaje =
      QueryIntegerProperty<Tareas>(_entities[9].properties[3]);

  /// see [Tareas.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Tareas>(_entities[9].properties[4]);

  /// see [Tareas.imagenes]
  static final imagenes =
      QueryStringProperty<Tareas>(_entities[9].properties[5]);

  /// see [Tareas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Tareas>(_entities[9].properties[6]);

  /// see [Tareas.jornada]
  static final jornada =
      QueryRelationToOne<Tareas, Jornadas>(_entities[9].properties[7]);

  /// see [Tareas.consultoria]
  static final consultoria =
      QueryRelationToOne<Tareas, Consultorias>(_entities[9].properties[8]);

  /// see [Tareas.statusSync]
  static final statusSync =
      QueryRelationToOne<Tareas, StatusSync>(_entities[9].properties[9]);
}

/// [Comunidades] entity fields to define ObjectBox queries.
class Comunidades_ {
  /// see [Comunidades.id]
  static final id =
      QueryIntegerProperty<Comunidades>(_entities[10].properties[0]);

  /// see [Comunidades.nombre]
  static final nombre =
      QueryStringProperty<Comunidades>(_entities[10].properties[1]);

  /// see [Comunidades.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Comunidades>(_entities[10].properties[2]);

  /// see [Comunidades.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Comunidades>(_entities[10].properties[3]);

  /// see [Comunidades.municipios]
  static final municipios =
      QueryRelationToOne<Comunidades, Municipios>(_entities[10].properties[4]);
}

/// [Emprendedores] entity fields to define ObjectBox queries.
class Emprendedores_ {
  /// see [Emprendedores.id]
  static final id =
      QueryIntegerProperty<Emprendedores>(_entities[11].properties[0]);

  /// see [Emprendedores.nombre]
  static final nombre =
      QueryStringProperty<Emprendedores>(_entities[11].properties[1]);

  /// see [Emprendedores.apellidoP]
  static final apellidoP =
      QueryStringProperty<Emprendedores>(_entities[11].properties[2]);

  /// see [Emprendedores.apellidoM]
  static final apellidoM =
      QueryStringProperty<Emprendedores>(_entities[11].properties[3]);

  /// see [Emprendedores.nacimiento]
  static final nacimiento =
      QueryIntegerProperty<Emprendedores>(_entities[11].properties[4]);

  /// see [Emprendedores.curp]
  static final curp =
      QueryStringProperty<Emprendedores>(_entities[11].properties[5]);

  /// see [Emprendedores.integrantesFamilia]
  static final integrantesFamilia =
      QueryStringProperty<Emprendedores>(_entities[11].properties[6]);

  /// see [Emprendedores.telefono]
  static final telefono =
      QueryStringProperty<Emprendedores>(_entities[11].properties[7]);

  /// see [Emprendedores.comentarios]
  static final comentarios =
      QueryStringProperty<Emprendedores>(_entities[11].properties[8]);

  /// see [Emprendedores.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendedores>(_entities[11].properties[9]);

  /// see [Emprendedores.comunidades]
  static final comunidades = QueryRelationToOne<Emprendedores, Comunidades>(
      _entities[11].properties[10]);

  /// see [Emprendedores.statusSync]
  static final statusSync = QueryRelationToOne<Emprendedores, StatusSync>(
      _entities[11].properties[11]);

  /// see [Emprendedores.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Emprendedores, Emprendimientos>(
          _entities[11].properties[12]);

  /// see [Emprendedores.imagen]
  static final imagen =
      QueryStringProperty<Emprendedores>(_entities[11].properties[13]);
}

/// [Estados] entity fields to define ObjectBox queries.
class Estados_ {
  /// see [Estados.id]
  static final id = QueryIntegerProperty<Estados>(_entities[12].properties[0]);

  /// see [Estados.nombre]
  static final nombre =
      QueryStringProperty<Estados>(_entities[12].properties[1]);

  /// see [Estados.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Estados>(_entities[12].properties[2]);

  /// see [Estados.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Estados>(_entities[12].properties[3]);
}

/// [Municipios] entity fields to define ObjectBox queries.
class Municipios_ {
  /// see [Municipios.id]
  static final id =
      QueryIntegerProperty<Municipios>(_entities[13].properties[0]);

  /// see [Municipios.nombre]
  static final nombre =
      QueryStringProperty<Municipios>(_entities[13].properties[1]);

  /// see [Municipios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Municipios>(_entities[13].properties[2]);

  /// see [Municipios.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Municipios>(_entities[13].properties[3]);

  /// see [Municipios.estados]
  static final estados =
      QueryRelationToOne<Municipios, Estados>(_entities[13].properties[4]);
}

/// [Jornadas] entity fields to define ObjectBox queries.
class Jornadas_ {
  /// see [Jornadas.id]
  static final id = QueryIntegerProperty<Jornadas>(_entities[14].properties[0]);

  /// see [Jornadas.numJornada]
  static final numJornada =
      QueryStringProperty<Jornadas>(_entities[14].properties[1]);

  /// see [Jornadas.proximaVisita]
  static final proximaVisita =
      QueryIntegerProperty<Jornadas>(_entities[14].properties[2]);

  /// see [Jornadas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Jornadas>(_entities[14].properties[3]);

  /// see [Jornadas.emprendimiento]
  static final emprendimiento = QueryRelationToOne<Jornadas, Emprendimientos>(
      _entities[14].properties[4]);

  /// see [Jornadas.tarea]
  static final tarea =
      QueryRelationToOne<Jornadas, Tareas>(_entities[14].properties[5]);

  /// see [Jornadas.statusSync]
  static final statusSync =
      QueryRelationToOne<Jornadas, StatusSync>(_entities[14].properties[6]);
}

/// [StatusSync] entity fields to define ObjectBox queries.
class StatusSync_ {
  /// see [StatusSync.id]
  static final id =
      QueryIntegerProperty<StatusSync>(_entities[15].properties[0]);

  /// see [StatusSync.status]
  static final status =
      QueryStringProperty<StatusSync>(_entities[15].properties[1]);

  /// see [StatusSync.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<StatusSync>(_entities[15].properties[2]);
}
