// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entitys.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(8, 804684152773215409),
      name: 'Emprendimientos',
      lastPropertyId: const IdUid(33, 4714516556889829554),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4677830973327539513),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3655261249465798823),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 807468286336679069),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4225051604479617429),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2319564184498508408),
            name: 'emprendedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 6767241145070274732),
            relationTarget: 'Emprendedores'),
        ModelProperty(
            id: const IdUid(16, 5126173959103968444),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2815575313211393813),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 400732199218356134),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(62, 2735008652274095664)),
        ModelProperty(
            id: const IdUid(24, 9067992503886811416),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(109, 2158114976016630089),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(25, 8956151736497272082),
            name: 'prioridadEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(110, 6914145295119698584),
            relationTarget: 'PrioridadEmp'),
        ModelProperty(
            id: const IdUid(27, 4661688415424027549),
            name: 'catalogoProyectoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(135, 3071001570087288716),
            relationTarget: 'CatalogoProyecto'),
        ModelProperty(
            id: const IdUid(28, 8555609759623119270),
            name: 'idInversionJornada',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6903190290684851827),
            name: 'faseActual',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 6585524487399118671),
            name: 'faseAnterior',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 7788765518671870184),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(233, 1803242766406010981)),
        ModelProperty(
            id: const IdUid(33, 4714516556889829554),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(256, 1186035180202240577),
            relationTarget: 'Imagenes')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 2038229905033466972),
            name: 'jornadas',
            targetId: const IdUid(24, 6358146304075079104)),
        ModelRelation(
            id: const IdUid(8, 9183356578860779220),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(13, 2084439730118676088),
            name: 'proveedores',
            targetId: const IdUid(38, 5382242557058931829)),
        ModelRelation(
            id: const IdUid(35, 5306897733520592510),
            name: 'faseEmp',
            targetId: const IdUid(36, 8975733277369074245))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'ventas', srcEntity: 'Ventas', srcField: ''),
        ModelBacklink(
            name: 'productosEmp', srcEntity: 'ProductosEmp', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: ''),
        ModelBacklink(
            name: 'inversiones', srcEntity: 'Inversiones', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 252808688812742776),
      name: 'Usuarios',
      lastPropertyId: const IdUid(36, 5053047566368863611),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2635581039067582434),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8585539283016018259),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4453572026011528588),
            name: 'apellidoP',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 769480280417967138),
            name: 'apellidoM',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8241390027662058716),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8831865134001231809),
            name: 'celular',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4366827260158841734),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 715728503018425294),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7064291300252248252),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 2225226539771083672),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(70, 177953814522194844)),
        ModelProperty(
            id: const IdUid(24, 6133859733044332540),
            name: 'rolId',
            type: 11,
            flags: 520,
            indexId: const IdUid(210, 5673280590788867277),
            relationTarget: 'Roles'),
        ModelProperty(
            id: const IdUid(29, 2352000377987118230),
            name: 'rfc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 8932174031785446642),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 9122619162300007543),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 720007507906714044),
            name: 'domicilio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 3454551053068243038),
            name: 'ordenTrabajoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(337, 2182435642457260945),
            relationTarget: 'OrdenTrabajo'),
        ModelProperty(
            id: const IdUid(36, 5053047566368863611),
            name: 'asesorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(341, 7688649936878772558),
            relationTarget: 'Usuarios')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(30, 6849141679018238392),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(62, 9163628031946481713),
            name: 'pagos',
            targetId: const IdUid(58, 6428801880818699617)),
        ModelRelation(
            id: const IdUid(69, 6600950642535277297),
            name: 'roles',
            targetId: const IdUid(39, 5004962762570684805)),
        ModelRelation(
            id: const IdUid(84, 5411951088038235824),
            name: 'clientes',
            targetId: const IdUid(10, 252808688812742776)),
        ModelRelation(
            id: const IdUid(85, 3090980319680596649),
            name: 'tecnicosMecanicos',
            targetId: const IdUid(10, 252808688812742776)),
        ModelRelation(
            id: const IdUid(86, 5641546153511965211),
            name: 'ordenesTrabajo',
            targetId: const IdUid(67, 5935206935227986130)),
        ModelRelation(
            id: const IdUid(87, 1176537328766838454),
            name: 'vehiculos',
            targetId: const IdUid(65, 5787722657754964069))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendimientos', srcEntity: 'Emprendimientos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 7673785883081583133),
      name: 'Ventas',
      lastPropertyId: const IdUid(15, 6698964233104397495),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3529393499177674234),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3959630620037866869),
            name: 'fechaInicio',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1842463129407517048),
            name: 'fechaTermino',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1303969564249935695),
            name: 'total',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6490506020631406852),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1402395516104320476),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(72, 8935966127410978309)),
        ModelProperty(
            id: const IdUid(10, 5860205113185975136),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8915905491367744850),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(169, 6318204878240891727),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(14, 5010841770389356201),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(243, 1429204767736367358)),
        ModelProperty(
            id: const IdUid(15, 6698964233104397495),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(37, 1034994423609054075),
            name: 'prodVendidos',
            targetId: const IdUid(51, 1596057038243167918)),
        ModelRelation(
            id: const IdUid(39, 2722631720886832152),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 5075853906068129300),
      name: 'Consultorias',
      lastPropertyId: const IdUid(17, 4902247676630630727),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3514354406731350672),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4433239802450158965),
            name: 'documentos',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8866915593674479010),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2139629849183696076),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 1231698506270026223),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(10, 7906326577399145661),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(60, 7031508221537022440)),
        ModelProperty(
            id: const IdUid(12, 5823608424634900217),
            name: 'areaCirculoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(99, 1257105897648979343),
            relationTarget: 'AreaCirculo'),
        ModelProperty(
            id: const IdUid(13, 5759260250882224252),
            name: 'ambitoConsultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(100, 8661572209442876177),
            relationTarget: 'AmbitoConsultoria'),
        ModelProperty(
            id: const IdUid(15, 2561056730102834673),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3843038384942165449),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(240, 6874025484378531555)),
        ModelProperty(
            id: const IdUid(17, 4902247676630630727),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(25, 650409796119095799),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(26, 2137414110899067316),
            name: 'tareas',
            targetId: const IdUid(19, 2491530739310255510))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 2491530739310255510),
      name: 'Tareas',
      lastPropertyId: const IdUid(23, 1609489238474676070),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1933555606703313228),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8014791709560172837),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3881874201994923632),
            name: 'fechaRevision',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5064642112222430336),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7410991421173790048),
            name: 'jornadaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7212582056034264336),
            relationTarget: 'Jornadas'),
        ModelProperty(
            id: const IdUid(12, 609327474518802635),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 5990507287199149727),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(15, 7369722519639465454),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(69, 2233256601077182610)),
        ModelProperty(
            id: const IdUid(17, 3679854591609531040),
            name: 'tarea',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 195209596343901530),
            name: 'porcentajeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(203, 1870818626809919537),
            relationTarget: 'PorcentajeAvance'),
        ModelProperty(
            id: const IdUid(21, 6214653352507297699),
            name: 'comentarios',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 6170236630099654648),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 1609489238474676070),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(27, 6651921256699348419),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(36, 5691303683457395339),
            name: 'imagenes',
            targetId: const IdUid(47, 4406411524870188538))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 6615538153946220074),
      name: 'Comunidades',
      lastPropertyId: const IdUid(10, 2840569838441538888),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8800100372581327104),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8730242443265006025),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 721387320777571889),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5885740297519224064),
            name: 'municipiosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 6694643856830086551),
            relationTarget: 'Municipios'),
        ModelProperty(
            id: const IdUid(7, 4568878887845057899),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(59, 7369061656734412750)),
        ModelProperty(
            id: const IdUid(8, 2953175511506922439),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2840569838441538888),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(211, 7007424586671171422))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(21, 311544265460535081),
      name: 'Emprendedores',
      lastPropertyId: const IdUid(23, 4858378161463265971),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8386730720267544453),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4330157751559637236),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 397638224005716367),
            name: 'nacimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3779379054940407382),
            name: 'curp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6772946936896296896),
            name: 'integrantesFamilia',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6532186673116404834),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1488410309800825779),
            name: 'comentarios',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 748875377023563317),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3552854491581449237),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 5629854475557113245),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(16, 4772008941693181500),
            name: 'apellidos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 677332732810007841),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(61, 8815402416282925921)),
        ModelProperty(
            id: const IdUid(21, 5979281379101082134),
            name: 'comunidadId',
            type: 11,
            flags: 520,
            indexId: const IdUid(145, 4680505657145532033),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(22, 2413860551118199294),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(232, 6714898879411675212)),
        ModelProperty(
            id: const IdUid(23, 4858378161463265971),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(254, 3834159862581205550),
            relationTarget: 'Imagenes')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 6695548577594940433),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 334643984474072026),
      name: 'Estados',
      lastPropertyId: const IdUid(9, 4942093323471171099),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8944844315150541404),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2660299098597049972),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4495471650360650211),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1340243202863340307),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(64, 5835974261382713960)),
        ModelProperty(
            id: const IdUid(7, 3354600507596039521),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4942093323471171099),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(212, 2663067223888329682))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'municipios', srcEntity: 'Municipios', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(23, 6229275484692578053),
      name: 'Municipios',
      lastPropertyId: const IdUid(10, 8809667950868572312),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8933146656611953476),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8369695090390803726),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3101198272334121532),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3651614083986583572),
            name: 'estadosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 1773413668740873220),
            relationTarget: 'Estados'),
        ModelProperty(
            id: const IdUid(7, 5403234117840867506),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(66, 2437097551889800455)),
        ModelProperty(
            id: const IdUid(8, 7402881280207170997),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8809667950868572312),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(213, 906762606252371937))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'comunidades', srcEntity: 'Comunidades', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(24, 6358146304075079104),
      name: 'Jornadas',
      lastPropertyId: const IdUid(15, 744399421319379407),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6358759877557227346),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 498346413789251837),
            name: 'numJornada',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3362702631639476479),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5712771709171787916),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 6035553439883628722),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(7, 4791150844778521105),
            name: 'tareaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 1639668133313135676),
            relationTarget: 'Tareas'),
        ModelProperty(
            id: const IdUid(10, 2354079124955583253),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(65, 2011636909834464311)),
        ModelProperty(
            id: const IdUid(12, 8889235360537659107),
            name: 'fechaRevision',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1735839774357730150),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6450285659452861803),
            name: 'completada',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 744399421319379407),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 4246279541821576094),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 1774905738150923512),
      name: 'Bitacora',
      lastPropertyId: const IdUid(40, 7122234269288979042),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2437720472275770378),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 285794828058190926),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4185118097964001351),
            name: 'instruccionAdicional',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 9135086539016474235),
            name: 'instruccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 4891573414299167623),
            name: 'clienteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(278, 3350950497497969535),
            relationTarget: 'Cliente'),
        ModelProperty(
            id: const IdUid(21, 561059605981752271),
            name: 'vehiculoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(279, 4800753572139945092),
            relationTarget: 'Vehiculo'),
        ModelProperty(
            id: const IdUid(22, 8492288376663323770),
            name: 'ordenTrabajoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(288, 199666736918557477),
            relationTarget: 'OrdenTrabajo'),
        ModelProperty(
            id: const IdUid(23, 2129861730720673334),
            name: 'observacionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(297, 8685125260427970668),
            relationTarget: 'Observaciones'),
        ModelProperty(
            id: const IdUid(25, 3918405948041939496),
            name: 'suspensionDireccionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(299, 3403559951066700930),
            relationTarget: 'SuspensionDireccion'),
        ModelProperty(
            id: const IdUid(26, 1880547944969244836),
            name: 'motorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(300, 9038695532186726245),
            relationTarget: 'Motor'),
        ModelProperty(
            id: const IdUid(27, 3365272668340359628),
            name: 'fluidosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(301, 2303801916463691192),
            relationTarget: 'Fluidos'),
        ModelProperty(
            id: const IdUid(28, 7287601138491933738),
            name: 'frenosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(302, 6692076237910304150),
            relationTarget: 'Frenos'),
        ModelProperty(
            id: const IdUid(29, 5331836423271060866),
            name: 'electricoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(303, 4414320023330082672),
            relationTarget: 'Electrico'),
        ModelProperty(
            id: const IdUid(30, 7654551223914586010),
            name: 'servicioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(330, 5249064443956429852),
            relationTarget: 'Servicio'),
        ModelProperty(
            id: const IdUid(31, 6988111336556761),
            name: 'productoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(331, 3361789893351489509),
            relationTarget: 'Producto'),
        ModelProperty(
            id: const IdUid(33, 4535282600813447593),
            name: 'estatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(334, 504837245352985312),
            relationTarget: 'Estatus'),
        ModelProperty(
            id: const IdUid(35, 245771756674032572),
            name: 'usuarioPropietario',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 8296591369216985087),
            name: 'idOrdenTrabajo',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 962279002678131142),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(340, 1215468110805298241),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(38, 6977709619624885474),
            name: 'executeSupabase',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 2108000366401092803),
            name: 'ordenServicioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(345, 2071126468008917387),
            relationTarget: 'OrdenServicio'),
        ModelProperty(
            id: const IdUid(40, 7122234269288979042),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(355, 8629614743217635052),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos',
            srcEntity: 'Emprendimientos',
            srcField: ''),
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: ''),
        ModelBacklink(name: 'usuarios', srcEntity: 'Usuarios', srcField: ''),
        ModelBacklink(name: 'jornadas', srcEntity: 'Jornadas', srcField: ''),
        ModelBacklink(
            name: 'productosEmp', srcEntity: 'ProductosEmp', srcField: ''),
        ModelBacklink(
            name: 'productosCot', srcEntity: 'ProdCotizados', srcField: ''),
        ModelBacklink(
            name: 'inversiones', srcEntity: 'Inversiones', srcField: ''),
        ModelBacklink(
            name: 'prodSolicitados', srcEntity: 'ProdSolicitado', srcField: ''),
        ModelBacklink(name: 'ventas', srcEntity: 'Ventas', srcField: ''),
        ModelBacklink(
            name: 'prodVendidos', srcEntity: 'ProdVendidos', srcField: ''),
        ModelBacklink(
            name: 'inversionXprodCotizados',
            srcEntity: 'InversionesXProdCotizados',
            srcField: ''),
        ModelBacklink(name: 'pagos', srcEntity: 'Pagos', srcField: ''),
        ModelBacklink(name: 'imagenes', srcEntity: 'Imagenes', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(30, 485586835672622394),
      name: 'AmbitoConsultoria',
      lastPropertyId: const IdUid(8, 3826283846521524993),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4426375179141119539),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2135837894165709071),
            name: 'nombreAmbito',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5845226999957833968),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2777595135217905192),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5063104180889118220),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(88, 4818184016266482651)),
        ModelProperty(
            id: const IdUid(7, 4324338883283060091),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(90, 6525247578997517066),
            relationTarget: 'Bitacora'),
        ModelProperty(
            id: const IdUid(8, 3826283846521524993),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(219, 5376234116005473329))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 7426889168202420991),
            name: 'consultorias',
            targetId: const IdUid(12, 5075853906068129300))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 8382413157677919073),
      name: 'AreaCirculo',
      lastPropertyId: const IdUid(9, 1101610762497147019),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4378203071035232794),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8426332937359075528),
            name: 'nombreArea',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3678492327230106894),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 679198805912964589),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6017416368221530385),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(91, 921370380699638957)),
        ModelProperty(
            id: const IdUid(6, 7149773872288751418),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(92, 7365549080914549891),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(8, 7761086571426781835),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(94, 5913940684400773460),
            relationTarget: 'Bitacora'),
        ModelProperty(
            id: const IdUid(9, 1101610762497147019),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(222, 4147595753559781092))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 1811709022167361315),
      name: 'Bancos',
      lastPropertyId: const IdUid(6, 5153439313644065044),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1756012209187183210),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1731712842219867702),
            name: 'banco',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5399121294798371700),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2702753041033734925),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4293383646830114252),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(95, 8999014678028092781)),
        ModelProperty(
            id: const IdUid(6, 5153439313644065044),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(226, 3686101023877746252))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'proveedores', srcEntity: 'Proveedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(34, 1304959332947864171),
      name: 'CondicionesPago',
      lastPropertyId: const IdUid(6, 8884785903112782614),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 801597087049948180),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8735741652297119805),
            name: 'condicion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6009298259383481514),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3715048591191326703),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2695423455764152197),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(98, 3071625320339972286)),
        ModelProperty(
            id: const IdUid(6, 8884785903112782614),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(227, 4026023873568750968))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'proveedores', srcEntity: 'Proveedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(36, 8975733277369074245),
      name: 'FasesEmp',
      lastPropertyId: const IdUid(6, 2243660346200626574),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7828986895200618322),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6094806201443064731),
            name: 'fase',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8849603484316850022),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3722514468989464909),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(112, 8969067937454063263)),
        ModelProperty(
            id: const IdUid(6, 2243660346200626574),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(220, 5233128278830638581))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 1687178188832172327),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 562207686048996243),
      name: 'PrioridadEmp',
      lastPropertyId: const IdUid(5, 8393564967718994929),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2811901041029349773),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5054656386255573113),
            name: 'prioridad',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4785767606920915006),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5891548134257716403),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(114, 6094549584282026938))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(16, 8314830901667483110),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 5382242557058931829),
      name: 'Proveedores',
      lastPropertyId: const IdUid(17, 1760142579483909833),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1484676459896345649),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2702587581297719928),
            name: 'nombreFiscal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 627179554347977552),
            name: 'rfc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 924042896960532318),
            name: 'direccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4253240073651518778),
            name: 'nombreEncargado',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9188143602532049857),
            name: 'clabe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9068672088910412439),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7123252788145912746),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8509517577700052266),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 898724826382222644),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(116, 8487270208938798479)),
        ModelProperty(
            id: const IdUid(12, 2168687520283812027),
            name: 'tipoProveedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(117, 961819206264313590),
            relationTarget: 'TipoProveedor'),
        ModelProperty(
            id: const IdUid(13, 8605556586939591362),
            name: 'comunidadesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(118, 2076068900619511099),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(14, 5446471853032327793),
            name: 'condicionPagoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(119, 2470984967591703509),
            relationTarget: 'CondicionesPago'),
        ModelProperty(
            id: const IdUid(15, 1996743748672640144),
            name: 'bancoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(120, 2698679340301377654),
            relationTarget: 'Bancos'),
        ModelProperty(
            id: const IdUid(17, 1760142579483909833),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(230, 3649472208462848043))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(54, 4063522687370462098),
            name: 'productosProv',
            targetId: const IdUid(56, 7277108221751789003))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 5004962762570684805),
      name: 'Roles',
      lastPropertyId: const IdUid(7, 6054280734454924450),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9120360617098614714),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8175506260800690164),
            name: 'rol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1629138227601864338),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3030501079695674721),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(121, 836541551050324843)),
        ModelProperty(
            id: const IdUid(6, 7472638587980563205),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(123, 1234571576087817606),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(17, 2284205245851171279),
            name: 'usuarios',
            targetId: const IdUid(10, 252808688812742776))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(41, 5659431982863420214),
      name: 'TipoProveedor',
      lastPropertyId: const IdUid(6, 1953991286215743323),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6205972270821820963),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6844452117923663757),
            name: 'tipo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 293831517252750520),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5782809536948366393),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7098281571946668829),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(124, 54236561938110646)),
        ModelProperty(
            id: const IdUid(6, 1953991286215743323),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(228, 3111979778594182921))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(55, 4346916878806035047),
            name: 'proveedores',
            targetId: const IdUid(38, 5382242557058931829))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(43, 8172937846526815489),
      name: 'ProductosEmp',
      lastPropertyId: const IdUid(18, 5174371667876691074),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4694457206836110411),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8138687838003749892),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7857354936296959346),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3433062347635299317),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7908243977080491158),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2999215295973720507),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4117349148605079338),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(127, 5187664837969501724)),
        ModelProperty(
            id: const IdUid(11, 4408277863979840317),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(129, 6396345650284201105),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(13, 770565802267609172),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(136, 1962134460049855123),
            relationTarget: 'UnidadMedida'),
        ModelProperty(
            id: const IdUid(16, 7798777902579264472),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(242, 5051893160903597239)),
        ModelProperty(
            id: const IdUid(17, 5476718282839441262),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(245, 3873668621277198912),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(18, 5174371667876691074),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(22, 7809991115224388687),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'vendidos', srcEntity: 'ProdVendidos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(44, 7028042862098546470),
      name: 'CatalogoProyecto',
      lastPropertyId: const IdUid(9, 540581268254452076),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2320402032859380061),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5836263409631228918),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2962342881882180254),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7173197756596644756),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(132, 6485836029384457432)),
        ModelProperty(
            id: const IdUid(7, 5371635900277927694),
            name: 'tipoProyectoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(214, 5267904123938106298),
            relationTarget: 'TipoProyecto'),
        ModelProperty(
            id: const IdUid(8, 1067333676182017423),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 540581268254452076),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(218, 3240317315633038390))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(20, 1112665914041550299),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409)),
        ModelRelation(
            id: const IdUid(70, 2888113605849244994),
            name: 'prodProyecto',
            targetId: const IdUid(60, 794331956868775333))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(45, 7727246235344048855),
      name: 'UnidadMedida',
      lastPropertyId: const IdUid(7, 8345237608695833363),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6552210119824315394),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6031532578549188804),
            name: 'unidadMedida',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2602374307196861226),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3793969537050688732),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2515638413658999127),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(137, 2091809350828315876)),
        ModelProperty(
            id: const IdUid(7, 8345237608695833363),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(221, 7799765705605105931))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 6114299832999780262),
            name: 'productosEmp',
            targetId: const IdUid(43, 8172937846526815489)),
        ModelRelation(
            id: const IdUid(45, 2780758001951939604),
            name: 'prodSolicitados',
            targetId: const IdUid(49, 100215042722630549)),
        ModelRelation(
            id: const IdUid(80, 1530996088356897517),
            name: 'productosProv',
            targetId: const IdUid(56, 7277108221751789003)),
        ModelRelation(
            id: const IdUid(82, 2481463102848550386),
            name: 'prodVendidos',
            targetId: const IdUid(51, 1596057038243167918))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(47, 4406411524870188538),
      name: 'Imagenes',
      lastPropertyId: const IdUid(19, 5622714150718426006),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3691935462996643579),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2405594339854436878),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4085376825497202111),
            name: 'imagenes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7233356352073964903),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6805352315537467118),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8462186556978795783),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4973645824824210931),
            name: 'base64',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 359111385444592456),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(251, 1378116722324924789)),
        ModelProperty(
            id: const IdUid(12, 5630061134539575344),
            name: 'emprendedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(255, 5783738241510611326),
            relationTarget: 'Emprendedores'),
        ModelProperty(
            id: const IdUid(13, 6948596352627655480),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(257, 7992571315025806315),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(14, 2276817419616758245),
            name: 'tareaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(258, 2564110096327135084),
            relationTarget: 'Tareas'),
        ModelProperty(
            id: const IdUid(15, 3259635853753189453),
            name: 'productosEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(266, 3634839339436258221),
            relationTarget: 'ProductosEmp'),
        ModelProperty(
            id: const IdUid(17, 7273728351083527051),
            name: 'inversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(270, 5674494763222124400),
            relationTarget: 'Inversiones'),
        ModelProperty(
            id: const IdUid(18, 2485071929341118535),
            name: 'productosProvId',
            type: 11,
            flags: 520,
            indexId: const IdUid(272, 5363954372619465298),
            relationTarget: 'ProductosProv'),
        ModelProperty(
            id: const IdUid(19, 5622714150718426006),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(46, 3169132381372405348),
            name: 'prodSolicitados',
            targetId: const IdUid(49, 100215042722630549)),
        ModelRelation(
            id: const IdUid(67, 3401496880925313742),
            name: 'prodProyecto',
            targetId: const IdUid(60, 794331956868775333)),
        ModelRelation(
            id: const IdUid(74, 211223486003667531),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(48, 5212286852224162052),
      name: 'Inversiones',
      lastPropertyId: const IdUid(19, 6787102826169269276),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4138129769667715666),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8167911247644741740),
            name: 'fechaCompra',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3130190475947679170),
            name: 'porcentajePago',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8854015765007058080),
            name: 'montoPagar',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1340449646880882038),
            name: 'saldo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8691913441763965844),
            name: 'totalInversion',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5889902574621776672),
            name: 'inversionRecibida',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7569582722522307025),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3303189776667867823),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(150, 4857149374716539822)),
        ModelProperty(
            id: const IdUid(11, 6159336605849364287),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(152, 7486967127840588613),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(13, 5805002687075125842),
            name: 'estadoInversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(173, 1856912266704407521),
            relationTarget: 'EstadoInversion'),
        ModelProperty(
            id: const IdUid(15, 4929476139671102849),
            name: 'jornada3',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3704745103843410671),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2426439504707864094),
            name: 'imagenFirmaRecibidoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(267, 758836899834110068),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(18, 2537752804515452942),
            name: 'imagenProductoEntregadoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(268, 370237648053660087),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(19, 6787102826169269276),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(31, 1862902552288384803),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(47, 4464129763118299540),
            name: 'prodSolicitados',
            targetId: const IdUid(49, 100215042722630549)),
        ModelRelation(
            id: const IdUid(57, 4635124561515689063),
            name: 'inversionXprodCotizados',
            targetId: const IdUid(57, 2397636268740769237)),
        ModelRelation(
            id: const IdUid(60, 7449809876194961892),
            name: 'pagos',
            targetId: const IdUid(58, 6428801880818699617))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(49, 100215042722630549),
      name: 'ProdSolicitado',
      lastPropertyId: const IdUid(20, 999937020643046967),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3046162981313169219),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8828754073992079976),
            name: 'idInversion',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6256994399710891559),
            name: 'producto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 509082260407869804),
            name: 'marcaSugerida',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7687625504079176559),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3848426801060822468),
            name: 'proveedorSugerido',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3653683242709456146),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4180733650669661655),
            name: 'costoEstimado',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5483311360990604043),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6397496033575130961),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(154, 7137789280571665448)),
        ModelProperty(
            id: const IdUid(14, 900705157350773814),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(160, 6457619861549834438),
            relationTarget: 'UnidadMedida'),
        ModelProperty(
            id: const IdUid(15, 4907586445446392728),
            name: 'tipoEmpaquesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(174, 6286964184448623398),
            relationTarget: 'TipoEmpaques'),
        ModelProperty(
            id: const IdUid(16, 6672935990570244391),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(177, 3897805815254755813),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(17, 7803251753327258161),
            name: 'inversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(178, 4673647578492115092),
            relationTarget: 'Inversiones'),
        ModelProperty(
            id: const IdUid(18, 4420051813097480449),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1346415551296560367),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 999937020643046967),
            name: 'familiaInversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(276, 2066412677136806621),
            relationTarget: 'FamiliaInversion')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(33, 490303849537468796),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(51, 1596057038243167918),
      name: 'ProdVendidos',
      lastPropertyId: const IdUid(19, 6295741357351637114),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4957809651365819857),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1023981078206490618),
            name: 'cantVendida',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1203964760339024637),
            name: 'subtotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1140796397664543605),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6009325388434615334),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(162, 7975582795456396969)),
        ModelProperty(
            id: const IdUid(9, 3290470358321974846),
            name: 'productoEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(166, 8725347892382415626),
            relationTarget: 'ProductosEmp'),
        ModelProperty(
            id: const IdUid(10, 3745072739738376155),
            name: 'precioVenta',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 518771665974988424),
            name: 'ventaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(170, 8808435336941675980),
            relationTarget: 'Ventas'),
        ModelProperty(
            id: const IdUid(12, 7341904985707626523),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7390334429251842194),
            name: 'nombreProd',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8938847561919678381),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6988363047260355471),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 2167749983676750959),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(264, 5616441566408550489),
            relationTarget: 'UnidadMedida'),
        ModelProperty(
            id: const IdUid(18, 4465631852815783681),
            name: 'postEmiWeb',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6295741357351637114),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(38, 7225457672163554227),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(52, 8669365513736941915),
      name: 'EstadoInversion',
      lastPropertyId: const IdUid(6, 4613301727320737404),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4939758375178121758),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1898388958620666182),
            name: 'estado',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3626156555686478411),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4437359734776404765),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(171, 912793781028577083)),
        ModelProperty(
            id: const IdUid(6, 4613301727320737404),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(224, 4199179398059258901))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(40, 5834951486994371212),
            name: 'emprendimientos',
            targetId: const IdUid(48, 5212286852224162052))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(53, 2607346891989518545),
      name: 'TipoEmpaques',
      lastPropertyId: const IdUid(7, 4169353112900453047),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4183204359112636458),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 218677502596731995),
            name: 'tipo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1565136780225606979),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4403299478097620527),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4330832673145927863),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(175, 3351216675199889495)),
        ModelProperty(
            id: const IdUid(7, 4169353112900453047),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(225, 4339553839706179839))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(44, 4935766962611062723),
            name: 'prodSolicitados',
            targetId: const IdUid(49, 100215042722630549)),
        ModelRelation(
            id: const IdUid(79, 8672757953034772208),
            name: 'productosProyecto',
            targetId: const IdUid(60, 794331956868775333))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(54, 858406953056318390),
      name: 'ProdCotizados',
      lastPropertyId: const IdUid(18, 8052147635774927584),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1195033526548793243),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 5892986395429184015),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1735856656110822140),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5003187748529407805),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(179, 5450317648015787881)),
        ModelProperty(
            id: const IdUid(11, 3418457446093523722),
            name: 'costoTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1494248539864097608),
            name: 'productosProvId',
            type: 11,
            flags: 520,
            indexId: const IdUid(186, 3410490313341050786),
            relationTarget: 'ProductosProv'),
        ModelProperty(
            id: const IdUid(14, 8902199047831449277),
            name: 'inversionXprodCotizadosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(197, 7282562986687369629),
            relationTarget: 'InversionesXProdCotizados'),
        ModelProperty(
            id: const IdUid(15, 4879353849688490270),
            name: 'aceptado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8734737385801163286),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(248, 3698332697706038826)),
        ModelProperty(
            id: const IdUid(17, 1023970263587459046),
            name: 'costoUnitario',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8052147635774927584),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(49, 7591979899617801170),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(56, 7277108221751789003),
      name: 'ProductosProv',
      lastPropertyId: const IdUid(17, 4444561754178453511),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8250405244079524719),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1196238384957646948),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3967763482680592378),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7689442594664249010),
            name: 'marca',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5704405114348775567),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7805692380146964309),
            name: 'tiempoEntrega',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7556478417341751322),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3895511561300571603),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3435717903735435465),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(187, 2826668704568862916)),
        ModelProperty(
            id: const IdUid(11, 9188564848873461175),
            name: 'proveedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(189, 470088676257447863),
            relationTarget: 'Proveedores'),
        ModelProperty(
            id: const IdUid(13, 7561241731767258348),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(191, 6543979908969061495),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(15, 5902996508639511542),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(231, 7607441243011446895)),
        ModelProperty(
            id: const IdUid(17, 4444561754178453511),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(263, 8629799518235793864),
            relationTarget: 'UnidadMedida')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(53, 5207316558226170877),
            name: 'prodCotizados',
            targetId: const IdUid(54, 858406953056318390))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(57, 2397636268740769237),
      name: 'InversionesXProdCotizados',
      lastPropertyId: const IdUid(8, 1038874851836746200),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8192697722688898302),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4228686267256851633),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4482941668440171912),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(194, 3785567655000907761)),
        ModelProperty(
            id: const IdUid(5, 8021686265792875560),
            name: 'inversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(196, 3975026415599243725),
            relationTarget: 'Inversiones'),
        ModelProperty(
            id: const IdUid(6, 1747257805174508181),
            name: 'aceptado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6157324509682149666),
            name: 'idEmiWeb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1038874851836746200),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(58, 7743390360918718064),
            name: 'prodCotizados',
            targetId: const IdUid(54, 858406953056318390)),
        ModelRelation(
            id: const IdUid(59, 2270832969489684294),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(58, 6428801880818699617),
      name: 'Pagos',
      lastPropertyId: const IdUid(10, 5801515247847733125),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4115903305292342690),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4203156006095368368),
            name: 'montoAbonado',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2622731725629235359),
            name: 'fechaMovimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7079987813871341317),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7803421008754010390),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(198, 7168385615663272966)),
        ModelProperty(
            id: const IdUid(7, 130051233404825466),
            name: 'inversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(200, 5332962881385054503),
            relationTarget: 'Inversiones'),
        ModelProperty(
            id: const IdUid(8, 8776328160547757904),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(201, 5830096455343665109),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(9, 8582847983321332165),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(271, 8536477397944553514)),
        ModelProperty(
            id: const IdUid(10, 5801515247847733125),
            name: 'idEmprendimiento',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(61, 8919084738549353227),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(59, 6006155563437934053),
      name: 'PorcentajeAvance',
      lastPropertyId: const IdUid(6, 4911734169367996461),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4525960762311388402),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1632781054791534436),
            name: 'porcentajeAvance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3670268531659226139),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6444224325059561140),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(202, 143011296149809467)),
        ModelProperty(
            id: const IdUid(6, 4911734169367996461),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(229, 5810897711257410775))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(60, 794331956868775333),
      name: 'ProdProyecto',
      lastPropertyId: const IdUid(20, 9213895077009524929),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5155663315652452134),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6961848778599443170),
            name: 'producto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 253269936084193423),
            name: 'marcaSugerida',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 421952904768485177),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6963090433423275111),
            name: 'proveedorSugerido',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7133744049015284017),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5189588664183404315),
            name: 'costoEstimado',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8132421813588938084),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5478925107666142516),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(204, 2866050870147532873)),
        ModelProperty(
            id: const IdUid(12, 2137914798752697607),
            name: 'catalogoProyectoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(207, 6403126487263111297),
            relationTarget: 'CatalogoProyecto'),
        ModelProperty(
            id: const IdUid(13, 7110925718061362795),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(208, 221036229575549643),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(16, 4152954067029024740),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(239, 452351417968063305)),
        ModelProperty(
            id: const IdUid(19, 6258211936753955292),
            name: 'tipoEmpaqueId',
            type: 11,
            flags: 520,
            indexId: const IdUid(262, 2908751672841509107),
            relationTarget: 'TipoEmpaques'),
        ModelProperty(
            id: const IdUid(20, 9213895077009524929),
            name: 'familiaInversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(277, 5088118459977856954),
            relationTarget: 'FamiliaInversion')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(62, 5967866020755512418),
      name: 'TipoProyecto',
      lastPropertyId: const IdUid(7, 3601066374755293931),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1868100954971560176),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5330889346371171696),
            name: 'tipoProyecto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1067165614728355184),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 878857116301657281),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7281562487153752742),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(215, 3296377609947908934)),
        ModelProperty(
            id: const IdUid(7, 3601066374755293931),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(217, 2746312204127717238))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(71, 2864929897176631708),
            name: 'categoriasProyecto',
            targetId: const IdUid(44, 7028042862098546470))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(63, 3167743746507035878),
      name: 'FamiliaInversion',
      lastPropertyId: const IdUid(6, 8224899873614020012),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2016948444927180239),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1663982090695204674),
            name: 'familiaInversion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8645563325765495312),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8793093698124241452),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7056448703456479325),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(274, 7778537774406173551)),
        ModelProperty(
            id: const IdUid(6, 8224899873614020012),
            name: 'idEmiWeb',
            type: 9,
            flags: 2080,
            indexId: const IdUid(275, 1197386415650895805))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'prodSolicitados', srcEntity: 'ProdSolicitado', srcField: ''),
        ModelBacklink(
            name: 'prodProyecto', srcEntity: 'ProdProyecto', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(64, 7644021050378277919),
      name: 'Cliente',
      lastPropertyId: const IdUid(15, 2963621576722390086),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 536537212247113032),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3877780690782221807),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 715541101644565130),
            name: 'apellidoP',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1851395674978117833),
            name: 'apellidoM',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 201009305971585248),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7207114180017655793),
            name: 'celular',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3038192423314954586),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7516838797346420992),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2098409856135981629),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(280, 3895966229499571572)),
        ModelProperty(
            id: const IdUid(12, 325137281375943384),
            name: 'imagenId',
            type: 11,
            flags: 520,
            indexId: const IdUid(281, 3506737364382179027),
            relationTarget: 'Imagenes'),
        ModelProperty(
            id: const IdUid(14, 6584156735266522728),
            name: 'rfc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2963621576722390086),
            name: 'domicilio',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(65, 5787722657754964069),
      name: 'Vehiculo',
      lastPropertyId: const IdUid(16, 379514907682064106),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8777486557899970350),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 269017718122273037),
            name: 'marca',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3301870542098382372),
            name: 'modelo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3036183745290217451),
            name: 'anio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8151815759241758472),
            name: 'vin',
            type: 9,
            flags: 2080,
            indexId: const IdUid(282, 6911453516338894503)),
        ModelProperty(
            id: const IdUid(6, 8060557377120300020),
            name: 'placas',
            type: 9,
            flags: 2080,
            indexId: const IdUid(283, 1457835175629472431)),
        ModelProperty(
            id: const IdUid(9, 5656616589418219150),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1317518254346203629),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(284, 2257360482014751691)),
        ModelProperty(
            id: const IdUid(11, 1762205881541880644),
            name: 'clienteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(285, 6308860898793184874),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(13, 874652329641763868),
            name: 'motor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7811304686810842807),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8577152736759332686),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 379514907682064106),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(66, 6169138316575027919),
      name: 'FormaPago',
      lastPropertyId: const IdUid(4, 1847249199789191708),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2225479898424516674),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3405801118963612563),
            name: 'formaPago',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1415095316563273851),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1847249199789191708),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(289, 818254706982232906))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'ordenTrabajo', srcEntity: 'OrdenTrabajo', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(67, 5935206935227986130),
      name: 'OrdenTrabajo',
      lastPropertyId: const IdUid(20, 7723558054890044016),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6984767539937700275),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2176231875232329202),
            name: 'fechaOrden',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3321044260440226459),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7805687423956353446),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(290, 7932585673765095864)),
        ModelProperty(
            id: const IdUid(7, 3132589332101803124),
            name: 'clienteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(292, 1219352906317970146),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(8, 7299988902361138060),
            name: 'vehiculoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(293, 7768872894250956259),
            relationTarget: 'Vehiculo'),
        ModelProperty(
            id: const IdUid(9, 3705082018373080443),
            name: 'formaPagoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(294, 4404778352683764595),
            relationTarget: 'FormaPago'),
        ModelProperty(
            id: const IdUid(10, 737096913000232805),
            name: 'gasolina',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2273294436203332185),
            name: 'kilometrajeMillaje',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 9159429507851055399),
            name: 'descripcionFalla',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7527339157164656864),
            name: 'estatusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(336, 2885127048885014010),
            relationTarget: 'Estatus'),
        ModelProperty(
            id: const IdUid(17, 605237792120356083),
            name: 'asesorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(342, 7775925577122272699),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(18, 2971104627899873739),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5050726085676383011),
            name: 'ordenServicioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(346, 5102240519216394134),
            relationTarget: 'OrdenServicio'),
        ModelProperty(
            id: const IdUid(20, 7723558054890044016),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(360, 3439419524514485769),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'observacion', srcEntity: 'Observaciones', srcField: ''),
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(68, 3713927666656252399),
      name: 'Observaciones',
      lastPropertyId: const IdUid(16, 2211411520720391891),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7649954976526474598),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7770854650492431421),
            name: 'fechaObservacion',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5505397589679894767),
            name: 'respuestaP1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 699863168351027397),
            name: 'respuestaP2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2350854603691429285),
            name: 'respuestaP3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7908047968288145105),
            name: 'respuestaP4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8352425832288518353),
            name: 'respuestaP5',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4400134888944794752),
            name: 'respuestaP6',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6520458733199875118),
            name: 'respuestaP7',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 459494196219413966),
            name: 'respuestaP8',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2685074739700608388),
            name: 'respuestaP9',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3813717749858696997),
            name: 'respuestaP10',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2852379985617170245),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6570187720589570573),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(295, 7318119897512116915)),
        ModelProperty(
            id: const IdUid(15, 2526752159936628840),
            name: 'ordenTrabajoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(296, 4588799358054363302),
            relationTarget: 'OrdenTrabajo'),
        ModelProperty(
            id: const IdUid(16, 2211411520720391891),
            name: 'nombreAsesor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(69, 194731522577233837),
      name: 'Electrico',
      lastPropertyId: const IdUid(16, 3688190060364945344),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3899599197910438393),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1582286473411789249),
            name: 'terminalesDeBaterias',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7810307374051011471),
            name: 'terminalesDeBateriasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8273892317905702198),
            name: 'lucesFrenos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5829707091731756906),
            name: 'lucesFrenosObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8589511875773959310),
            name: 'lucesDireccionales',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2037225785371025010),
            name: 'lucesDireccionalesObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6695808902686629258),
            name: 'lucesCuartos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2899779761605154913),
            name: 'lucesCuartosObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2943495617865334423),
            name: 'checkEngine',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2044919953711266738),
            name: 'checkEngineObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2687713125527562977),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1354923012247420241),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8098841996086351966),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(304, 7623393226964576846)),
        ModelProperty(
            id: const IdUid(16, 3688190060364945344),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(356, 8944888087688617558),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(70, 7402766830593382424),
      name: 'Fluidos',
      lastPropertyId: const IdUid(16, 3572954889694640449),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5286832443788918267),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3232318583791222270),
            name: 'atf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3564655150886546987),
            name: 'atfObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1430041349471906575),
            name: 'power',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1356915949558732810),
            name: 'powerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8467277798439327185),
            name: 'frenos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8483743287805547205),
            name: 'frenosObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3773888057419244273),
            name: 'anticongelante',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6803321901637660678),
            name: 'anticongelanteObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 19444752648793607),
            name: 'wipers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2939295981831265925),
            name: 'wipersObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7362246488296728318),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4902618966093921228),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2844263264656519334),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(306, 911150289122399543)),
        ModelProperty(
            id: const IdUid(16, 3572954889694640449),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(357, 1770250886993691909),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(71, 111540169671743370),
      name: 'Frenos',
      lastPropertyId: const IdUid(16, 2179343323560761209),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8606077505997039808),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7612025267406553371),
            name: 'balatasDelanteras',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 237150343599318434),
            name: 'balatasDelanterasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2249394492417416893),
            name: 'balatasTraserasDiscoTambor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3166664666191090494),
            name: 'balatasTraserasDiscoTamborObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 406838970515822255),
            name: 'manguerasLineas',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1898752098293455102),
            name: 'manguerasLineasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5874668608103936528),
            name: 'cilindroMaestro',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6154261140377607033),
            name: 'cilindroMaestroObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3104039877479998052),
            name: 'birlosYTuercas',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8648978120146378054),
            name: 'birlosYTuercasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3659038920267373606),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5692491892694608755),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4686251601549853557),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(308, 7954708597295856759)),
        ModelProperty(
            id: const IdUid(16, 2179343323560761209),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(358, 3605606892129463176),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(73, 3609614765671064101),
      name: 'Motor',
      lastPropertyId: const IdUid(24, 6228579808324990306),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3378316707571434912),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 392262610981897710),
            name: 'aceite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8385911088565035072),
            name: 'aceiteObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8591389061362627185),
            name: 'cpoDeAceleracion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7148434606585059497),
            name: 'cpoDeAceleracionObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6235846545681265367),
            name: 'bujias',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7461868005591746992),
            name: 'bujiasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5130616632241858063),
            name: 'bandaCadenaDeTiempo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2028680134501150908),
            name: 'bandaCadenaDeTiempoObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 438771135047589049),
            name: 'soportes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7523751442063410605),
            name: 'soportesObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5048346201712343731),
            name: 'bandas',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6163186675891091559),
            name: 'bandasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1153696306003445686),
            name: 'mangueras',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2249414385226059275),
            name: 'manguerasObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 9072881332819282290),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 639812413296443104),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 6855194185502422996),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(317, 4499173726230872981)),
        ModelProperty(
            id: const IdUid(22, 6477881401001478570),
            name: 'filtroDeAire',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 2016822154535446518),
            name: 'filtroDeAireObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6228579808324990306),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(359, 3823747044694402973),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(74, 8182885394159286166),
      name: 'SuspensionDireccion',
      lastPropertyId: const IdUid(51, 6922946760873952614),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8816192752205185822),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5915720470869899953),
            name: 'rotulaSuperiorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7267995918292218964),
            name: 'rotulaSuperiorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9216901714370915133),
            name: 'rotulaSuperiorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6174938900235582323),
            name: 'rotulaSuperiorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7399528940602323142),
            name: 'rotulaInferiorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8067283106061788084),
            name: 'rotulaInferiorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 689901634706923966),
            name: 'rotulaInferiorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3403734889957091002),
            name: 'rotulaInferiorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3475926414246198157),
            name: 'bujeHorquillaSuperiorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1351704315098087135),
            name: 'bujeHorquillaSuperiorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3409339742082844834),
            name: 'bujeHorquillaSuperiorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1714627067698003951),
            name: 'bujeHorquillaSuperiorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8882616308481342819),
            name: 'bujeHorquillaInferiorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8981075485654037389),
            name: 'bujeHorquillaInferiorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4122732220353037990),
            name: 'bujeHorquillaInferiorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2728811241870841570),
            name: 'bujeHorquillaInferiorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7820075417804272261),
            name: 'amortiguadorDelanteroIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7970114796588337864),
            name: 'amortiguadorDelanteroIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 2749306330643444737),
            name: 'amortiguadorDelanteroDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 8607937809412422),
            name: 'amortiguadorDelanteroDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 9042560685937533101),
            name: 'amortiguadorTraseroIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 143223895900408298),
            name: 'amortiguadorTraseroIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 5494306436436646227),
            name: 'amortiguadorTraseroDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 4174386317734713449),
            name: 'amortiguadorTraseroDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 7559802069558347998),
            name: 'bujeBarraEstabilizadoraIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 759441433079310132),
            name: 'bujeBarraEstabilizadoraIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6940129557200722607),
            name: 'bujeBarraEstabilizadoraDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1580832237462881225),
            name: 'bujeBarraEstabilizadoraDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 9121755658058211878),
            name: 'linkKitDelanteroIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2084840029599708081),
            name: 'linkKitDelanteroIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 3282486932384088688),
            name: 'linkKitDelanteroDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 1438633415460386111),
            name: 'linkKitDelanteroDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 6899237661904916822),
            name: 'linkKitTraseroIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 5727857029759928970),
            name: 'linkKitTraseroIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 7871509143000216491),
            name: 'linkKitTraseroDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 621968723033748951),
            name: 'linkKitTraseroDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 6241926712891156122),
            name: 'terminalInteriorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 7853507940034261267),
            name: 'terminalInteriorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 734574511219299792),
            name: 'terminalInteriorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 443059315001386998),
            name: 'terminalInteriorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 4137525549701440244),
            name: 'terminalExteriorIzq',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 8987456970247917143),
            name: 'terminalExteriorIzqObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 8066717926158358997),
            name: 'terminalExteriorDer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 3588603006249227714),
            name: 'terminalExteriorDerObservaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 5423197799235748702),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 539200898874793609),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(320, 8517032296365500676)),
        ModelProperty(
            id: const IdUid(50, 2512232729201797121),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 6922946760873952614),
            name: 'revisionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(361, 4921891675391413447),
            relationTarget: 'Revision')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(76, 7992280240775612538),
      name: 'Producto',
      lastPropertyId: const IdUid(7, 6051791476480567790),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 633205492787897739),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8392913615014330985),
            name: 'producto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4499334555563066290),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 473540877700771468),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5285214767097775784),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 164142765578155626),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(324, 2276371521522702829)),
        ModelProperty(
            id: const IdUid(7, 6051791476480567790),
            name: 'servicioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(325, 3823128915946583116),
            relationTarget: 'Servicio')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(77, 2743501254910091798),
      name: 'Servicio',
      lastPropertyId: const IdUid(12, 8325763251011132126),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2259646061796668055),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2325151380291453067),
            name: 'servicio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3746890772857768643),
            name: 'costoServicio',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2822199496222054622),
            name: 'autorizado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7318790662708284409),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2099027275996410089),
            name: 'fechaEntrega',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3508794536146117736),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(326, 5777926947307451852)),
        ModelProperty(
            id: const IdUid(10, 2016605017757956177),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5828188708304762308),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8325763251011132126),
            name: 'ordenServicioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(347, 7705174580670337953),
            relationTarget: 'OrdenServicio')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'productos', srcEntity: 'Producto', srcField: ''),
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(78, 7969214193083467450),
      name: 'TipoProducto',
      lastPropertyId: const IdUid(5, 9090682104077850223),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3435239766130670289),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6101338124253117635),
            name: 'tipoProducto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5161982749825288098),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4362560124698977937),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9090682104077850223),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(328, 801619231935516592))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(79, 8431482435154692484),
      name: 'TipoServicio',
      lastPropertyId: const IdUid(7, 8897193515001642107),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1372329611842198773),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6639052366466886907),
            name: 'tipoServicio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1753824477111234699),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5952273703979672651),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6671325618153653554),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(329, 7387390563203056319)),
        ModelProperty(
            id: const IdUid(6, 8755928181593528194),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8897193515001642107),
            name: 'path',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(80, 8177890023282011956),
      name: 'Estatus',
      lastPropertyId: const IdUid(7, 2953742968786170798),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8414589768240169581),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 8885416856685155434),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8036328873746816342),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(335, 7247475376651258602)),
        ModelProperty(
            id: const IdUid(6, 8176290949278981940),
            name: 'avance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2953742968786170798),
            name: 'estatus',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'ordenTrabajo', srcEntity: 'OrdenTrabajo', srcField: ''),
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(81, 2641322679545348634),
      name: 'OrdenServicio',
      lastPropertyId: const IdUid(6, 5844943379902337314),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2656486150849867410),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7944503815991233540),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6524024833306945642),
            name: 'fechaEntrega',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9183866744924227174),
            name: 'costoTotal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 130372104415231116),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(343, 4196360993135839853)),
        ModelProperty(
            id: const IdUid(6, 5844943379902337314),
            name: 'ordenTrabajoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(344, 1815195187478967690),
            relationTarget: 'OrdenTrabajo')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'servicios', srcEntity: 'Servicio', srcField: ''),
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(82, 7390367631800539092),
      name: 'Revision',
      lastPropertyId: const IdUid(10, 1999877334393239664),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7177154962008707056),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3456054432801704327),
            name: 'completado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5630590910122487290),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2743153165281518501),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(348, 6919265969950515024)),
        ModelProperty(
            id: const IdUid(5, 3094640215326290163),
            name: 'ordenTrabajoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(349, 7553900630667516810),
            relationTarget: 'OrdenTrabajo'),
        ModelProperty(
            id: const IdUid(6, 5979108585375922629),
            name: 'suspensionDireccionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(350, 3433005883221835885),
            relationTarget: 'SuspensionDireccion'),
        ModelProperty(
            id: const IdUid(7, 4405027249150098759),
            name: 'motorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(351, 6490798697442199075),
            relationTarget: 'Motor'),
        ModelProperty(
            id: const IdUid(8, 7938494145439495975),
            name: 'fluidosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(352, 5170564838381844129),
            relationTarget: 'Fluidos'),
        ModelProperty(
            id: const IdUid(9, 3618585044190150185),
            name: 'frenosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(353, 2221883928487093256),
            relationTarget: 'Frenos'),
        ModelProperty(
            id: const IdUid(10, 1999877334393239664),
            name: 'electricoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(354, 7877422317358216693),
            relationTarget: 'Electrico')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'bitacora', srcEntity: 'Bitacora', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(82, 7390367631800539092),
      lastIndexId: const IdUid(361, 4921891675391413447),
      lastRelationId: const IdUid(87, 1176537328766838454),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1366246136666677579,
        6117759740444770997,
        2166617641346171935,
        3964965102569712035,
        3815886273064837669,
        2781408684735737577,
        2428686942234365602,
        1323666498433169999,
        2042416188864880761,
        1021087970446956343,
        4631117986834657050,
        3867794090434878240,
        859399381735454083,
        9001070558566127547,
        4156773254590137275,
        4450301343199944733,
        8904698342427392465,
        5712399432718906025,
        416402482060153165,
        5431167889155729582,
        3199858035416333747,
        6171792505504710034,
        7989753976020672504,
        7625539946193612618,
        6276906075580230896,
        6250629756136671550,
        5100626670541562876,
        6058346533219474088
      ],
      retiredIndexUids: const [
        8990521503430950587,
        1607831315029447998,
        2758117709587171439,
        7680390338130917281,
        7083281142493979324,
        3380866187592452154,
        898977627675318720,
        4860061050288630164,
        6477492978039659709,
        1884784676683692244,
        6230644741850799714,
        1222153075892218921,
        6456431794726392868,
        21923039932233953,
        8302583708064681419,
        1826338943965397138,
        2193715064152120120,
        4181153384410572043,
        76785533892443862,
        6725194506411062036,
        7912925179002849310,
        4669749725996081754,
        8481960757171179551,
        8868718449044949040,
        6694951196945837935,
        1067877610717947502,
        1990533507654861339,
        2290535798159386957,
        5140011308328673057,
        8062585399034389472,
        668466277065793709,
        360897725695503763,
        7003598226496598726,
        8154602671126157109,
        7569304066565191687,
        5035905392252920596,
        7510634053082529540,
        8309315416341765269,
        1728042511720879376,
        8396189901550464501,
        2386897909389581505,
        4608900919778481553,
        6162710869800712054,
        5632813823143218712,
        3039839111509637856,
        4999127753969735266,
        4208244129974519526,
        351407541415946384,
        8191067602968359312,
        6721811467857329542,
        8251082717356223611,
        2449024482161215302,
        4751856482932078104,
        9172016749357144224,
        9045688124770187728,
        4686570526947596743,
        2390143391685661460,
        4184900663065585925,
        5311167113567925142,
        7511884360991073275,
        4941615724051327288,
        3757107251813869820,
        1504702329259649475,
        915767699699149923,
        3660023615256333447,
        2602398023047257003,
        3185270439084282343,
        2068950816938160691,
        3859715238384420022,
        9136053496272878218,
        6237524852571718855,
        3046345138494460818,
        757620389220931349,
        6054000220007838196,
        8109192583242144861,
        3727619334081925690,
        9031244164717773135,
        5205191834236384758,
        4197992763805738004,
        6280604761802477456,
        6386641065826609180,
        6945808217463090366,
        7213593374400816024,
        3278468930080545812,
        3515742937905774685,
        4711016057441657243,
        6819357173724328820,
        7814733577456564055,
        8145611823764249187,
        6478200980709363370,
        7654248222638135302,
        5701493849060623154,
        7212478636626616580,
        2832474624750008637,
        3255239488718953367,
        1303728899213693580,
        2557270521250487094,
        5634261937595659822,
        1965550973427455088,
        8338339517316328460,
        4489600343659936888,
        4402712870398339367,
        8157857300952537532,
        6686263885413674781,
        8523822191732594212,
        69675433781937515,
        8811611690106049466,
        713793477301725008,
        6763248896344001454,
        3029635981322260859,
        530782811209096402,
        5375138088732281764,
        2457468952970496864,
        2893911726871456069,
        5916027695817265200,
        4481819197045105238,
        485661063447907108,
        8708498230408183714,
        3992374126221858894,
        1775900829394429954,
        2381769723952164502,
        7302368435975826295,
        2002401092371240826,
        2269028587050617485,
        6682874173406097296,
        2361876396703109126,
        3340382302793284993,
        7638733067445510244,
        8225671083316443571,
        7330226207696814681
      ],
      retiredPropertyUids: const [
        7079790605743243388,
        6172998306654734553,
        2574672497671950469,
        5347718656034637228,
        6273269044269879201,
        7911475855340885994,
        5829103266196707853,
        7515124161780938608,
        3991281244965765077,
        6017954821795207299,
        3980554204008347119,
        9086365290951858859,
        2452280981631945624,
        8341443670952491819,
        4551103649348469546,
        6909534581842096739,
        5386075232935579859,
        4364625688543508975,
        8474005816611301515,
        291034994140840826,
        7245017250220973753,
        552297950480807692,
        5889322915921969172,
        8304755835049178217,
        3462034544506880697,
        6915994077861086090,
        4932511096555161847,
        3662632218083065242,
        3180136282497114098,
        647799949869266031,
        3681945340148367110,
        2965121636634238955,
        2158551797062253471,
        6431279296723446945,
        176765185759695924,
        956997601706550466,
        3714019547848860305,
        4653993271322157592,
        7633603347667974425,
        3889022425921663783,
        3593890741921782419,
        4870033424336565884,
        6196634665502618124,
        702060131665322309,
        6834895970095104912,
        4298168455532229057,
        6494676936156636610,
        7984657088306364599,
        3469221558317808806,
        7657355535786071996,
        1460263094824080539,
        3348596078791966503,
        6686642139452024167,
        7280661973312265839,
        232832489478303902,
        7424242419126398301,
        4735971027860097783,
        7275271439444339569,
        5329076299621472283,
        4790639327797463942,
        4028495148250116114,
        7930195933533868005,
        7269234199457887678,
        3045954521590561959,
        4548731095880486014,
        3917990569343711155,
        804388285645815931,
        7240701117028268274,
        7020232340501817282,
        4082213459028815417,
        509412325826203117,
        9047558658118118651,
        1406568894842036273,
        8202387200314019143,
        6701648872907734361,
        7104768524590771840,
        7655032466536069673,
        1965574186271044849,
        1382509944249718626,
        8283328889428416807,
        3394511564896037854,
        8624158494612522146,
        5474615315576449195,
        5081084557109504408,
        174707286127388287,
        4444011821186412409,
        3952098520364674379,
        3879749783315811280,
        249851165958766302,
        7867123722378438362,
        891222057461627616,
        1618039077907563691,
        8586458724268756786,
        6140184920981313822,
        5626746320301529232,
        1758281922018199377,
        317028010342762687,
        6994977916160921655,
        6540004964666285680,
        4856817907692795203,
        3441574004683600331,
        2310204940504377436,
        8222154448043311087,
        7833602918531477435,
        6543222186554661806,
        7872004360843974627,
        7851399595546166337,
        5833972560963993700,
        6559411272338609235,
        5059986275729243897,
        4022221953004300558,
        6624197140138252342,
        9045113882157341306,
        8564976400204004342,
        5719240336153726962,
        1887404940434801966,
        5046680042193038920,
        3788539490390442542,
        5992135025932841446,
        6280052136229997375,
        3221284138384568926,
        8861650403401684419,
        8988217608763532952,
        4387081276626837570,
        6161823828674097276,
        6939545807929048684,
        1388327886429615646,
        3312783263241748230,
        782321710570789969,
        2948145743703110893,
        4090875136723971084,
        7992450668665361714,
        7899142688428235984,
        3895257262356450605,
        2584782002890659583,
        5582579692261011195,
        5028158787265648369,
        5407152779426357701,
        8462464237235982526,
        4309447383493916637,
        7521607225935953493,
        6944626713596755992,
        5691040412648373501,
        4570083749155237849,
        2012161149637737564,
        4111001027425517669,
        2235592658688426627,
        3514219219156834755,
        7900770007418559960,
        8727843019342851116,
        2246275948466157951,
        6828598007871134254,
        2210981706424940712,
        8149625297125514299,
        1774385922646110264,
        3611757609493769130,
        1550628132673256737,
        7401453084951799987,
        4168434124669331468,
        4273736957162077610,
        7661096811192140465,
        5032172720157635791,
        3640667548502545688,
        3227581588275626757,
        6169031405257917919,
        3603888931156625013,
        3770705136894608488,
        1431194771886016233,
        6126515006975107011,
        3911938135844163773,
        4915654780717530161,
        8381385900840453390,
        9041506210264243534,
        5688593427736897311,
        4321064732987742364,
        7181885270107922782,
        2009950526621565134,
        4207552670152335906,
        8160792045369167469,
        51738632601896353,
        5323371369283368342,
        6235156017683811675,
        4723303053259007258,
        1466612933068041934,
        7248362350774841303,
        2253290332606608104,
        3861064722112440270,
        5941389222733156371,
        5633075432279483197,
        4527500675980092790,
        9063014267953462768,
        8360434748618374218,
        7365870445831650995,
        3759249699517018075,
        6849128927415581526,
        8522845507667619183,
        5798532042156117000,
        3271066234268233916,
        5232955354127678356,
        5328095077095537181,
        6284051672797193414,
        6365319972112587915,
        6606890237353721944,
        5628367501338126181,
        1436917224247812157,
        2708316285260983524,
        7432480190168004450,
        2507416638338706911,
        6999119836743433970,
        8092664882881749647,
        7640856879689498744,
        2514991401100204571,
        4261138498742165746,
        1991668705024615469,
        7520457943588733683,
        2599133563664475584,
        7137124187474983956,
        2112559093449404088,
        5332627173857470047,
        7823032235829845864,
        5194084986301717278,
        5115364499969904783,
        6009308139323565775,
        6436825515766324219,
        8007102102988426437,
        1496705341694862790,
        6894534887589015141,
        4600259317593251919,
        5834614544621841095,
        8799259518463538181,
        449037016119055988,
        2419646048913111562,
        4721663583478119690,
        6765211601357784849,
        3393149240246558542,
        7472871579384853493,
        275024665070143236,
        2126016403256222143,
        1952396127837611647,
        6263613128532982614,
        7057232621627471855,
        1415385875565521100,
        7518146399129654640,
        7586360301405444917,
        6833710803124238256,
        8088892015231071856,
        3956724533417333522,
        3802715731545668143,
        8987696372421294752,
        8350117130262616151,
        3226014301147360143,
        1749816194949685889,
        7758743809194774648,
        1434391940339194549,
        4623941556925944192,
        9195889777899967802,
        2893504049285370318,
        5345396877052834205,
        1400701969453774196,
        5435904696509668912,
        1088034900596660184,
        6457036745520664238,
        329513595407028238,
        8604127764333477699,
        3921580369470275470,
        4505898125473094823,
        1754855625365573914,
        2688995114984003410,
        4567358900391945362,
        6845935698624323595,
        2773772202661284417,
        2001355623132513549,
        7664581841173068663,
        6160806538756599358,
        2551966599607042405,
        7293987934442232642,
        3172314971365956702,
        3554819703177446556,
        4594205475808180169,
        2628466040035596378,
        2797366167647637102,
        9187449762833663479,
        5330112956647391083,
        6268936666042370793,
        3609499592862844276,
        2161445370582181331,
        5352355597565608794,
        1489335028833638286,
        730995717057334540,
        788509268808624474,
        8197216700245087458,
        1058132069139629169,
        2446617551955001742,
        805717021218324759,
        7643887216735876476,
        9142089170751540909,
        1684532864788042377,
        8975130600421841117,
        7648666853331914628,
        4558674622852289053,
        2523510470982254727,
        5717982191828585500,
        6400590468977833336,
        4099773729934801460,
        4936784167570705480,
        4146278510371356915,
        8393564967718994929,
        750503135074981822,
        1451691398555027008,
        5402067026758483430,
        8419912223875279112,
        7523160709471259470,
        4987742386121890857,
        5093668385616053021,
        1992449025228530298,
        1159353226151624190,
        3471162061504283542,
        6571394880654245343,
        5402279733305696715,
        2791771992441857032,
        7512328834379262750,
        3838759675906565787,
        6577146346869035587,
        167975598346545172,
        3094524758543608718,
        7425711578863477823,
        1398624415618011183,
        5624992512158933426,
        4506279727422550847,
        4450405447758241168,
        2418703915789470072,
        1964545965879321706,
        3359767737465312075,
        1119031807460084459,
        6054280734454924450,
        4531064320013580940,
        8248520317372484827,
        5265993208408913698,
        6297297404552520338,
        1043127547320240698,
        4514912785627669612,
        8577618512929462620,
        388728847284978909,
        3965200016558188555,
        8614986762524892139,
        6710403503072460685,
        530608803701318774,
        7411525460197573173,
        8319252168650042041,
        6277362090783645144,
        3443423026800618837,
        9106146166091297461,
        5040892531881832164,
        6085897070753344619,
        6670748245644266493,
        3616607795938519256,
        3377021311219989159,
        2308969436247945089,
        1541820519869477454,
        712360340788966504,
        4970528658792456347,
        2787466043197643742,
        2331261162579149674,
        1532225114633300870,
        8729884026583326624,
        5951979229393608679,
        5162288244745793053,
        1314237784956713205,
        7041119885018323941,
        5431856584957283846,
        8889823374666441278,
        3148729869057314786,
        8791841775805765497,
        3821015968441469978,
        5222079827570678012,
        87293066711590796,
        8885131783820316498,
        3715155887157026250,
        8285343895130438747,
        429722851893671768,
        4261604311738999975,
        5026232333015543017,
        3636328042280877759,
        1498174391682013886,
        217979591081755395,
        4982602150232490228,
        8062410051394054856,
        8390754601530441060,
        533305253152089088,
        4175555395084776827,
        7468202760391464931,
        3325459040369815966
      ],
      retiredRelationUids: const [
        1226469011453769556,
        4334679211015697719,
        658993855133497141,
        7628231779967948088,
        7335578884425240534,
        8472678273863104956,
        7210017988446897791,
        1844994221846500557,
        9210369731160851167,
        844143373802489165,
        803629559452567645,
        3709026006801487301,
        5617872246173150113,
        795186633578779297,
        1265602403063460460,
        68666458468522626,
        6096914602419360853,
        5565418848143813218,
        3150796807169985253,
        4209805199751898594,
        7559880855013026980,
        2166414226903887086,
        134544593655180451,
        8898484037009311682,
        1285445577259759221,
        7439886465704814216,
        1737877595911700080
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Emprendimientos: EntityDefinition<Emprendimientos>(
        model: _entities[0],
        toOneRelations: (Emprendimientos object) => [
              object.emprendedor,
              object.usuario,
              object.prioridadEmp,
              object.catalogoProyecto,
              object.imagen
            ],
        toManyRelations: (Emprendimientos object) => {
              RelInfo<Emprendimientos>.toMany(5, object.id): object.jornadas,
              RelInfo<Emprendimientos>.toMany(8, object.id): object.bitacora,
              RelInfo<Emprendimientos>.toMany(13, object.id):
                  object.proveedores,
              RelInfo<Emprendimientos>.toMany(35, object.id): object.faseEmp,
              RelInfo<Ventas>.toOneBacklink(13, object.id,
                      (Ventas srcObject) => srcObject.emprendimiento):
                  object.ventas,
              RelInfo<ProductosEmp>.toOneBacklink(11, object.id,
                      (ProductosEmp srcObject) => srcObject.emprendimientos):
                  object.productosEmp,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                      (Consultorias srcObject) => srcObject.emprendimiento):
                  object.consultorias,
              RelInfo<Inversiones>.toOneBacklink(11, object.id,
                      (Inversiones srcObject) => srcObject.emprendimiento):
                  object.inversiones
            },
        getId: (Emprendimientos object) => object.id,
        setId: (Emprendimientos object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendimientos object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final faseActualOffset = fbb.writeString(object.faseActual);
          final faseAnteriorOffset = fbb.writeString(object.faseAnterior);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(34);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, descripcionOffset);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(12, object.emprendedor.targetId);
          fbb.addBool(15, object.activo);
          fbb.addBool(16, object.archivado);
          fbb.addOffset(18, idDBROffset);
          fbb.addInt64(23, object.usuario.targetId);
          fbb.addInt64(24, object.prioridadEmp.targetId);
          fbb.addInt64(26, object.catalogoProyecto.targetId);
          fbb.addInt64(27, object.idInversionJornada);
          fbb.addOffset(29, faseActualOffset);
          fbb.addOffset(30, faseAnteriorOffset);
          fbb.addOffset(31, idEmiWebOffset);
          fbb.addInt64(32, object.imagen.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendimientos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              faseActual: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 62, ''),
              faseAnterior: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 64, ''),
              idInversionJornada: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 58),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 34, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              archivado: const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 40),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 66));
          object.emprendedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.emprendedor.attach(store);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.usuario.attach(store);
          object.prioridadEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.prioridadEmp.attach(store);
          object.catalogoProyecto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          object.catalogoProyecto.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0);
          object.imagen.attach(store);
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Emprendimientos>.toMany(5, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Emprendimientos>.toMany(8, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Emprendimientos>.toMany(13, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.faseEmp,
              store,
              RelInfo<Emprendimientos>.toMany(35, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.ventas,
              store,
              RelInfo<Ventas>.toOneBacklink(13, object.id,
                  (Ventas srcObject) => srcObject.emprendimiento),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<ProductosEmp>.toOneBacklink(11, object.id,
                  (ProductosEmp srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                  (Consultorias srcObject) => srcObject.emprendimiento),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.inversiones,
              store,
              RelInfo<Inversiones>.toOneBacklink(11, object.id,
                  (Inversiones srcObject) => srcObject.emprendimiento),
              store.box<Emprendimientos>());
          return object;
        }),
    Usuarios: EntityDefinition<Usuarios>(
        model: _entities[1],
        toOneRelations: (Usuarios object) =>
            [object.rol, object.ordenTrabajo, object.asesor],
        toManyRelations: (Usuarios object) => {
              RelInfo<Usuarios>.toMany(30, object.id): object.bitacora,
              RelInfo<Usuarios>.toMany(62, object.id): object.pagos,
              RelInfo<Usuarios>.toMany(69, object.id): object.roles,
              RelInfo<Usuarios>.toMany(84, object.id): object.clientes,
              RelInfo<Usuarios>.toMany(85, object.id): object.tecnicosMecanicos,
              RelInfo<Usuarios>.toMany(86, object.id): object.ordenesTrabajo,
              RelInfo<Usuarios>.toMany(87, object.id): object.vehiculos,
              RelInfo<Emprendimientos>.toOneBacklink(24, object.id,
                      (Emprendimientos srcObject) => srcObject.usuario):
                  object.emprendimientos
            },
        getId: (Usuarios object) => object.id,
        setId: (Usuarios object, int id) {
          object.id = id;
        },
        objectToFB: (Usuarios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoPOffset = fbb.writeString(object.apellidoP);
          final apellidoMOffset = object.apellidoM == null
              ? null
              : fbb.writeString(object.apellidoM!);
          final telefonoOffset = object.telefono == null
              ? null
              : fbb.writeString(object.telefono!);
          final celularOffset = fbb.writeString(object.celular);
          final correoOffset = fbb.writeString(object.correo);
          final passwordOffset = fbb.writeString(object.password);
          final idDBROffset = fbb.writeString(object.idDBR);
          final rfcOffset = fbb.writeString(object.rfc);
          final imagenOffset =
              object.imagen == null ? null : fbb.writeString(object.imagen!);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final domicilioOffset = object.domicilio == null
              ? null
              : fbb.writeString(object.domicilio!);
          fbb.startTable(37);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoPOffset);
          fbb.addOffset(3, apellidoMOffset);
          fbb.addOffset(5, telefonoOffset);
          fbb.addOffset(6, celularOffset);
          fbb.addOffset(7, correoOffset);
          fbb.addOffset(8, passwordOffset);
          fbb.addInt64(11, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(15, idDBROffset);
          fbb.addInt64(23, object.rol.targetId);
          fbb.addOffset(28, rfcOffset);
          fbb.addOffset(29, imagenOffset);
          fbb.addOffset(30, pathOffset);
          fbb.addOffset(32, domicilioOffset);
          fbb.addInt64(33, object.ordenTrabajo.targetId);
          fbb.addInt64(35, object.asesor.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuarios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidoP: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              apellidoM: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              celular: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              rfc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 60, ''),
              domicilio: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68),
              correo:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              password: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              imagen: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 62),
              path: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 64),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''));
          object.rol.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.rol.attach(store);
          object.ordenTrabajo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 70, 0);
          object.ordenTrabajo.attach(store);
          object.asesor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 74, 0);
          object.asesor.attach(store);
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Usuarios>.toMany(30, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.pagos, store,
              RelInfo<Usuarios>.toMany(62, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.roles, store,
              RelInfo<Usuarios>.toMany(69, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.clientes, store,
              RelInfo<Usuarios>.toMany(84, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.tecnicosMecanicos, store,
              RelInfo<Usuarios>.toMany(85, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.ordenesTrabajo, store,
              RelInfo<Usuarios>.toMany(86, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(object.vehiculos, store,
              RelInfo<Usuarios>.toMany(87, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(24, object.id,
                  (Emprendimientos srcObject) => srcObject.usuario),
              store.box<Usuarios>());
          return object;
        }),
    Ventas: EntityDefinition<Ventas>(
        model: _entities[2],
        toOneRelations: (Ventas object) => [object.emprendimiento],
        toManyRelations: (Ventas object) => {
              RelInfo<Ventas>.toMany(37, object.id): object.prodVendidos,
              RelInfo<Ventas>.toMany(39, object.id): object.bitacora
            },
        getId: (Ventas object) => object.id,
        setId: (Ventas object, int id) {
          object.id = id;
        },
        objectToFB: (Ventas object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaInicio.millisecondsSinceEpoch);
          fbb.addInt64(2, object.fechaTermino.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.total);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(8, idDBROffset);
          fbb.addBool(9, object.archivado);
          fbb.addInt64(12, object.emprendimiento.targetId);
          fbb.addOffset(13, idEmiWebOffset);
          fbb.addInt64(14, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ventas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaInicio: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              fechaTermino: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              total:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.emprendimiento.attach(store);
          InternalToManyAccess.setRelInfo(object.prodVendidos, store,
              RelInfo<Ventas>.toMany(37, object.id), store.box<Ventas>());
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Ventas>.toMany(39, object.id), store.box<Ventas>());
          return object;
        }),
    Consultorias: EntityDefinition<Consultorias>(
        model: _entities[3],
        toOneRelations: (Consultorias object) => [
              object.emprendimiento,
              object.areaCirculo,
              object.ambitoConsultoria
            ],
        toManyRelations: (Consultorias object) => {
              RelInfo<Consultorias>.toMany(25, object.id): object.bitacora,
              RelInfo<Consultorias>.toMany(26, object.id): object.tareas
            },
        getId: (Consultorias object) => object.id,
        setId: (Consultorias object, int id) {
          object.id = id;
        },
        objectToFB: (Consultorias object, fb.Builder fbb) {
          final documentosOffset = object.documentos == null
              ? null
              : fbb.writeList(object.documentos!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, documentosOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(6, object.emprendimiento.targetId);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(11, object.areaCirculo.targetId);
          fbb.addInt64(12, object.ambitoConsultoria.targetId);
          fbb.addBool(14, object.archivado);
          fbb.addOffset(15, idEmiWebOffset);
          fbb.addInt64(16, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Consultorias(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              documentos: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 32, false),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.emprendimiento.attach(store);
          object.areaCirculo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.areaCirculo.attach(store);
          object.ambitoConsultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.ambitoConsultoria.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Consultorias>.toMany(25, object.id),
              store.box<Consultorias>());
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Consultorias>.toMany(26, object.id),
              store.box<Consultorias>());
          return object;
        }),
    Tareas: EntityDefinition<Tareas>(
        model: _entities[4],
        toOneRelations: (Tareas object) =>
            [object.jornada, object.consultoria, object.porcentaje],
        toManyRelations: (Tareas object) => {
              RelInfo<Tareas>.toMany(27, object.id): object.bitacora,
              RelInfo<Tareas>.toMany(36, object.id): object.imagenes
            },
        getId: (Tareas object) => object.id,
        setId: (Tareas object, int id) {
          object.id = id;
        },
        objectToFB: (Tareas object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final tareaOffset = fbb.writeString(object.tarea);
          final comentariosOffset = object.comentarios == null
              ? null
              : fbb.writeString(object.comentarios!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, descripcionOffset);
          fbb.addInt64(5, object.fechaRevision.millisecondsSinceEpoch);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(10, object.jornada.targetId);
          fbb.addInt64(11, object.consultoria.targetId);
          fbb.addOffset(14, idDBROffset);
          fbb.addOffset(16, tareaOffset);
          fbb.addInt64(19, object.porcentaje.targetId);
          fbb.addOffset(20, comentariosOffset);
          fbb.addOffset(21, idEmiWebOffset);
          fbb.addInt64(22, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tareas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tarea: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              comentarios: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 44),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32),
              idEmiWeb:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46),
              idEmprendimiento: const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0));
          object.jornada.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.jornada.attach(store);
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.consultoria.attach(store);
          object.porcentaje.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.porcentaje.attach(store);
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Tareas>.toMany(27, object.id), store.box<Tareas>());
          InternalToManyAccess.setRelInfo(object.imagenes, store,
              RelInfo<Tareas>.toMany(36, object.id), store.box<Tareas>());
          return object;
        }),
    Comunidades: EntityDefinition<Comunidades>(
        model: _entities[5],
        toOneRelations: (Comunidades object) => [object.municipios],
        toManyRelations: (Comunidades object) => {
              RelInfo<Emprendedores>.toOneBacklink(21, object.id,
                      (Emprendedores srcObject) => srcObject.comunidad):
                  object.emprendedores
            },
        getId: (Comunidades object) => object.id,
        setId: (Comunidades object, int id) {
          object.id = id;
        },
        objectToFB: (Comunidades object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.municipios.targetId);
          fbb.addOffset(6, idDBROffset);
          fbb.addBool(7, object.activo);
          fbb.addOffset(9, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Comunidades(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''));
          object.municipios.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.municipios.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toOneBacklink(21, object.id,
                  (Emprendedores srcObject) => srcObject.comunidad),
              store.box<Comunidades>());
          return object;
        }),
    Emprendedores: EntityDefinition<Emprendedores>(
        model: _entities[6],
        toOneRelations: (Emprendedores object) =>
            [object.emprendimiento, object.comunidad, object.imagen],
        toManyRelations: (Emprendedores object) =>
            {RelInfo<Emprendedores>.toMany(9, object.id): object.bitacora},
        getId: (Emprendedores object) => object.id,
        setId: (Emprendedores object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendedores object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final curpOffset = fbb.writeString(object.curp);
          final integrantesFamiliaOffset =
              fbb.writeString(object.integrantesFamilia);
          final telefonoOffset = object.telefono == null
              ? null
              : fbb.writeString(object.telefono!);
          final comentariosOffset = fbb.writeString(object.comentarios);
          final apellidosOffset = fbb.writeString(object.apellidos);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(4, object.nacimiento.millisecondsSinceEpoch);
          fbb.addOffset(5, curpOffset);
          fbb.addOffset(6, integrantesFamiliaOffset);
          fbb.addOffset(7, telefonoOffset);
          fbb.addOffset(8, comentariosOffset);
          fbb.addInt64(9, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(13, object.emprendimiento.targetId);
          fbb.addOffset(15, apellidosOffset);
          fbb.addOffset(17, idDBROffset);
          fbb.addInt64(20, object.comunidad.targetId);
          fbb.addOffset(21, idEmiWebOffset);
          fbb.addInt64(22, object.imagen.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendedores(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidos: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              nacimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              curp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              integrantesFamilia: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              comentarios: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              fechaRegistro:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 46));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.emprendimiento.attach(store);
          object.comunidad.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.comunidad.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.imagen.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Emprendedores>.toMany(9, object.id),
              store.box<Emprendedores>());
          return object;
        }),
    Estados: EntityDefinition<Estados>(
        model: _entities[7],
        toOneRelations: (Estados object) => [],
        toManyRelations: (Estados object) => {
              RelInfo<Municipios>.toOneBacklink(5, object.id,
                      (Municipios srcObject) => srcObject.estados):
                  object.municipios
            },
        getId: (Estados object) => object.id,
        setId: (Estados object, int id) {
          object.id = id;
        },
        objectToFB: (Estados object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(5, idDBROffset);
          fbb.addBool(6, object.activo);
          fbb.addOffset(8, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Estados(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));
          InternalToManyAccess.setRelInfo(
              object.municipios,
              store,
              RelInfo<Municipios>.toOneBacklink(
                  5, object.id, (Municipios srcObject) => srcObject.estados),
              store.box<Estados>());
          return object;
        }),
    Municipios: EntityDefinition<Municipios>(
        model: _entities[8],
        toOneRelations: (Municipios object) => [object.estados],
        toManyRelations: (Municipios object) => {
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                      (Comunidades srcObject) => srcObject.municipios):
                  object.comunidades
            },
        getId: (Municipios object) => object.id,
        setId: (Municipios object, int id) {
          object.id = id;
        },
        objectToFB: (Municipios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.estados.targetId);
          fbb.addOffset(6, idDBROffset);
          fbb.addBool(7, object.activo);
          fbb.addOffset(9, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Municipios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''));
          object.estados.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.estados.attach(store);
          InternalToManyAccess.setRelInfo(
              object.comunidades,
              store,
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                  (Comunidades srcObject) => srcObject.municipios),
              store.box<Municipios>());
          return object;
        }),
    Jornadas: EntityDefinition<Jornadas>(
        model: _entities[9],
        toOneRelations: (Jornadas object) =>
            [object.emprendimiento, object.tarea],
        toManyRelations: (Jornadas object) =>
            {RelInfo<Jornadas>.toMany(10, object.id): object.bitacora},
        getId: (Jornadas object) => object.id,
        setId: (Jornadas object, int id) {
          object.id = id;
        },
        objectToFB: (Jornadas object, fb.Builder fbb) {
          final numJornadaOffset = fbb.writeString(object.numJornada);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, numJornadaOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimiento.targetId);
          fbb.addInt64(6, object.tarea.targetId);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(11, object.fechaRevision.millisecondsSinceEpoch);
          fbb.addOffset(12, idEmiWebOffset);
          fbb.addBool(13, object.completada);
          fbb.addInt64(14, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Jornadas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              numJornada: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              completada: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 30, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimiento.attach(store);
          object.tarea.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tarea.attach(store);
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Jornadas>.toMany(10, object.id), store.box<Jornadas>());
          return object;
        }),
    Bitacora: EntityDefinition<Bitacora>(
        model: _entities[10],
        toOneRelations: (Bitacora object) => [
              object.cliente,
              object.vehiculo,
              object.ordenTrabajo,
              object.observacion,
              object.suspensionDireccion,
              object.motor,
              object.fluidos,
              object.frenos,
              object.electrico,
              object.servicio,
              object.producto,
              object.estatus,
              object.usuario,
              object.ordenServicio,
              object.revision
            ],
        toManyRelations: (Bitacora object) => {
              RelInfo<Emprendedores>.toManyBacklink(9, object.id):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toManyBacklink(8, object.id):
                  object.emprendimientos,
              RelInfo<Tareas>.toManyBacklink(27, object.id): object.tareas,
              RelInfo<Consultorias>.toManyBacklink(25, object.id):
                  object.consultorias,
              RelInfo<Usuarios>.toManyBacklink(30, object.id): object.usuarios,
              RelInfo<Jornadas>.toManyBacklink(10, object.id): object.jornadas,
              RelInfo<ProductosEmp>.toManyBacklink(22, object.id):
                  object.productosEmp,
              RelInfo<ProdCotizados>.toManyBacklink(49, object.id):
                  object.productosCot,
              RelInfo<Inversiones>.toManyBacklink(31, object.id):
                  object.inversiones,
              RelInfo<ProdSolicitado>.toManyBacklink(33, object.id):
                  object.prodSolicitados,
              RelInfo<Ventas>.toManyBacklink(39, object.id): object.ventas,
              RelInfo<ProdVendidos>.toManyBacklink(38, object.id):
                  object.prodVendidos,
              RelInfo<InversionesXProdCotizados>.toManyBacklink(59, object.id):
                  object.inversionXprodCotizados,
              RelInfo<Pagos>.toManyBacklink(61, object.id): object.pagos,
              RelInfo<Imagenes>.toManyBacklink(74, object.id): object.imagenes
            },
        getId: (Bitacora object) => object.id,
        setId: (Bitacora object, int id) {
          object.id = id;
        },
        objectToFB: (Bitacora object, fb.Builder fbb) {
          final instruccionAdicionalOffset = object.instruccionAdicional == null
              ? null
              : fbb.writeString(object.instruccionAdicional!);
          final instruccionOffset = fbb.writeString(object.instruccion);
          final usuarioPropietarioOffset =
              fbb.writeString(object.usuarioPropietario);
          fbb.startTable(41);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(12, instruccionAdicionalOffset);
          fbb.addOffset(14, instruccionOffset);
          fbb.addInt64(19, object.cliente.targetId);
          fbb.addInt64(20, object.vehiculo.targetId);
          fbb.addInt64(21, object.ordenTrabajo.targetId);
          fbb.addInt64(22, object.observacion.targetId);
          fbb.addInt64(24, object.suspensionDireccion.targetId);
          fbb.addInt64(25, object.motor.targetId);
          fbb.addInt64(26, object.fluidos.targetId);
          fbb.addInt64(27, object.frenos.targetId);
          fbb.addInt64(28, object.electrico.targetId);
          fbb.addInt64(29, object.servicio.targetId);
          fbb.addInt64(30, object.producto.targetId);
          fbb.addInt64(32, object.estatus.targetId);
          fbb.addOffset(34, usuarioPropietarioOffset);
          fbb.addInt64(35, object.idOrdenTrabajo);
          fbb.addInt64(36, object.usuario.targetId);
          fbb.addBool(37, object.executeSupabase);
          fbb.addInt64(38, object.ordenServicio.targetId);
          fbb.addInt64(39, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bitacora(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              usuarioPropietario: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 72, ''),
              instruccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              instruccionAdicional:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 28),
              idOrdenTrabajo:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 74, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              executeSupabase: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 78, false));
          object.cliente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.cliente.attach(store);
          object.vehiculo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.vehiculo.attach(store);
          object.ordenTrabajo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.ordenTrabajo.attach(store);
          object.observacion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.observacion.attach(store);
          object.suspensionDireccion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.suspensionDireccion.attach(store);
          object.motor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          object.motor.attach(store);
          object.fluidos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          object.fluidos.attach(store);
          object.frenos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
          object.frenos.attach(store);
          object.electrico.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
          object.electrico.attach(store);
          object.servicio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0);
          object.servicio.attach(store);
          object.producto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0);
          object.producto.attach(store);
          object.estatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 68, 0);
          object.estatus.attach(store);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 76, 0);
          object.usuario.attach(store);
          object.ordenServicio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 80, 0);
          object.ordenServicio.attach(store);
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 82, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toManyBacklink(9, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toManyBacklink(8, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toManyBacklink(27, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toManyBacklink(25, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Usuarios>.toManyBacklink(30, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Jornadas>.toManyBacklink(10, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<ProductosEmp>.toManyBacklink(22, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.productosCot,
              store,
              RelInfo<ProdCotizados>.toManyBacklink(49, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.inversiones,
              store,
              RelInfo<Inversiones>.toManyBacklink(31, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.prodSolicitados,
              store,
              RelInfo<ProdSolicitado>.toManyBacklink(33, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.ventas,
              store,
              RelInfo<Ventas>.toManyBacklink(39, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.prodVendidos,
              store,
              RelInfo<ProdVendidos>.toManyBacklink(38, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.inversionXprodCotizados,
              store,
              RelInfo<InversionesXProdCotizados>.toManyBacklink(59, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.pagos,
              store,
              RelInfo<Pagos>.toManyBacklink(61, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.imagenes,
              store,
              RelInfo<Imagenes>.toManyBacklink(74, object.id),
              store.box<Bitacora>());
          return object;
        }),
    AmbitoConsultoria: EntityDefinition<AmbitoConsultoria>(
        model: _entities[11],
        toOneRelations: (AmbitoConsultoria object) => [object.bitacora],
        toManyRelations: (AmbitoConsultoria object) => {
              RelInfo<AmbitoConsultoria>.toMany(11, object.id):
                  object.consultorias
            },
        getId: (AmbitoConsultoria object) => object.id,
        setId: (AmbitoConsultoria object, int id) {
          object.id = id;
        },
        objectToFB: (AmbitoConsultoria object, fb.Builder fbb) {
          final nombreAmbitoOffset = fbb.writeString(object.nombreAmbito);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreAmbitoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(6, object.bitacora.targetId);
          fbb.addOffset(7, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AmbitoConsultoria(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreAmbito: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''));
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.bitacora.attach(store);
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<AmbitoConsultoria>.toMany(11, object.id),
              store.box<AmbitoConsultoria>());
          return object;
        }),
    AreaCirculo: EntityDefinition<AreaCirculo>(
        model: _entities[12],
        toOneRelations: (AreaCirculo object) =>
            [object.consultoria, object.bitacora],
        toManyRelations: (AreaCirculo object) => {},
        getId: (AreaCirculo object) => object.id,
        setId: (AreaCirculo object, int id) {
          object.id = id;
        },
        objectToFB: (AreaCirculo object, fb.Builder fbb) {
          final nombreAreaOffset = fbb.writeString(object.nombreArea);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreAreaOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.consultoria.targetId);
          fbb.addInt64(7, object.bitacora.targetId);
          fbb.addOffset(8, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AreaCirculo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreArea: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.consultoria.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.bitacora.attach(store);
          return object;
        }),
    Bancos: EntityDefinition<Bancos>(
        model: _entities[13],
        toOneRelations: (Bancos object) => [],
        toManyRelations: (Bancos object) => {
              RelInfo<Proveedores>.toOneBacklink(15, object.id,
                      (Proveedores srcObject) => srcObject.banco):
                  object.proveedores
            },
        getId: (Bancos object) => object.id,
        setId: (Bancos object, int id) {
          object.id = id;
        },
        objectToFB: (Bancos object, fb.Builder fbb) {
          final bancoOffset = fbb.writeString(object.banco);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bancoOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bancos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              banco: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Proveedores>.toOneBacklink(
                  15, object.id, (Proveedores srcObject) => srcObject.banco),
              store.box<Bancos>());
          return object;
        }),
    CondicionesPago: EntityDefinition<CondicionesPago>(
        model: _entities[14],
        toOneRelations: (CondicionesPago object) => [],
        toManyRelations: (CondicionesPago object) => {
              RelInfo<Proveedores>.toOneBacklink(14, object.id,
                      (Proveedores srcObject) => srcObject.condicionPago):
                  object.proveedores
            },
        getId: (CondicionesPago object) => object.id,
        setId: (CondicionesPago object, int id) {
          object.id = id;
        },
        objectToFB: (CondicionesPago object, fb.Builder fbb) {
          final condicionOffset = fbb.writeString(object.condicion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, condicionOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CondicionesPago(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              condicion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Proveedores>.toOneBacklink(14, object.id,
                  (Proveedores srcObject) => srcObject.condicionPago),
              store.box<CondicionesPago>());
          return object;
        }),
    FasesEmp: EntityDefinition<FasesEmp>(
        model: _entities[15],
        toOneRelations: (FasesEmp object) => [],
        toManyRelations: (FasesEmp object) =>
            {RelInfo<FasesEmp>.toMany(14, object.id): object.emprendimientos},
        getId: (FasesEmp object) => object.id,
        setId: (FasesEmp object, int id) {
          object.id = id;
        },
        objectToFB: (FasesEmp object, fb.Builder fbb) {
          final faseOffset = fbb.writeString(object.fase);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, faseOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FasesEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fase: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(object.emprendimientos, store,
              RelInfo<FasesEmp>.toMany(14, object.id), store.box<FasesEmp>());
          return object;
        }),
    PrioridadEmp: EntityDefinition<PrioridadEmp>(
        model: _entities[16],
        toOneRelations: (PrioridadEmp object) => [],
        toManyRelations: (PrioridadEmp object) => {
              RelInfo<PrioridadEmp>.toMany(16, object.id):
                  object.emprendimientos
            },
        getId: (PrioridadEmp object) => object.id,
        setId: (PrioridadEmp object, int id) {
          object.id = id;
        },
        objectToFB: (PrioridadEmp object, fb.Builder fbb) {
          final prioridadOffset = fbb.writeString(object.prioridad);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, prioridadOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PrioridadEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              prioridad: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<PrioridadEmp>.toMany(16, object.id),
              store.box<PrioridadEmp>());
          return object;
        }),
    Proveedores: EntityDefinition<Proveedores>(
        model: _entities[17],
        toOneRelations: (Proveedores object) => [
              object.tipoProveedor,
              object.comunidades,
              object.condicionPago,
              object.banco
            ],
        toManyRelations: (Proveedores object) =>
            {RelInfo<Proveedores>.toMany(54, object.id): object.productosProv},
        getId: (Proveedores object) => object.id,
        setId: (Proveedores object, int id) {
          object.id = id;
        },
        objectToFB: (Proveedores object, fb.Builder fbb) {
          final nombreFiscalOffset = fbb.writeString(object.nombreFiscal);
          final rfcOffset = fbb.writeString(object.rfc);
          final direccionOffset = fbb.writeString(object.direccion);
          final nombreEncargadoOffset = object.nombreEncargado == null
              ? null
              : fbb.writeString(object.nombreEncargado!);
          final clabeOffset = fbb.writeString(object.clabe);
          final telefonoOffset = fbb.writeString(object.telefono);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreFiscalOffset);
          fbb.addOffset(2, rfcOffset);
          fbb.addOffset(3, direccionOffset);
          fbb.addOffset(4, nombreEncargadoOffset);
          fbb.addOffset(5, clabeOffset);
          fbb.addOffset(6, telefonoOffset);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(9, object.archivado);
          fbb.addOffset(10, idDBROffset);
          fbb.addInt64(11, object.tipoProveedor.targetId);
          fbb.addInt64(12, object.comunidades.targetId);
          fbb.addInt64(13, object.condicionPago.targetId);
          fbb.addInt64(14, object.banco.targetId);
          fbb.addOffset(16, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Proveedores(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreFiscal: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              rfc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              direccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nombreEncargado: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              clabe: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              archivado: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24));
          object.tipoProveedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.tipoProveedor.attach(store);
          object.comunidades.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.comunidades.attach(store);
          object.condicionPago.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.condicionPago.attach(store);
          object.banco.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.banco.attach(store);
          InternalToManyAccess.setRelInfo(
              object.productosProv,
              store,
              RelInfo<Proveedores>.toMany(54, object.id),
              store.box<Proveedores>());
          return object;
        }),
    Roles: EntityDefinition<Roles>(
        model: _entities[18],
        toOneRelations: (Roles object) => [object.bitacora],
        toManyRelations: (Roles object) =>
            {RelInfo<Roles>.toMany(17, object.id): object.usuarios},
        getId: (Roles object) => object.id,
        setId: (Roles object, int id) {
          object.id = id;
        },
        objectToFB: (Roles object, fb.Builder fbb) {
          final rolOffset = fbb.writeString(object.rol);
          final idDBROffset = fbb.writeString(object.idDBR);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rolOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(5, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Roles(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              rol: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.bitacora.attach(store);
          InternalToManyAccess.setRelInfo(object.usuarios, store,
              RelInfo<Roles>.toMany(17, object.id), store.box<Roles>());
          return object;
        }),
    TipoProveedor: EntityDefinition<TipoProveedor>(
        model: _entities[19],
        toOneRelations: (TipoProveedor object) => [],
        toManyRelations: (TipoProveedor object) =>
            {RelInfo<TipoProveedor>.toMany(55, object.id): object.proveedores},
        getId: (TipoProveedor object) => object.id,
        setId: (TipoProveedor object, int id) {
          object.id = id;
        },
        objectToFB: (TipoProveedor object, fb.Builder fbb) {
          final tipoOffset = fbb.writeString(object.tipo);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoProveedor(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<TipoProveedor>.toMany(55, object.id),
              store.box<TipoProveedor>());
          return object;
        }),
    ProductosEmp: EntityDefinition<ProductosEmp>(
        model: _entities[20],
        toOneRelations: (ProductosEmp object) =>
            [object.emprendimientos, object.unidadMedida, object.imagen],
        toManyRelations: (ProductosEmp object) => {
              RelInfo<ProductosEmp>.toMany(22, object.id): object.bitacora,
              RelInfo<ProdVendidos>.toOneBacklink(9, object.id,
                      (ProdVendidos srcObject) => srcObject.productoEmp):
                  object.vendidos
            },
        getId: (ProductosEmp object) => object.id,
        setId: (ProductosEmp object, int id) {
          object.id = id;
        },
        objectToFB: (ProductosEmp object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, descripcionOffset);
          fbb.addFloat64(4, object.costo);
          fbb.addInt64(6, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(7, object.archivado);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(10, object.emprendimientos.targetId);
          fbb.addInt64(12, object.unidadMedida.targetId);
          fbb.addOffset(15, idEmiWebOffset);
          fbb.addInt64(16, object.imagen.targetId);
          fbb.addInt64(17, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductosEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.emprendimientos.attach(store);
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.unidadMedida.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.imagen.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProductosEmp>.toMany(22, object.id),
              store.box<ProductosEmp>());
          InternalToManyAccess.setRelInfo(
              object.vendidos,
              store,
              RelInfo<ProdVendidos>.toOneBacklink(9, object.id,
                  (ProdVendidos srcObject) => srcObject.productoEmp),
              store.box<ProductosEmp>());
          return object;
        }),
    CatalogoProyecto: EntityDefinition<CatalogoProyecto>(
        model: _entities[21],
        toOneRelations: (CatalogoProyecto object) => [object.tipoProyecto],
        toManyRelations: (CatalogoProyecto object) => {
              RelInfo<CatalogoProyecto>.toMany(20, object.id):
                  object.emprendimientos,
              RelInfo<CatalogoProyecto>.toMany(70, object.id):
                  object.prodProyecto
            },
        getId: (CatalogoProyecto object) => object.id,
        setId: (CatalogoProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (CatalogoProyecto object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(6, object.tipoProyecto.targetId);
          fbb.addBool(7, object.activo);
          fbb.addOffset(8, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CatalogoProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));
          object.tipoProyecto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tipoProyecto.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<CatalogoProyecto>.toMany(20, object.id),
              store.box<CatalogoProyecto>());
          InternalToManyAccess.setRelInfo(
              object.prodProyecto,
              store,
              RelInfo<CatalogoProyecto>.toMany(70, object.id),
              store.box<CatalogoProyecto>());
          return object;
        }),
    UnidadMedida: EntityDefinition<UnidadMedida>(
        model: _entities[22],
        toOneRelations: (UnidadMedida object) => [],
        toManyRelations: (UnidadMedida object) => {
              RelInfo<UnidadMedida>.toMany(23, object.id): object.productosEmp,
              RelInfo<UnidadMedida>.toMany(45, object.id):
                  object.prodSolicitados,
              RelInfo<UnidadMedida>.toMany(80, object.id): object.productosProv,
              RelInfo<UnidadMedida>.toMany(82, object.id): object.prodVendidos
            },
        getId: (UnidadMedida object) => object.id,
        setId: (UnidadMedida object, int id) {
          object.id = id;
        },
        objectToFB: (UnidadMedida object, fb.Builder fbb) {
          final unidadMedidaOffset = fbb.writeString(object.unidadMedida);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, unidadMedidaOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(6, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UnidadMedida(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              unidadMedida: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<UnidadMedida>.toMany(23, object.id),
              store.box<UnidadMedida>());
          InternalToManyAccess.setRelInfo(
              object.prodSolicitados,
              store,
              RelInfo<UnidadMedida>.toMany(45, object.id),
              store.box<UnidadMedida>());
          InternalToManyAccess.setRelInfo(
              object.productosProv,
              store,
              RelInfo<UnidadMedida>.toMany(80, object.id),
              store.box<UnidadMedida>());
          InternalToManyAccess.setRelInfo(
              object.prodVendidos,
              store,
              RelInfo<UnidadMedida>.toMany(82, object.id),
              store.box<UnidadMedida>());
          return object;
        }),
    Imagenes: EntityDefinition<Imagenes>(
        model: _entities[23],
        toOneRelations: (Imagenes object) => [
              object.emprendedor,
              object.emprendimiento,
              object.tarea,
              object.productosEmp,
              object.inversion,
              object.productosProv
            ],
        toManyRelations: (Imagenes object) => {
              RelInfo<Imagenes>.toMany(46, object.id): object.prodSolicitados,
              RelInfo<Imagenes>.toMany(67, object.id): object.prodProyecto,
              RelInfo<Imagenes>.toMany(74, object.id): object.bitacora
            },
        getId: (Imagenes object) => object.id,
        setId: (Imagenes object, int id) {
          object.id = id;
        },
        objectToFB: (Imagenes object, fb.Builder fbb) {
          final imagenesOffset = fbb.writeString(object.imagenes);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          final nombreOffset =
              object.nombre == null ? null : fbb.writeString(object.nombre!);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final base64Offset =
              object.base64 == null ? null : fbb.writeString(object.base64!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, imagenesOffset);
          fbb.addOffset(4, idEmiWebOffset);
          fbb.addOffset(5, nombreOffset);
          fbb.addOffset(6, pathOffset);
          fbb.addOffset(7, base64Offset);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(11, object.emprendedor.targetId);
          fbb.addInt64(12, object.emprendimiento.targetId);
          fbb.addInt64(13, object.tarea.targetId);
          fbb.addInt64(14, object.productosEmp.targetId);
          fbb.addInt64(16, object.inversion.targetId);
          fbb.addInt64(17, object.productosProv.targetId);
          fbb.addInt64(18, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Imagenes(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagenes: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              base64: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmprendimiento: const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          object.emprendedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.emprendedor.attach(store);
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.emprendimiento.attach(store);
          object.tarea.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.tarea.attach(store);
          object.productosEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.productosEmp.attach(store);
          object.inversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.inversion.attach(store);
          object.productosProv.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          object.productosProv.attach(store);
          InternalToManyAccess.setRelInfo(object.prodSolicitados, store,
              RelInfo<Imagenes>.toMany(46, object.id), store.box<Imagenes>());
          InternalToManyAccess.setRelInfo(object.prodProyecto, store,
              RelInfo<Imagenes>.toMany(67, object.id), store.box<Imagenes>());
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Imagenes>.toMany(74, object.id), store.box<Imagenes>());
          return object;
        }),
    Inversiones: EntityDefinition<Inversiones>(
        model: _entities[24],
        toOneRelations: (Inversiones object) => [
              object.emprendimiento,
              object.estadoInversion,
              object.imagenFirmaRecibido,
              object.imagenProductoEntregado
            ],
        toManyRelations: (Inversiones object) => {
              RelInfo<Inversiones>.toMany(31, object.id): object.bitacora,
              RelInfo<Inversiones>.toMany(47, object.id):
                  object.prodSolicitados,
              RelInfo<Inversiones>.toMany(57, object.id):
                  object.inversionXprodCotizados,
              RelInfo<Inversiones>.toMany(60, object.id): object.pagos
            },
        getId: (Inversiones object) => object.id,
        setId: (Inversiones object, int id) {
          object.id = id;
        },
        objectToFB: (Inversiones object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaCompra?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.porcentajePago);
          fbb.addFloat64(3, object.montoPagar);
          fbb.addFloat64(4, object.saldo);
          fbb.addFloat64(5, object.totalInversion);
          fbb.addBool(6, object.inversionRecibida);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(10, object.emprendimiento.targetId);
          fbb.addInt64(12, object.estadoInversion.targetId);
          fbb.addBool(14, object.jornada3);
          fbb.addOffset(15, idEmiWebOffset);
          fbb.addInt64(16, object.imagenFirmaRecibido.targetId);
          fbb.addInt64(17, object.imagenProductoEntregado.targetId);
          fbb.addInt64(18, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fechaCompraValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = Inversiones(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaCompra: fechaCompraValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(fechaCompraValue),
              porcentajePago:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              montoPagar:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              saldo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              totalInversion:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              inversionRecibida: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              jornada3: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 32, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.emprendimiento.attach(store);
          object.estadoInversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.estadoInversion.attach(store);
          object.imagenFirmaRecibido.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.imagenFirmaRecibido.attach(store);
          object.imagenProductoEntregado.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          object.imagenProductoEntregado.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Inversiones>.toMany(31, object.id),
              store.box<Inversiones>());
          InternalToManyAccess.setRelInfo(
              object.prodSolicitados,
              store,
              RelInfo<Inversiones>.toMany(47, object.id),
              store.box<Inversiones>());
          InternalToManyAccess.setRelInfo(
              object.inversionXprodCotizados,
              store,
              RelInfo<Inversiones>.toMany(57, object.id),
              store.box<Inversiones>());
          InternalToManyAccess.setRelInfo(
              object.pagos,
              store,
              RelInfo<Inversiones>.toMany(60, object.id),
              store.box<Inversiones>());
          return object;
        }),
    ProdSolicitado: EntityDefinition<ProdSolicitado>(
        model: _entities[25],
        toOneRelations: (ProdSolicitado object) => [
              object.unidadMedida,
              object.tipoEmpaques,
              object.imagen,
              object.inversion,
              object.familiaInversion
            ],
        toManyRelations: (ProdSolicitado object) =>
            {RelInfo<ProdSolicitado>.toMany(33, object.id): object.bitacora},
        getId: (ProdSolicitado object) => object.id,
        setId: (ProdSolicitado object, int id) {
          object.id = id;
        },
        objectToFB: (ProdSolicitado object, fb.Builder fbb) {
          final productoOffset = fbb.writeString(object.producto);
          final marcaSugeridaOffset = object.marcaSugerida == null
              ? null
              : fbb.writeString(object.marcaSugerida!);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final proveedorSugeridoOffset = object.proveedorSugerido == null
              ? null
              : fbb.writeString(object.proveedorSugerido!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idInversion);
          fbb.addOffset(2, productoOffset);
          fbb.addOffset(3, marcaSugeridaOffset);
          fbb.addOffset(4, descripcionOffset);
          fbb.addOffset(5, proveedorSugeridoOffset);
          fbb.addInt64(6, object.cantidad);
          fbb.addFloat64(7, object.costoEstimado);
          fbb.addInt64(8, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(13, object.unidadMedida.targetId);
          fbb.addInt64(14, object.tipoEmpaques.targetId);
          fbb.addInt64(15, object.imagen.targetId);
          fbb.addInt64(16, object.inversion.targetId);
          fbb.addOffset(17, idEmiWebOffset);
          fbb.addInt64(18, object.idEmprendimiento);
          fbb.addInt64(19, object.familiaInversion.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdSolicitado(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idInversion:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              producto: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              marcaSugerida: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              proveedorSugerido: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              costoEstimado: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              fechaRegistro:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38),
              idEmprendimiento: const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.unidadMedida.attach(store);
          object.tipoEmpaques.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.tipoEmpaques.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.imagen.attach(store);
          object.inversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.inversion.attach(store);
          object.familiaInversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.familiaInversion.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProdSolicitado>.toMany(33, object.id),
              store.box<ProdSolicitado>());
          return object;
        }),
    ProdVendidos: EntityDefinition<ProdVendidos>(
        model: _entities[26],
        toOneRelations: (ProdVendidos object) =>
            [object.productoEmp, object.venta, object.unidadMedida],
        toManyRelations: (ProdVendidos object) =>
            {RelInfo<ProdVendidos>.toMany(38, object.id): object.bitacora},
        getId: (ProdVendidos object) => object.id,
        setId: (ProdVendidos object, int id) {
          object.id = id;
        },
        objectToFB: (ProdVendidos object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          final nombreProdOffset = fbb.writeString(object.nombreProd);
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.cantVendida);
          fbb.addFloat64(2, object.subtotal);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(8, object.productoEmp.targetId);
          fbb.addFloat64(9, object.precioVenta);
          fbb.addInt64(10, object.venta.targetId);
          fbb.addOffset(11, idEmiWebOffset);
          fbb.addOffset(12, nombreProdOffset);
          fbb.addOffset(13, descripcionOffset);
          fbb.addFloat64(14, object.costo);
          fbb.addInt64(15, object.unidadMedida.targetId);
          fbb.addBool(17, object.postEmiWeb);
          fbb.addInt64(18, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdVendidos(
              nombreProd: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cantVendida:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              subtotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              precioVenta:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              postEmiWeb: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 38, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              idEmprendimiento: const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          object.productoEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.productoEmp.attach(store);
          object.venta.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.venta.attach(store);
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.unidadMedida.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProdVendidos>.toMany(38, object.id),
              store.box<ProdVendidos>());
          return object;
        }),
    EstadoInversion: EntityDefinition<EstadoInversion>(
        model: _entities[27],
        toOneRelations: (EstadoInversion object) => [],
        toManyRelations: (EstadoInversion object) => {
              RelInfo<EstadoInversion>.toMany(40, object.id):
                  object.emprendimientos
            },
        getId: (EstadoInversion object) => object.id,
        setId: (EstadoInversion object, int id) {
          object.id = id;
        },
        objectToFB: (EstadoInversion object, fb.Builder fbb) {
          final estadoOffset = fbb.writeString(object.estado);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, estadoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EstadoInversion(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              estado: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<EstadoInversion>.toMany(40, object.id),
              store.box<EstadoInversion>());
          return object;
        }),
    TipoEmpaques: EntityDefinition<TipoEmpaques>(
        model: _entities[28],
        toOneRelations: (TipoEmpaques object) => [],
        toManyRelations: (TipoEmpaques object) => {
              RelInfo<TipoEmpaques>.toMany(44, object.id):
                  object.prodSolicitados,
              RelInfo<TipoEmpaques>.toMany(79, object.id):
                  object.productosProyecto
            },
        getId: (TipoEmpaques object) => object.id,
        setId: (TipoEmpaques object, int id) {
          object.id = id;
        },
        objectToFB: (TipoEmpaques object, fb.Builder fbb) {
          final tipoOffset = fbb.writeString(object.tipo);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(6, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoEmpaques(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));
          InternalToManyAccess.setRelInfo(
              object.prodSolicitados,
              store,
              RelInfo<TipoEmpaques>.toMany(44, object.id),
              store.box<TipoEmpaques>());
          InternalToManyAccess.setRelInfo(
              object.productosProyecto,
              store,
              RelInfo<TipoEmpaques>.toMany(79, object.id),
              store.box<TipoEmpaques>());
          return object;
        }),
    ProdCotizados: EntityDefinition<ProdCotizados>(
        model: _entities[29],
        toOneRelations: (ProdCotizados object) =>
            [object.productosProv, object.inversionXprodCotizados],
        toManyRelations: (ProdCotizados object) =>
            {RelInfo<ProdCotizados>.toMany(49, object.id): object.bitacora},
        getId: (ProdCotizados object) => object.id,
        setId: (ProdCotizados object, int id) {
          object.id = id;
        },
        objectToFB: (ProdCotizados object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.cantidad);
          fbb.addInt64(5, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(6, idDBROffset);
          fbb.addFloat64(10, object.costoTotal);
          fbb.addInt64(12, object.productosProv.targetId);
          fbb.addInt64(13, object.inversionXprodCotizados.targetId);
          fbb.addBool(14, object.aceptado);
          fbb.addOffset(15, idEmiWebOffset);
          fbb.addFloat64(16, object.costoUnitario);
          fbb.addInt64(17, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdCotizados(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              aceptado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 32, false),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              costoTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0),
              costoUnitario:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0));
          object.productosProv.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.productosProv.attach(store);
          object.inversionXprodCotizados.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.inversionXprodCotizados.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProdCotizados>.toMany(49, object.id),
              store.box<ProdCotizados>());
          return object;
        }),
    ProductosProv: EntityDefinition<ProductosProv>(
        model: _entities[30],
        toOneRelations: (ProductosProv object) =>
            [object.proveedor, object.imagen, object.unidadMedida],
        toManyRelations: (ProductosProv object) => {
              RelInfo<ProductosProv>.toMany(53, object.id): object.prodCotizados
            },
        getId: (ProductosProv object) => object.id,
        setId: (ProductosProv object, int id) {
          object.id = id;
        },
        objectToFB: (ProductosProv object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final marcaOffset = fbb.writeString(object.marca);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, marcaOffset);
          fbb.addFloat64(4, object.costo);
          fbb.addInt64(5, object.tiempoEntrega);
          fbb.addInt64(6, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(7, object.archivado);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(10, object.proveedor.targetId);
          fbb.addInt64(12, object.imagen.targetId);
          fbb.addOffset(14, idEmiWebOffset);
          fbb.addInt64(16, object.unidadMedida.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductosProv(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              marca: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              tiempoEntrega:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''));
          object.proveedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.proveedor.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.imagen.attach(store);
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.unidadMedida.attach(store);
          InternalToManyAccess.setRelInfo(
              object.prodCotizados,
              store,
              RelInfo<ProductosProv>.toMany(53, object.id),
              store.box<ProductosProv>());
          return object;
        }),
    InversionesXProdCotizados: EntityDefinition<InversionesXProdCotizados>(
        model: _entities[31],
        toOneRelations: (InversionesXProdCotizados object) =>
            [object.inversion],
        toManyRelations: (InversionesXProdCotizados object) => {
              RelInfo<InversionesXProdCotizados>.toMany(58, object.id):
                  object.prodCotizados,
              RelInfo<InversionesXProdCotizados>.toMany(59, object.id):
                  object.bitacora
            },
        getId: (InversionesXProdCotizados object) => object.id,
        setId: (InversionesXProdCotizados object, int id) {
          object.id = id;
        },
        objectToFB: (InversionesXProdCotizados object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(2, idDBROffset);
          fbb.addInt64(4, object.inversion.targetId);
          fbb.addBool(5, object.aceptado);
          fbb.addOffset(6, idEmiWebOffset);
          fbb.addInt64(7, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = InversionesXProdCotizados(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              aceptado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          object.inversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.inversion.attach(store);
          InternalToManyAccess.setRelInfo(
              object.prodCotizados,
              store,
              RelInfo<InversionesXProdCotizados>.toMany(58, object.id),
              store.box<InversionesXProdCotizados>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<InversionesXProdCotizados>.toMany(59, object.id),
              store.box<InversionesXProdCotizados>());
          return object;
        }),
    Pagos: EntityDefinition<Pagos>(
        model: _entities[32],
        toOneRelations: (Pagos object) => [object.inversion, object.usuario],
        toManyRelations: (Pagos object) =>
            {RelInfo<Pagos>.toMany(61, object.id): object.bitacora},
        getId: (Pagos object) => object.id,
        setId: (Pagos object, int id) {
          object.id = id;
        },
        objectToFB: (Pagos object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = object.idEmiWeb == null
              ? null
              : fbb.writeString(object.idEmiWeb!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.montoAbonado);
          fbb.addInt64(2, object.fechaMovimiento.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(6, object.inversion.targetId);
          fbb.addInt64(7, object.usuario.targetId);
          fbb.addOffset(8, idEmiWebOffset);
          fbb.addInt64(9, object.idEmprendimiento);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Pagos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              montoAbonado:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              fechaMovimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              idEmprendimiento:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          object.inversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.inversion.attach(store);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.usuario.attach(store);
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Pagos>.toMany(61, object.id), store.box<Pagos>());
          return object;
        }),
    PorcentajeAvance: EntityDefinition<PorcentajeAvance>(
        model: _entities[33],
        toOneRelations: (PorcentajeAvance object) => [],
        toManyRelations: (PorcentajeAvance object) => {
              RelInfo<Tareas>.toOneBacklink(20, object.id,
                  (Tareas srcObject) => srcObject.porcentaje): object.tareas
            },
        getId: (PorcentajeAvance object) => object.id,
        setId: (PorcentajeAvance object, int id) {
          object.id = id;
        },
        objectToFB: (PorcentajeAvance object, fb.Builder fbb) {
          final porcentajeAvanceOffset =
              fbb.writeString(object.porcentajeAvance);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, porcentajeAvanceOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PorcentajeAvance(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              porcentajeAvance: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toOneBacklink(
                  20, object.id, (Tareas srcObject) => srcObject.porcentaje),
              store.box<PorcentajeAvance>());
          return object;
        }),
    ProdProyecto: EntityDefinition<ProdProyecto>(
        model: _entities[34],
        toOneRelations: (ProdProyecto object) => [
              object.catalogoProyecto,
              object.imagen,
              object.tipoEmpaque,
              object.familiaInversion
            ],
        toManyRelations: (ProdProyecto object) => {},
        getId: (ProdProyecto object) => object.id,
        setId: (ProdProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (ProdProyecto object, fb.Builder fbb) {
          final productoOffset = fbb.writeString(object.producto);
          final marcaSugeridaOffset = object.marcaSugerida == null
              ? null
              : fbb.writeString(object.marcaSugerida!);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final proveedorSugeridoOffset = object.proveedorSugerido == null
              ? null
              : fbb.writeString(object.proveedorSugerido!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productoOffset);
          fbb.addOffset(2, marcaSugeridaOffset);
          fbb.addOffset(3, descripcionOffset);
          fbb.addOffset(4, proveedorSugeridoOffset);
          fbb.addInt64(5, object.cantidad);
          fbb.addFloat64(6, object.costoEstimado);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(11, object.catalogoProyecto.targetId);
          fbb.addInt64(12, object.imagen.targetId);
          fbb.addOffset(15, idEmiWebOffset);
          fbb.addInt64(18, object.tipoEmpaque.targetId);
          fbb.addInt64(19, object.familiaInversion.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProdProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              producto: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              marcaSugerida: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              proveedorSugerido: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              costoEstimado: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              idEmiWeb: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''));
          object.catalogoProyecto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.catalogoProyecto.attach(store);
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.imagen.attach(store);
          object.tipoEmpaque.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          object.tipoEmpaque.attach(store);
          object.familiaInversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.familiaInversion.attach(store);
          return object;
        }),
    TipoProyecto: EntityDefinition<TipoProyecto>(
        model: _entities[35],
        toOneRelations: (TipoProyecto object) => [],
        toManyRelations: (TipoProyecto object) => {
              RelInfo<TipoProyecto>.toMany(71, object.id):
                  object.categoriasProyecto
            },
        getId: (TipoProyecto object) => object.id,
        setId: (TipoProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (TipoProyecto object, fb.Builder fbb) {
          final tipoProyectoOffset = fbb.writeString(object.tipoProyecto);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoProyectoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(6, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipoProyecto: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''));
          InternalToManyAccess.setRelInfo(
              object.categoriasProyecto,
              store,
              RelInfo<TipoProyecto>.toMany(71, object.id),
              store.box<TipoProyecto>());
          return object;
        }),
    FamiliaInversion: EntityDefinition<FamiliaInversion>(
        model: _entities[36],
        toOneRelations: (FamiliaInversion object) => [],
        toManyRelations: (FamiliaInversion object) => {
              RelInfo<ProdSolicitado>.toOneBacklink(20, object.id,
                      (ProdSolicitado srcObject) => srcObject.familiaInversion):
                  object.prodSolicitados,
              RelInfo<ProdProyecto>.toOneBacklink(20, object.id,
                      (ProdProyecto srcObject) => srcObject.familiaInversion):
                  object.prodProyecto
            },
        getId: (FamiliaInversion object) => object.id,
        setId: (FamiliaInversion object, int id) {
          object.id = id;
        },
        objectToFB: (FamiliaInversion object, fb.Builder fbb) {
          final familiaInversionOffset =
              fbb.writeString(object.familiaInversion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final idEmiWebOffset = fbb.writeString(object.idEmiWeb);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, familiaInversionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, idEmiWebOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FamiliaInversion(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              familiaInversion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              idEmiWeb: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));
          InternalToManyAccess.setRelInfo(
              object.prodSolicitados,
              store,
              RelInfo<ProdSolicitado>.toOneBacklink(20, object.id,
                  (ProdSolicitado srcObject) => srcObject.familiaInversion),
              store.box<FamiliaInversion>());
          InternalToManyAccess.setRelInfo(
              object.prodProyecto,
              store,
              RelInfo<ProdProyecto>.toOneBacklink(20, object.id,
                  (ProdProyecto srcObject) => srcObject.familiaInversion),
              store.box<FamiliaInversion>());
          return object;
        }),
    Cliente: EntityDefinition<Cliente>(
        model: _entities[37],
        toOneRelations: (Cliente object) => [object.imagen],
        toManyRelations: (Cliente object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      20, object.id, (Bitacora srcObject) => srcObject.cliente):
                  object.bitacora
            },
        getId: (Cliente object) => object.id,
        setId: (Cliente object, int id) {
          object.id = id;
        },
        objectToFB: (Cliente object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoPOffset = fbb.writeString(object.apellidoP);
          final apellidoMOffset = object.apellidoM == null
              ? null
              : fbb.writeString(object.apellidoM!);
          final telefonoOffset = object.telefono == null
              ? null
              : fbb.writeString(object.telefono!);
          final celularOffset = fbb.writeString(object.celular);
          final correoOffset = fbb.writeString(object.correo);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final rfcOffset = fbb.writeString(object.rfc);
          final domicilioOffset = fbb.writeString(object.domicilio);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoPOffset);
          fbb.addOffset(3, apellidoMOffset);
          fbb.addOffset(4, telefonoOffset);
          fbb.addOffset(5, celularOffset);
          fbb.addOffset(7, correoOffset);
          fbb.addInt64(8, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(10, idDBROffset);
          fbb.addInt64(11, object.imagen.targetId);
          fbb.addOffset(13, rfcOffset);
          fbb.addOffset(14, domicilioOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Cliente(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidoP: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              apellidoM: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              celular: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              rfc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''),
              correo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              domicilio:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24));
          object.imagen.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.imagen.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  20, object.id, (Bitacora srcObject) => srcObject.cliente),
              store.box<Cliente>());
          return object;
        }),
    Vehiculo: EntityDefinition<Vehiculo>(
        model: _entities[38],
        toOneRelations: (Vehiculo object) => [object.cliente],
        toManyRelations: (Vehiculo object) => {
              RelInfo<Bitacora>.toOneBacklink(21, object.id,
                  (Bitacora srcObject) => srcObject.vehiculo): object.bitacora
            },
        getId: (Vehiculo object) => object.id,
        setId: (Vehiculo object, int id) {
          object.id = id;
        },
        objectToFB: (Vehiculo object, fb.Builder fbb) {
          final marcaOffset = fbb.writeString(object.marca);
          final modeloOffset = fbb.writeString(object.modelo);
          final anioOffset = fbb.writeString(object.anio);
          final vinOffset = fbb.writeString(object.vin);
          final placasOffset = fbb.writeString(object.placas);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final motorOffset = fbb.writeString(object.motor);
          final colorOffset = fbb.writeString(object.color);
          final imagenOffset = fbb.writeString(object.imagen);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, marcaOffset);
          fbb.addOffset(2, modeloOffset);
          fbb.addOffset(3, anioOffset);
          fbb.addOffset(4, vinOffset);
          fbb.addOffset(5, placasOffset);
          fbb.addInt64(8, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(10, object.cliente.targetId);
          fbb.addOffset(12, motorOffset);
          fbb.addOffset(13, colorOffset);
          fbb.addOffset(14, imagenOffset);
          fbb.addOffset(15, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Vehiculo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              marca: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              modelo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              anio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              vin: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              placas: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              motor: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              color: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22));
          object.cliente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.cliente.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  21, object.id, (Bitacora srcObject) => srcObject.vehiculo),
              store.box<Vehiculo>());
          return object;
        }),
    FormaPago: EntityDefinition<FormaPago>(
        model: _entities[39],
        toOneRelations: (FormaPago object) => [],
        toManyRelations: (FormaPago object) => {
              RelInfo<OrdenTrabajo>.toOneBacklink(9, object.id,
                      (OrdenTrabajo srcObject) => srcObject.formaPago):
                  object.ordenTrabajo
            },
        getId: (FormaPago object) => object.id,
        setId: (FormaPago object, int id) {
          object.id = id;
        },
        objectToFB: (FormaPago object, fb.Builder fbb) {
          final formaPagoOffset = fbb.writeString(object.formaPago);
          final idDBROffset = fbb.writeString(object.idDBR);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, formaPagoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FormaPago(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              formaPago: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo(
              object.ordenTrabajo,
              store,
              RelInfo<OrdenTrabajo>.toOneBacklink(9, object.id,
                  (OrdenTrabajo srcObject) => srcObject.formaPago),
              store.box<FormaPago>());
          return object;
        }),
    OrdenTrabajo: EntityDefinition<OrdenTrabajo>(
        model: _entities[40],
        toOneRelations: (OrdenTrabajo object) => [
              object.cliente,
              object.vehiculo,
              object.formaPago,
              object.estatus,
              object.asesor,
              object.ordenServicio,
              object.revision
            ],
        toManyRelations: (OrdenTrabajo object) => {
              RelInfo<Observaciones>.toOneBacklink(15, object.id,
                      (Observaciones srcObject) => srcObject.ordenTrabajo):
                  object.observacion,
              RelInfo<Bitacora>.toOneBacklink(22, object.id,
                      (Bitacora srcObject) => srcObject.ordenTrabajo):
                  object.bitacora
            },
        getId: (OrdenTrabajo object) => object.id,
        setId: (OrdenTrabajo object, int id) {
          object.id = id;
        },
        objectToFB: (OrdenTrabajo object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final gasolinaOffset = fbb.writeString(object.gasolina);
          final kilometrajeMillajeOffset =
              fbb.writeString(object.kilometrajeMillaje);
          final descripcionFallaOffset =
              fbb.writeString(object.descripcionFalla);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaOrden.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(6, object.cliente.targetId);
          fbb.addInt64(7, object.vehiculo.targetId);
          fbb.addInt64(8, object.formaPago.targetId);
          fbb.addOffset(9, gasolinaOffset);
          fbb.addOffset(11, kilometrajeMillajeOffset);
          fbb.addOffset(12, descripcionFallaOffset);
          fbb.addInt64(15, object.estatus.targetId);
          fbb.addInt64(16, object.asesor.targetId);
          fbb.addBool(17, object.completado);
          fbb.addInt64(18, object.ordenServicio.targetId);
          fbb.addInt64(19, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrdenTrabajo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaOrden: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              gasolina: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              kilometrajeMillaje: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''),
              descripcionFalla: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              completado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 38, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.cliente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.cliente.attach(store);
          object.vehiculo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.vehiculo.attach(store);
          object.formaPago.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.formaPago.attach(store);
          object.estatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.estatus.attach(store);
          object.asesor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.asesor.attach(store);
          object.ordenServicio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          object.ordenServicio.attach(store);
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.observacion,
              store,
              RelInfo<Observaciones>.toOneBacklink(15, object.id,
                  (Observaciones srcObject) => srcObject.ordenTrabajo),
              store.box<OrdenTrabajo>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(22, object.id,
                  (Bitacora srcObject) => srcObject.ordenTrabajo),
              store.box<OrdenTrabajo>());
          return object;
        }),
    Observaciones: EntityDefinition<Observaciones>(
        model: _entities[41],
        toOneRelations: (Observaciones object) => [object.ordenTrabajo],
        toManyRelations: (Observaciones object) => {
              RelInfo<Bitacora>.toOneBacklink(23, object.id,
                      (Bitacora srcObject) => srcObject.observacion):
                  object.bitacora
            },
        getId: (Observaciones object) => object.id,
        setId: (Observaciones object, int id) {
          object.id = id;
        },
        objectToFB: (Observaciones object, fb.Builder fbb) {
          final respuestaP1Offset = fbb.writeString(object.respuestaP1);
          final respuestaP2Offset = fbb.writeString(object.respuestaP2);
          final respuestaP3Offset = fbb.writeString(object.respuestaP3);
          final respuestaP4Offset = fbb.writeString(object.respuestaP4);
          final respuestaP5Offset = fbb.writeString(object.respuestaP5);
          final respuestaP6Offset = fbb.writeString(object.respuestaP6);
          final respuestaP7Offset = fbb.writeString(object.respuestaP7);
          final respuestaP8Offset = fbb.writeString(object.respuestaP8);
          final respuestaP9Offset = fbb.writeString(object.respuestaP9);
          final respuestaP10Offset = fbb.writeString(object.respuestaP10);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final nombreAsesorOffset = fbb.writeString(object.nombreAsesor);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaObservacion.millisecondsSinceEpoch);
          fbb.addOffset(2, respuestaP1Offset);
          fbb.addOffset(3, respuestaP2Offset);
          fbb.addOffset(4, respuestaP3Offset);
          fbb.addOffset(5, respuestaP4Offset);
          fbb.addOffset(6, respuestaP5Offset);
          fbb.addOffset(7, respuestaP6Offset);
          fbb.addOffset(8, respuestaP7Offset);
          fbb.addOffset(9, respuestaP8Offset);
          fbb.addOffset(10, respuestaP9Offset);
          fbb.addOffset(11, respuestaP10Offset);
          fbb.addInt64(12, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(13, idDBROffset);
          fbb.addInt64(14, object.ordenTrabajo.targetId);
          fbb.addOffset(15, nombreAsesorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Observaciones(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaObservacion: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              respuestaP1: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              respuestaP2: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              respuestaP3: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              respuestaP4: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              respuestaP5: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              respuestaP6: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              respuestaP7:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              respuestaP8: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              respuestaP9: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              respuestaP10: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              nombreAsesor: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30));
          object.ordenTrabajo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.ordenTrabajo.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  23, object.id, (Bitacora srcObject) => srcObject.observacion),
              store.box<Observaciones>());
          return object;
        }),
    Electrico: EntityDefinition<Electrico>(
        model: _entities[42],
        toOneRelations: (Electrico object) => [object.revision],
        toManyRelations: (Electrico object) => {
              RelInfo<Bitacora>.toOneBacklink(29, object.id,
                  (Bitacora srcObject) => srcObject.electrico): object.bitacora
            },
        getId: (Electrico object) => object.id,
        setId: (Electrico object, int id) {
          object.id = id;
        },
        objectToFB: (Electrico object, fb.Builder fbb) {
          final terminalesDeBateriasOffset =
              fbb.writeString(object.terminalesDeBaterias);
          final terminalesDeBateriasObservacionesOffset =
              object.terminalesDeBateriasObservaciones == null
                  ? null
                  : fbb.writeString(object.terminalesDeBateriasObservaciones!);
          final lucesFrenosOffset = fbb.writeString(object.lucesFrenos);
          final lucesFrenosObservacionesOffset =
              object.lucesFrenosObservaciones == null
                  ? null
                  : fbb.writeString(object.lucesFrenosObservaciones!);
          final lucesDireccionalesOffset =
              fbb.writeString(object.lucesDireccionales);
          final lucesDireccionalesObservacionesOffset =
              object.lucesDireccionalesObservaciones == null
                  ? null
                  : fbb.writeString(object.lucesDireccionalesObservaciones!);
          final lucesCuartosOffset = fbb.writeString(object.lucesCuartos);
          final lucesCuartosObservacionesOffset =
              object.lucesCuartosObservaciones == null
                  ? null
                  : fbb.writeString(object.lucesCuartosObservaciones!);
          final checkEngineOffset = fbb.writeString(object.checkEngine);
          final checkEngineObservacionesOffset =
              object.checkEngineObservaciones == null
                  ? null
                  : fbb.writeString(object.checkEngineObservaciones!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, terminalesDeBateriasOffset);
          fbb.addOffset(2, terminalesDeBateriasObservacionesOffset);
          fbb.addOffset(3, lucesFrenosOffset);
          fbb.addOffset(4, lucesFrenosObservacionesOffset);
          fbb.addOffset(5, lucesDireccionalesOffset);
          fbb.addOffset(6, lucesDireccionalesObservacionesOffset);
          fbb.addOffset(7, lucesCuartosOffset);
          fbb.addOffset(8, lucesCuartosObservacionesOffset);
          fbb.addOffset(9, checkEngineOffset);
          fbb.addOffset(10, checkEngineObservacionesOffset);
          fbb.addBool(11, object.completado);
          fbb.addInt64(12, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(13, idDBROffset);
          fbb.addInt64(15, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Electrico(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              terminalesDeBaterias: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              terminalesDeBateriasObservaciones:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 8),
              lucesFrenos: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              lucesFrenosObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              lucesDireccionales: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              lucesDireccionalesObservaciones:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 16),
              lucesCuartos: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              lucesCuartosObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              checkEngine: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              checkEngineObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              completado: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30));
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  29, object.id, (Bitacora srcObject) => srcObject.electrico),
              store.box<Electrico>());
          return object;
        }),
    Fluidos: EntityDefinition<Fluidos>(
        model: _entities[43],
        toOneRelations: (Fluidos object) => [object.revision],
        toManyRelations: (Fluidos object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      27, object.id, (Bitacora srcObject) => srcObject.fluidos):
                  object.bitacora
            },
        getId: (Fluidos object) => object.id,
        setId: (Fluidos object, int id) {
          object.id = id;
        },
        objectToFB: (Fluidos object, fb.Builder fbb) {
          final atfOffset = fbb.writeString(object.atf);
          final atfObservacionesOffset = object.atfObservaciones == null
              ? null
              : fbb.writeString(object.atfObservaciones!);
          final powerOffset = fbb.writeString(object.power);
          final powerObservacionesOffset = object.powerObservaciones == null
              ? null
              : fbb.writeString(object.powerObservaciones!);
          final frenosOffset = fbb.writeString(object.frenos);
          final frenosObservacionesOffset = object.frenosObservaciones == null
              ? null
              : fbb.writeString(object.frenosObservaciones!);
          final anticongelanteOffset = fbb.writeString(object.anticongelante);
          final anticongelanteObservacionesOffset =
              object.anticongelanteObservaciones == null
                  ? null
                  : fbb.writeString(object.anticongelanteObservaciones!);
          final wipersOffset = fbb.writeString(object.wipers);
          final wipersObservacionesOffset = object.wipersObservaciones == null
              ? null
              : fbb.writeString(object.wipersObservaciones!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, atfOffset);
          fbb.addOffset(2, atfObservacionesOffset);
          fbb.addOffset(3, powerOffset);
          fbb.addOffset(4, powerObservacionesOffset);
          fbb.addOffset(5, frenosOffset);
          fbb.addOffset(6, frenosObservacionesOffset);
          fbb.addOffset(7, anticongelanteOffset);
          fbb.addOffset(8, anticongelanteObservacionesOffset);
          fbb.addOffset(9, wipersOffset);
          fbb.addOffset(10, wipersObservacionesOffset);
          fbb.addBool(11, object.completado);
          fbb.addInt64(12, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(13, idDBROffset);
          fbb.addInt64(15, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Fluidos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              atf: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              atfObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              power: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              powerObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              frenos: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              frenosObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              anticongelante: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              anticongelanteObservaciones:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              wipers: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              wipersObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              completado: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30));
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  27, object.id, (Bitacora srcObject) => srcObject.fluidos),
              store.box<Fluidos>());
          return object;
        }),
    Frenos: EntityDefinition<Frenos>(
        model: _entities[44],
        toOneRelations: (Frenos object) => [object.revision],
        toManyRelations: (Frenos object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      28, object.id, (Bitacora srcObject) => srcObject.frenos):
                  object.bitacora
            },
        getId: (Frenos object) => object.id,
        setId: (Frenos object, int id) {
          object.id = id;
        },
        objectToFB: (Frenos object, fb.Builder fbb) {
          final balatasDelanterasOffset =
              fbb.writeString(object.balatasDelanteras);
          final balatasDelanterasObservacionesOffset =
              object.balatasDelanterasObservaciones == null
                  ? null
                  : fbb.writeString(object.balatasDelanterasObservaciones!);
          final balatasTraserasDiscoTamborOffset =
              fbb.writeString(object.balatasTraserasDiscoTambor);
          final balatasTraserasDiscoTamborObservacionesOffset =
              object.balatasTraserasDiscoTamborObservaciones == null
                  ? null
                  : fbb.writeString(
                      object.balatasTraserasDiscoTamborObservaciones!);
          final manguerasLineasOffset = fbb.writeString(object.manguerasLineas);
          final manguerasLineasObservacionesOffset =
              object.manguerasLineasObservaciones == null
                  ? null
                  : fbb.writeString(object.manguerasLineasObservaciones!);
          final cilindroMaestroOffset = fbb.writeString(object.cilindroMaestro);
          final cilindroMaestroObservacionesOffset =
              object.cilindroMaestroObservaciones == null
                  ? null
                  : fbb.writeString(object.cilindroMaestroObservaciones!);
          final birlosYTuercasOffset = fbb.writeString(object.birlosYTuercas);
          final birlosYTuercasObservacionesOffset =
              object.birlosYTuercasObservaciones == null
                  ? null
                  : fbb.writeString(object.birlosYTuercasObservaciones!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, balatasDelanterasOffset);
          fbb.addOffset(2, balatasDelanterasObservacionesOffset);
          fbb.addOffset(3, balatasTraserasDiscoTamborOffset);
          fbb.addOffset(4, balatasTraserasDiscoTamborObservacionesOffset);
          fbb.addOffset(5, manguerasLineasOffset);
          fbb.addOffset(6, manguerasLineasObservacionesOffset);
          fbb.addOffset(7, cilindroMaestroOffset);
          fbb.addOffset(8, cilindroMaestroObservacionesOffset);
          fbb.addOffset(9, birlosYTuercasOffset);
          fbb.addOffset(10, birlosYTuercasObservacionesOffset);
          fbb.addBool(11, object.completado);
          fbb.addInt64(12, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(13, idDBROffset);
          fbb.addInt64(15, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Frenos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              balatasDelanteras: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              balatasDelanterasObservaciones:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 8),
              balatasTraserasDiscoTambor: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              balatasTraserasDiscoTamborObservaciones:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 12),
              manguerasLineas: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              manguerasLineasObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              cilindroMaestro: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              cilindroMaestroObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              birlosYTuercas: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              birlosYTuercasObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              completado: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30));
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  28, object.id, (Bitacora srcObject) => srcObject.frenos),
              store.box<Frenos>());
          return object;
        }),
    Motor: EntityDefinition<Motor>(
        model: _entities[45],
        toOneRelations: (Motor object) => [object.revision],
        toManyRelations: (Motor object) => {
              RelInfo<Bitacora>.toOneBacklink(
                      26, object.id, (Bitacora srcObject) => srcObject.motor):
                  object.bitacora
            },
        getId: (Motor object) => object.id,
        setId: (Motor object, int id) {
          object.id = id;
        },
        objectToFB: (Motor object, fb.Builder fbb) {
          final aceiteOffset = fbb.writeString(object.aceite);
          final aceiteObservacionesOffset = object.aceiteObservaciones == null
              ? null
              : fbb.writeString(object.aceiteObservaciones!);
          final cpoDeAceleracionOffset =
              fbb.writeString(object.cpoDeAceleracion);
          final cpoDeAceleracionObservacionesOffset =
              object.cpoDeAceleracionObservaciones == null
                  ? null
                  : fbb.writeString(object.cpoDeAceleracionObservaciones!);
          final bujiasOffset = fbb.writeString(object.bujias);
          final bujiasObservacionesOffset = object.bujiasObservaciones == null
              ? null
              : fbb.writeString(object.bujiasObservaciones!);
          final bandaCadenaDeTiempoOffset =
              fbb.writeString(object.bandaCadenaDeTiempo);
          final bandaCadenaDeTiempoObservacionesOffset =
              object.bandaCadenaDeTiempoObservaciones == null
                  ? null
                  : fbb.writeString(object.bandaCadenaDeTiempoObservaciones!);
          final soportesOffset = fbb.writeString(object.soportes);
          final soportesObservacionesOffset =
              object.soportesObservaciones == null
                  ? null
                  : fbb.writeString(object.soportesObservaciones!);
          final bandasOffset = fbb.writeString(object.bandas);
          final bandasObservacionesOffset = object.bandasObservaciones == null
              ? null
              : fbb.writeString(object.bandasObservaciones!);
          final manguerasOffset = fbb.writeString(object.mangueras);
          final manguerasObservacionesOffset =
              object.manguerasObservaciones == null
                  ? null
                  : fbb.writeString(object.manguerasObservaciones!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final filtroDeAireOffset = fbb.writeString(object.filtroDeAire);
          final filtroDeAireObservacionesOffset =
              object.filtroDeAireObservaciones == null
                  ? null
                  : fbb.writeString(object.filtroDeAireObservaciones!);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, aceiteOffset);
          fbb.addOffset(2, aceiteObservacionesOffset);
          fbb.addOffset(5, cpoDeAceleracionOffset);
          fbb.addOffset(6, cpoDeAceleracionObservacionesOffset);
          fbb.addOffset(7, bujiasOffset);
          fbb.addOffset(8, bujiasObservacionesOffset);
          fbb.addOffset(9, bandaCadenaDeTiempoOffset);
          fbb.addOffset(10, bandaCadenaDeTiempoObservacionesOffset);
          fbb.addOffset(11, soportesOffset);
          fbb.addOffset(12, soportesObservacionesOffset);
          fbb.addOffset(13, bandasOffset);
          fbb.addOffset(14, bandasObservacionesOffset);
          fbb.addOffset(15, manguerasOffset);
          fbb.addOffset(16, manguerasObservacionesOffset);
          fbb.addBool(17, object.completado);
          fbb.addInt64(18, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(19, idDBROffset);
          fbb.addOffset(21, filtroDeAireOffset);
          fbb.addOffset(22, filtroDeAireObservacionesOffset);
          fbb.addInt64(23, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Motor(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              aceite: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              aceiteObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              filtroDeAire: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, ''),
              filtroDeAireObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48),
              cpoDeAceleracion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              cpoDeAceleracionObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              bujias: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              bujiasObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              bandaCadenaDeTiempo: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              bandaCadenaDeTiempoObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              soportes: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              soportesObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              bandas: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              bandasObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              mangueras: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              manguerasObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              completado: const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42));
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  26, object.id, (Bitacora srcObject) => srcObject.motor),
              store.box<Motor>());
          return object;
        }),
    SuspensionDireccion: EntityDefinition<SuspensionDireccion>(
        model: _entities[46],
        toOneRelations: (SuspensionDireccion object) => [object.revision],
        toManyRelations: (SuspensionDireccion object) => {
              RelInfo<Bitacora>.toOneBacklink(25, object.id,
                      (Bitacora srcObject) => srcObject.suspensionDireccion):
                  object.bitacora
            },
        getId: (SuspensionDireccion object) => object.id,
        setId: (SuspensionDireccion object, int id) {
          object.id = id;
        },
        objectToFB: (SuspensionDireccion object, fb.Builder fbb) {
          final rotulaSuperiorIzqOffset =
              fbb.writeString(object.rotulaSuperiorIzq);
          final rotulaSuperiorIzqObservacionesOffset =
              object.rotulaSuperiorIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.rotulaSuperiorIzqObservaciones!);
          final rotulaSuperiorDerOffset =
              fbb.writeString(object.rotulaSuperiorDer);
          final rotulaSuperiorDerObservacionesOffset =
              object.rotulaSuperiorDerObservaciones == null
                  ? null
                  : fbb.writeString(object.rotulaSuperiorDerObservaciones!);
          final rotulaInferiorIzqOffset =
              fbb.writeString(object.rotulaInferiorIzq);
          final rotulaInferiorIzqObservacionesOffset =
              object.rotulaInferiorIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.rotulaInferiorIzqObservaciones!);
          final rotulaInferiorDerOffset =
              fbb.writeString(object.rotulaInferiorDer);
          final rotulaInferiorDerObservacionesOffset =
              object.rotulaInferiorDerObservaciones == null
                  ? null
                  : fbb.writeString(object.rotulaInferiorDerObservaciones!);
          final bujeHorquillaSuperiorIzqOffset =
              fbb.writeString(object.bujeHorquillaSuperiorIzq);
          final bujeHorquillaSuperiorIzqObservacionesOffset = object
                      .bujeHorquillaSuperiorIzqObservaciones ==
                  null
              ? null
              : fbb.writeString(object.bujeHorquillaSuperiorIzqObservaciones!);
          final bujeHorquillaSuperiorDerOffset =
              fbb.writeString(object.bujeHorquillaSuperiorDer);
          final bujeHorquillaSuperiorDerObservacionesOffset = object
                      .bujeHorquillaSuperiorDerObservaciones ==
                  null
              ? null
              : fbb.writeString(object.bujeHorquillaSuperiorDerObservaciones!);
          final bujeHorquillaInferiorIzqOffset =
              fbb.writeString(object.bujeHorquillaInferiorIzq);
          final bujeHorquillaInferiorIzqObservacionesOffset = object
                      .bujeHorquillaInferiorIzqObservaciones ==
                  null
              ? null
              : fbb.writeString(object.bujeHorquillaInferiorIzqObservaciones!);
          final bujeHorquillaInferiorDerOffset =
              fbb.writeString(object.bujeHorquillaInferiorDer);
          final bujeHorquillaInferiorDerObservacionesOffset = object
                      .bujeHorquillaInferiorDerObservaciones ==
                  null
              ? null
              : fbb.writeString(object.bujeHorquillaInferiorDerObservaciones!);
          final amortiguadorDelanteroIzqOffset =
              fbb.writeString(object.amortiguadorDelanteroIzq);
          final amortiguadorDelanteroIzqObservacionesOffset = object
                      .amortiguadorDelanteroIzqObservaciones ==
                  null
              ? null
              : fbb.writeString(object.amortiguadorDelanteroIzqObservaciones!);
          final amortiguadorDelanteroDerOffset =
              fbb.writeString(object.amortiguadorDelanteroDer);
          final amortiguadorDelanteroDerObservacionesOffset = object
                      .amortiguadorDelanteroDerObservaciones ==
                  null
              ? null
              : fbb.writeString(object.amortiguadorDelanteroDerObservaciones!);
          final amortiguadorTraseroIzqOffset =
              fbb.writeString(object.amortiguadorTraseroIzq);
          final amortiguadorTraseroIzqObservacionesOffset =
              object.amortiguadorTraseroIzqObservaciones == null
                  ? null
                  : fbb
                      .writeString(object.amortiguadorTraseroIzqObservaciones!);
          final amortiguadorTraseroDerOffset =
              fbb.writeString(object.amortiguadorTraseroDer);
          final amortiguadorTraseroDerObservacionesOffset =
              object.amortiguadorTraseroDerObservaciones == null
                  ? null
                  : fbb
                      .writeString(object.amortiguadorTraseroDerObservaciones!);
          final bujeBarraEstabilizadoraIzqOffset =
              fbb.writeString(object.bujeBarraEstabilizadoraIzq);
          final bujeBarraEstabilizadoraIzqObservacionesOffset =
              object.bujeBarraEstabilizadoraIzqObservaciones == null
                  ? null
                  : fbb.writeString(
                      object.bujeBarraEstabilizadoraIzqObservaciones!);
          final bujeBarraEstabilizadoraDerOffset =
              fbb.writeString(object.bujeBarraEstabilizadoraDer);
          final bujeBarraEstabilizadoraDerObservacionesOffset =
              object.bujeBarraEstabilizadoraDerObservaciones == null
                  ? null
                  : fbb.writeString(
                      object.bujeBarraEstabilizadoraDerObservaciones!);
          final linkKitDelanteroIzqOffset =
              fbb.writeString(object.linkKitDelanteroIzq);
          final linkKitDelanteroIzqObservacionesOffset =
              object.linkKitDelanteroIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.linkKitDelanteroIzqObservaciones!);
          final linkKitDelanteroDerOffset =
              fbb.writeString(object.linkKitDelanteroDer);
          final linkKitDelanteroDerObservacionesOffset =
              object.linkKitDelanteroDerObservaciones == null
                  ? null
                  : fbb.writeString(object.linkKitDelanteroDerObservaciones!);
          final linkKitTraseroIzqOffset =
              fbb.writeString(object.linkKitTraseroIzq);
          final linkKitTraseroIzqObservacionesOffset =
              object.linkKitTraseroIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.linkKitTraseroIzqObservaciones!);
          final linkKitTraseroDerOffset =
              fbb.writeString(object.linkKitTraseroDer);
          final linkKitTraseroDerObservacionesOffset =
              object.linkKitTraseroDerObservaciones == null
                  ? null
                  : fbb.writeString(object.linkKitTraseroDerObservaciones!);
          final terminalInteriorIzqOffset =
              fbb.writeString(object.terminalInteriorIzq);
          final terminalInteriorIzqObservacionesOffset =
              object.terminalInteriorIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.terminalInteriorIzqObservaciones!);
          final terminalInteriorDerOffset =
              fbb.writeString(object.terminalInteriorDer);
          final terminalInteriorDerObservacionesOffset =
              object.terminalInteriorDerObservaciones == null
                  ? null
                  : fbb.writeString(object.terminalInteriorDerObservaciones!);
          final terminalExteriorIzqOffset =
              fbb.writeString(object.terminalExteriorIzq);
          final terminalExteriorIzqObservacionesOffset =
              object.terminalExteriorIzqObservaciones == null
                  ? null
                  : fbb.writeString(object.terminalExteriorIzqObservaciones!);
          final terminalExteriorDerOffset =
              fbb.writeString(object.terminalExteriorDer);
          final terminalExteriorDerObservacionesOffset =
              object.terminalExteriorDerObservaciones == null
                  ? null
                  : fbb.writeString(object.terminalExteriorDerObservaciones!);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(52);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rotulaSuperiorIzqOffset);
          fbb.addOffset(2, rotulaSuperiorIzqObservacionesOffset);
          fbb.addOffset(3, rotulaSuperiorDerOffset);
          fbb.addOffset(4, rotulaSuperiorDerObservacionesOffset);
          fbb.addOffset(5, rotulaInferiorIzqOffset);
          fbb.addOffset(6, rotulaInferiorIzqObservacionesOffset);
          fbb.addOffset(7, rotulaInferiorDerOffset);
          fbb.addOffset(8, rotulaInferiorDerObservacionesOffset);
          fbb.addOffset(9, bujeHorquillaSuperiorIzqOffset);
          fbb.addOffset(10, bujeHorquillaSuperiorIzqObservacionesOffset);
          fbb.addOffset(11, bujeHorquillaSuperiorDerOffset);
          fbb.addOffset(12, bujeHorquillaSuperiorDerObservacionesOffset);
          fbb.addOffset(13, bujeHorquillaInferiorIzqOffset);
          fbb.addOffset(14, bujeHorquillaInferiorIzqObservacionesOffset);
          fbb.addOffset(15, bujeHorquillaInferiorDerOffset);
          fbb.addOffset(16, bujeHorquillaInferiorDerObservacionesOffset);
          fbb.addOffset(17, amortiguadorDelanteroIzqOffset);
          fbb.addOffset(18, amortiguadorDelanteroIzqObservacionesOffset);
          fbb.addOffset(19, amortiguadorDelanteroDerOffset);
          fbb.addOffset(20, amortiguadorDelanteroDerObservacionesOffset);
          fbb.addOffset(21, amortiguadorTraseroIzqOffset);
          fbb.addOffset(22, amortiguadorTraseroIzqObservacionesOffset);
          fbb.addOffset(23, amortiguadorTraseroDerOffset);
          fbb.addOffset(24, amortiguadorTraseroDerObservacionesOffset);
          fbb.addOffset(25, bujeBarraEstabilizadoraIzqOffset);
          fbb.addOffset(26, bujeBarraEstabilizadoraIzqObservacionesOffset);
          fbb.addOffset(27, bujeBarraEstabilizadoraDerOffset);
          fbb.addOffset(28, bujeBarraEstabilizadoraDerObservacionesOffset);
          fbb.addOffset(29, linkKitDelanteroIzqOffset);
          fbb.addOffset(30, linkKitDelanteroIzqObservacionesOffset);
          fbb.addOffset(31, linkKitDelanteroDerOffset);
          fbb.addOffset(32, linkKitDelanteroDerObservacionesOffset);
          fbb.addOffset(33, linkKitTraseroIzqOffset);
          fbb.addOffset(34, linkKitTraseroIzqObservacionesOffset);
          fbb.addOffset(35, linkKitTraseroDerOffset);
          fbb.addOffset(36, linkKitTraseroDerObservacionesOffset);
          fbb.addOffset(37, terminalInteriorIzqOffset);
          fbb.addOffset(38, terminalInteriorIzqObservacionesOffset);
          fbb.addOffset(39, terminalInteriorDerOffset);
          fbb.addOffset(40, terminalInteriorDerObservacionesOffset);
          fbb.addOffset(41, terminalExteriorIzqOffset);
          fbb.addOffset(42, terminalExteriorIzqObservacionesOffset);
          fbb.addOffset(43, terminalExteriorDerOffset);
          fbb.addOffset(44, terminalExteriorDerObservacionesOffset);
          fbb.addInt64(46, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(47, idDBROffset);
          fbb.addBool(49, object.completado);
          fbb.addInt64(50, object.revision.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SuspensionDireccion(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              rotulaSuperiorIzq: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              rotulaSuperiorIzqObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              rotulaSuperiorDer: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              rotulaSuperiorDerObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              rotulaInferiorIzq: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              rotulaInferiorIzqObservaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              rotulaInferiorDer: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              rotulaInferiorDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              bujeHorquillaSuperiorIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              bujeHorquillaSuperiorIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              bujeHorquillaSuperiorDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              bujeHorquillaSuperiorDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              bujeHorquillaInferiorIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              bujeHorquillaInferiorIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              bujeHorquillaInferiorDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              bujeHorquillaInferiorDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              amortiguadorDelanteroIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              amortiguadorDelanteroIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 40),
              amortiguadorDelanteroDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              amortiguadorDelanteroDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 44),
              amortiguadorTraseroIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''),
              amortiguadorTraseroIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 48),
              amortiguadorTraseroDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 50, ''),
              amortiguadorTraseroDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 52),
              bujeBarraEstabilizadoraIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 54, ''),
              bujeBarraEstabilizadoraIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 56),
              bujeBarraEstabilizadoraDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 58, ''),
              bujeBarraEstabilizadoraDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 60),
              linkKitDelanteroIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 62, ''),
              linkKitDelanteroIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 64),
              linkKitDelanteroDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 66, ''),
              linkKitDelanteroDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 68),
              linkKitTraseroIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 70, ''),
              linkKitTraseroIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 72),
              linkKitTraseroDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 74, ''),
              linkKitTraseroDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 76),
              terminalInteriorIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 78, ''),
              terminalInteriorIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 80),
              terminalInteriorDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 82, ''),
              terminalInteriorDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 84),
              terminalExteriorIzq: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 86, ''),
              terminalExteriorIzqObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 88),
              terminalExteriorDer: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 90, ''),
              terminalExteriorDerObservaciones: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 92),
              completado: const fb.BoolReader().vTableGet(buffer, rootOffset, 102, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 96, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 98));
          object.revision.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 104, 0);
          object.revision.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(25, object.id,
                  (Bitacora srcObject) => srcObject.suspensionDireccion),
              store.box<SuspensionDireccion>());
          return object;
        }),
    Producto: EntityDefinition<Producto>(
        model: _entities[47],
        toOneRelations: (Producto object) => [object.servicio],
        toManyRelations: (Producto object) => {
              RelInfo<Bitacora>.toOneBacklink(31, object.id,
                  (Bitacora srcObject) => srcObject.producto): object.bitacora
            },
        getId: (Producto object) => object.id,
        setId: (Producto object, int id) {
          object.id = id;
        },
        objectToFB: (Producto object, fb.Builder fbb) {
          final productoOffset = fbb.writeString(object.producto);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, productoOffset);
          fbb.addInt64(2, object.cantidad);
          fbb.addFloat64(3, object.costo);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(5, idDBROffset);
          fbb.addInt64(6, object.servicio.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Producto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              producto: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));
          object.servicio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.servicio.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  31, object.id, (Bitacora srcObject) => srcObject.producto),
              store.box<Producto>());
          return object;
        }),
    Servicio: EntityDefinition<Servicio>(
        model: _entities[48],
        toOneRelations: (Servicio object) => [object.ordenServicio],
        toManyRelations: (Servicio object) => {
              RelInfo<Producto>.toOneBacklink(
                      7, object.id, (Producto srcObject) => srcObject.servicio):
                  object.productos,
              RelInfo<Bitacora>.toOneBacklink(30, object.id,
                  (Bitacora srcObject) => srcObject.servicio): object.bitacora
            },
        getId: (Servicio object) => object.id,
        setId: (Servicio object, int id) {
          object.id = id;
        },
        objectToFB: (Servicio object, fb.Builder fbb) {
          final servicioOffset = fbb.writeString(object.servicio);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final imagenOffset = fbb.writeString(object.imagen);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, servicioOffset);
          fbb.addFloat64(2, object.costoServicio);
          fbb.addBool(4, object.autorizado);
          fbb.addInt64(5, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(6, object.fechaEntrega.millisecondsSinceEpoch);
          fbb.addOffset(7, idDBROffset);
          fbb.addOffset(9, imagenOffset);
          fbb.addOffset(10, pathOffset);
          fbb.addInt64(11, object.ordenServicio.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Servicio(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              servicio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              costoServicio:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              autorizado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              fechaEntrega: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18));
          object.ordenServicio.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.ordenServicio.attach(store);
          InternalToManyAccess.setRelInfo(
              object.productos,
              store,
              RelInfo<Producto>.toOneBacklink(
                  7, object.id, (Producto srcObject) => srcObject.servicio),
              store.box<Servicio>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  30, object.id, (Bitacora srcObject) => srcObject.servicio),
              store.box<Servicio>());
          return object;
        }),
    TipoProducto: EntityDefinition<TipoProducto>(
        model: _entities[49],
        toOneRelations: (TipoProducto object) => [],
        toManyRelations: (TipoProducto object) => {},
        getId: (TipoProducto object) => object.id,
        setId: (TipoProducto object, int id) {
          object.id = id;
        },
        objectToFB: (TipoProducto object, fb.Builder fbb) {
          final tipoProductoOffset = fbb.writeString(object.tipoProducto);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoProductoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.costo);
          fbb.addOffset(4, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoProducto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipoProducto: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    TipoServicio: EntityDefinition<TipoServicio>(
        model: _entities[50],
        toOneRelations: (TipoServicio object) => [],
        toManyRelations: (TipoServicio object) => {},
        getId: (TipoServicio object) => object.id,
        setId: (TipoServicio object, int id) {
          object.id = id;
        },
        objectToFB: (TipoServicio object, fb.Builder fbb) {
          final tipoServicioOffset = fbb.writeString(object.tipoServicio);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final imagenOffset = fbb.writeString(object.imagen);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoServicioOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.costo);
          fbb.addOffset(4, idDBROffset);
          fbb.addOffset(5, imagenOffset);
          fbb.addOffset(6, pathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoServicio(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipoServicio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              path: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    Estatus: EntityDefinition<Estatus>(
        model: _entities[51],
        toOneRelations: (Estatus object) => [],
        toManyRelations: (Estatus object) => {
              RelInfo<OrdenTrabajo>.toOneBacklink(16, object.id,
                      (OrdenTrabajo srcObject) => srcObject.estatus):
                  object.ordenTrabajo,
              RelInfo<Bitacora>.toOneBacklink(
                      33, object.id, (Bitacora srcObject) => srcObject.estatus):
                  object.bitacora
            },
        getId: (Estatus object) => object.id,
        setId: (Estatus object, int id) {
          object.id = id;
        },
        objectToFB: (Estatus object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final estatusOffset = fbb.writeString(object.estatus);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.addFloat64(5, object.avance);
          fbb.addOffset(6, estatusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Estatus(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              avance:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              estatus: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          InternalToManyAccess.setRelInfo(
              object.ordenTrabajo,
              store,
              RelInfo<OrdenTrabajo>.toOneBacklink(
                  16, object.id, (OrdenTrabajo srcObject) => srcObject.estatus),
              store.box<Estatus>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  33, object.id, (Bitacora srcObject) => srcObject.estatus),
              store.box<Estatus>());
          return object;
        }),
    OrdenServicio: EntityDefinition<OrdenServicio>(
        model: _entities[52],
        toOneRelations: (OrdenServicio object) => [object.ordenTrabajo],
        toManyRelations: (OrdenServicio object) => {
              RelInfo<Servicio>.toOneBacklink(12, object.id,
                      (Servicio srcObject) => srcObject.ordenServicio):
                  object.servicios,
              RelInfo<Bitacora>.toOneBacklink(39, object.id,
                      (Bitacora srcObject) => srcObject.ordenServicio):
                  object.bitacora
            },
        getId: (OrdenServicio object) => object.id,
        setId: (OrdenServicio object, int id) {
          object.id = id;
        },
        objectToFB: (OrdenServicio object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(2, object.fechaEntrega.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.costoTotal);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.ordenTrabajo.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrdenServicio(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              costoTotal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaEntrega: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.ordenTrabajo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.ordenTrabajo.attach(store);
          InternalToManyAccess.setRelInfo(
              object.servicios,
              store,
              RelInfo<Servicio>.toOneBacklink(12, object.id,
                  (Servicio srcObject) => srcObject.ordenServicio),
              store.box<OrdenServicio>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(39, object.id,
                  (Bitacora srcObject) => srcObject.ordenServicio),
              store.box<OrdenServicio>());
          return object;
        }),
    Revision: EntityDefinition<Revision>(
        model: _entities[53],
        toOneRelations: (Revision object) => [
              object.ordenTrabajo,
              object.suspensionDireccion,
              object.motor,
              object.fluidos,
              object.frenos,
              object.electrico
            ],
        toManyRelations: (Revision object) => {
              RelInfo<Bitacora>.toOneBacklink(40, object.id,
                  (Bitacora srcObject) => srcObject.revision): object.bitacora
            },
        getId: (Revision object) => object.id,
        setId: (Revision object, int id) {
          object.id = id;
        },
        objectToFB: (Revision object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.completado);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.ordenTrabajo.targetId);
          fbb.addInt64(5, object.suspensionDireccion.targetId);
          fbb.addInt64(6, object.motor.targetId);
          fbb.addInt64(7, object.fluidos.targetId);
          fbb.addInt64(8, object.frenos.targetId);
          fbb.addInt64(9, object.electrico.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Revision(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              completado:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.ordenTrabajo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.ordenTrabajo.attach(store);
          object.suspensionDireccion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.suspensionDireccion.attach(store);
          object.motor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.motor.attach(store);
          object.fluidos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.fluidos.attach(store);
          object.frenos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.frenos.attach(store);
          object.electrico.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.electrico.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Bitacora>.toOneBacklink(
                  40, object.id, (Bitacora srcObject) => srcObject.revision),
              store.box<Revision>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Emprendimientos] entity fields to define ObjectBox queries.
class Emprendimientos_ {
  /// see [Emprendimientos.id]
  static final id =
      QueryIntegerProperty<Emprendimientos>(_entities[0].properties[0]);

  /// see [Emprendimientos.nombre]
  static final nombre =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[1]);

  /// see [Emprendimientos.descripcion]
  static final descripcion =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[2]);

  /// see [Emprendimientos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendimientos>(_entities[0].properties[3]);

  /// see [Emprendimientos.emprendedor]
  static final emprendedor = QueryRelationToOne<Emprendimientos, Emprendedores>(
      _entities[0].properties[4]);

  /// see [Emprendimientos.activo]
  static final activo =
      QueryBooleanProperty<Emprendimientos>(_entities[0].properties[5]);

  /// see [Emprendimientos.archivado]
  static final archivado =
      QueryBooleanProperty<Emprendimientos>(_entities[0].properties[6]);

  /// see [Emprendimientos.idDBR]
  static final idDBR =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[7]);

  /// see [Emprendimientos.usuario]
  static final usuario =
      QueryRelationToOne<Emprendimientos, Usuarios>(_entities[0].properties[8]);

  /// see [Emprendimientos.prioridadEmp]
  static final prioridadEmp = QueryRelationToOne<Emprendimientos, PrioridadEmp>(
      _entities[0].properties[9]);

  /// see [Emprendimientos.catalogoProyecto]
  static final catalogoProyecto =
      QueryRelationToOne<Emprendimientos, CatalogoProyecto>(
          _entities[0].properties[10]);

  /// see [Emprendimientos.idInversionJornada]
  static final idInversionJornada =
      QueryIntegerProperty<Emprendimientos>(_entities[0].properties[11]);

  /// see [Emprendimientos.faseActual]
  static final faseActual =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[12]);

  /// see [Emprendimientos.faseAnterior]
  static final faseAnterior =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[13]);

  /// see [Emprendimientos.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[14]);

  /// see [Emprendimientos.imagen]
  static final imagen = QueryRelationToOne<Emprendimientos, Imagenes>(
      _entities[0].properties[15]);

  /// see [Emprendimientos.jornadas]
  static final jornadas =
      QueryRelationToMany<Emprendimientos, Jornadas>(_entities[0].relations[0]);

  /// see [Emprendimientos.bitacora]
  static final bitacora =
      QueryRelationToMany<Emprendimientos, Bitacora>(_entities[0].relations[1]);

  /// see [Emprendimientos.proveedores]
  static final proveedores = QueryRelationToMany<Emprendimientos, Proveedores>(
      _entities[0].relations[2]);

  /// see [Emprendimientos.faseEmp]
  static final faseEmp =
      QueryRelationToMany<Emprendimientos, FasesEmp>(_entities[0].relations[3]);
}

/// [Usuarios] entity fields to define ObjectBox queries.
class Usuarios_ {
  /// see [Usuarios.id]
  static final id = QueryIntegerProperty<Usuarios>(_entities[1].properties[0]);

  /// see [Usuarios.nombre]
  static final nombre =
      QueryStringProperty<Usuarios>(_entities[1].properties[1]);

  /// see [Usuarios.apellidoP]
  static final apellidoP =
      QueryStringProperty<Usuarios>(_entities[1].properties[2]);

  /// see [Usuarios.apellidoM]
  static final apellidoM =
      QueryStringProperty<Usuarios>(_entities[1].properties[3]);

  /// see [Usuarios.telefono]
  static final telefono =
      QueryStringProperty<Usuarios>(_entities[1].properties[4]);

  /// see [Usuarios.celular]
  static final celular =
      QueryStringProperty<Usuarios>(_entities[1].properties[5]);

  /// see [Usuarios.correo]
  static final correo =
      QueryStringProperty<Usuarios>(_entities[1].properties[6]);

  /// see [Usuarios.password]
  static final password =
      QueryStringProperty<Usuarios>(_entities[1].properties[7]);

  /// see [Usuarios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Usuarios>(_entities[1].properties[8]);

  /// see [Usuarios.idDBR]
  static final idDBR =
      QueryStringProperty<Usuarios>(_entities[1].properties[9]);

  /// see [Usuarios.rol]
  static final rol =
      QueryRelationToOne<Usuarios, Roles>(_entities[1].properties[10]);

  /// see [Usuarios.rfc]
  static final rfc = QueryStringProperty<Usuarios>(_entities[1].properties[11]);

  /// see [Usuarios.imagen]
  static final imagen =
      QueryStringProperty<Usuarios>(_entities[1].properties[12]);

  /// see [Usuarios.path]
  static final path =
      QueryStringProperty<Usuarios>(_entities[1].properties[13]);

  /// see [Usuarios.domicilio]
  static final domicilio =
      QueryStringProperty<Usuarios>(_entities[1].properties[14]);

  /// see [Usuarios.ordenTrabajo]
  static final ordenTrabajo =
      QueryRelationToOne<Usuarios, OrdenTrabajo>(_entities[1].properties[15]);

  /// see [Usuarios.asesor]
  static final asesor =
      QueryRelationToOne<Usuarios, Usuarios>(_entities[1].properties[16]);

  /// see [Usuarios.bitacora]
  static final bitacora =
      QueryRelationToMany<Usuarios, Bitacora>(_entities[1].relations[0]);

  /// see [Usuarios.pagos]
  static final pagos =
      QueryRelationToMany<Usuarios, Pagos>(_entities[1].relations[1]);

  /// see [Usuarios.roles]
  static final roles =
      QueryRelationToMany<Usuarios, Roles>(_entities[1].relations[2]);

  /// see [Usuarios.clientes]
  static final clientes =
      QueryRelationToMany<Usuarios, Usuarios>(_entities[1].relations[3]);

  /// see [Usuarios.tecnicosMecanicos]
  static final tecnicosMecanicos =
      QueryRelationToMany<Usuarios, Usuarios>(_entities[1].relations[4]);

  /// see [Usuarios.ordenesTrabajo]
  static final ordenesTrabajo =
      QueryRelationToMany<Usuarios, OrdenTrabajo>(_entities[1].relations[5]);

  /// see [Usuarios.vehiculos]
  static final vehiculos =
      QueryRelationToMany<Usuarios, Vehiculo>(_entities[1].relations[6]);
}

/// [Ventas] entity fields to define ObjectBox queries.
class Ventas_ {
  /// see [Ventas.id]
  static final id = QueryIntegerProperty<Ventas>(_entities[2].properties[0]);

  /// see [Ventas.fechaInicio]
  static final fechaInicio =
      QueryIntegerProperty<Ventas>(_entities[2].properties[1]);

  /// see [Ventas.fechaTermino]
  static final fechaTermino =
      QueryIntegerProperty<Ventas>(_entities[2].properties[2]);

  /// see [Ventas.total]
  static final total = QueryDoubleProperty<Ventas>(_entities[2].properties[3]);

  /// see [Ventas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Ventas>(_entities[2].properties[4]);

  /// see [Ventas.idDBR]
  static final idDBR = QueryStringProperty<Ventas>(_entities[2].properties[5]);

  /// see [Ventas.archivado]
  static final archivado =
      QueryBooleanProperty<Ventas>(_entities[2].properties[6]);

  /// see [Ventas.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Ventas, Emprendimientos>(_entities[2].properties[7]);

  /// see [Ventas.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Ventas>(_entities[2].properties[8]);

  /// see [Ventas.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Ventas>(_entities[2].properties[9]);

  /// see [Ventas.prodVendidos]
  static final prodVendidos =
      QueryRelationToMany<Ventas, ProdVendidos>(_entities[2].relations[0]);

  /// see [Ventas.bitacora]
  static final bitacora =
      QueryRelationToMany<Ventas, Bitacora>(_entities[2].relations[1]);
}

/// [Consultorias] entity fields to define ObjectBox queries.
class Consultorias_ {
  /// see [Consultorias.id]
  static final id =
      QueryIntegerProperty<Consultorias>(_entities[3].properties[0]);

  /// see [Consultorias.documentos]
  static final documentos =
      QueryStringVectorProperty<Consultorias>(_entities[3].properties[1]);

  /// see [Consultorias.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Consultorias>(_entities[3].properties[2]);

  /// see [Consultorias.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Consultorias, Emprendimientos>(
          _entities[3].properties[3]);

  /// see [Consultorias.idDBR]
  static final idDBR =
      QueryStringProperty<Consultorias>(_entities[3].properties[4]);

  /// see [Consultorias.areaCirculo]
  static final areaCirculo =
      QueryRelationToOne<Consultorias, AreaCirculo>(_entities[3].properties[5]);

  /// see [Consultorias.ambitoConsultoria]
  static final ambitoConsultoria =
      QueryRelationToOne<Consultorias, AmbitoConsultoria>(
          _entities[3].properties[6]);

  /// see [Consultorias.archivado]
  static final archivado =
      QueryBooleanProperty<Consultorias>(_entities[3].properties[7]);

  /// see [Consultorias.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Consultorias>(_entities[3].properties[8]);

  /// see [Consultorias.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Consultorias>(_entities[3].properties[9]);

  /// see [Consultorias.bitacora]
  static final bitacora =
      QueryRelationToMany<Consultorias, Bitacora>(_entities[3].relations[0]);

  /// see [Consultorias.tareas]
  static final tareas =
      QueryRelationToMany<Consultorias, Tareas>(_entities[3].relations[1]);
}

/// [Tareas] entity fields to define ObjectBox queries.
class Tareas_ {
  /// see [Tareas.id]
  static final id = QueryIntegerProperty<Tareas>(_entities[4].properties[0]);

  /// see [Tareas.descripcion]
  static final descripcion =
      QueryStringProperty<Tareas>(_entities[4].properties[1]);

  /// see [Tareas.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Tareas>(_entities[4].properties[2]);

  /// see [Tareas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Tareas>(_entities[4].properties[3]);

  /// see [Tareas.jornada]
  static final jornada =
      QueryRelationToOne<Tareas, Jornadas>(_entities[4].properties[4]);

  /// see [Tareas.consultoria]
  static final consultoria =
      QueryRelationToOne<Tareas, Consultorias>(_entities[4].properties[5]);

  /// see [Tareas.idDBR]
  static final idDBR = QueryStringProperty<Tareas>(_entities[4].properties[6]);

  /// see [Tareas.tarea]
  static final tarea = QueryStringProperty<Tareas>(_entities[4].properties[7]);

  /// see [Tareas.porcentaje]
  static final porcentaje =
      QueryRelationToOne<Tareas, PorcentajeAvance>(_entities[4].properties[8]);

  /// see [Tareas.comentarios]
  static final comentarios =
      QueryStringProperty<Tareas>(_entities[4].properties[9]);

  /// see [Tareas.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Tareas>(_entities[4].properties[10]);

  /// see [Tareas.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Tareas>(_entities[4].properties[11]);

  /// see [Tareas.bitacora]
  static final bitacora =
      QueryRelationToMany<Tareas, Bitacora>(_entities[4].relations[0]);

  /// see [Tareas.imagenes]
  static final imagenes =
      QueryRelationToMany<Tareas, Imagenes>(_entities[4].relations[1]);
}

/// [Comunidades] entity fields to define ObjectBox queries.
class Comunidades_ {
  /// see [Comunidades.id]
  static final id =
      QueryIntegerProperty<Comunidades>(_entities[5].properties[0]);

  /// see [Comunidades.nombre]
  static final nombre =
      QueryStringProperty<Comunidades>(_entities[5].properties[1]);

  /// see [Comunidades.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Comunidades>(_entities[5].properties[2]);

  /// see [Comunidades.municipios]
  static final municipios =
      QueryRelationToOne<Comunidades, Municipios>(_entities[5].properties[3]);

  /// see [Comunidades.idDBR]
  static final idDBR =
      QueryStringProperty<Comunidades>(_entities[5].properties[4]);

  /// see [Comunidades.activo]
  static final activo =
      QueryBooleanProperty<Comunidades>(_entities[5].properties[5]);

  /// see [Comunidades.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Comunidades>(_entities[5].properties[6]);
}

/// [Emprendedores] entity fields to define ObjectBox queries.
class Emprendedores_ {
  /// see [Emprendedores.id]
  static final id =
      QueryIntegerProperty<Emprendedores>(_entities[6].properties[0]);

  /// see [Emprendedores.nombre]
  static final nombre =
      QueryStringProperty<Emprendedores>(_entities[6].properties[1]);

  /// see [Emprendedores.nacimiento]
  static final nacimiento =
      QueryIntegerProperty<Emprendedores>(_entities[6].properties[2]);

  /// see [Emprendedores.curp]
  static final curp =
      QueryStringProperty<Emprendedores>(_entities[6].properties[3]);

  /// see [Emprendedores.integrantesFamilia]
  static final integrantesFamilia =
      QueryStringProperty<Emprendedores>(_entities[6].properties[4]);

  /// see [Emprendedores.telefono]
  static final telefono =
      QueryStringProperty<Emprendedores>(_entities[6].properties[5]);

  /// see [Emprendedores.comentarios]
  static final comentarios =
      QueryStringProperty<Emprendedores>(_entities[6].properties[6]);

  /// see [Emprendedores.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendedores>(_entities[6].properties[7]);

  /// see [Emprendedores.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Emprendedores, Emprendimientos>(
          _entities[6].properties[8]);

  /// see [Emprendedores.apellidos]
  static final apellidos =
      QueryStringProperty<Emprendedores>(_entities[6].properties[9]);

  /// see [Emprendedores.idDBR]
  static final idDBR =
      QueryStringProperty<Emprendedores>(_entities[6].properties[10]);

  /// see [Emprendedores.comunidad]
  static final comunidad = QueryRelationToOne<Emprendedores, Comunidades>(
      _entities[6].properties[11]);

  /// see [Emprendedores.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Emprendedores>(_entities[6].properties[12]);

  /// see [Emprendedores.imagen]
  static final imagen =
      QueryRelationToOne<Emprendedores, Imagenes>(_entities[6].properties[13]);

  /// see [Emprendedores.bitacora]
  static final bitacora =
      QueryRelationToMany<Emprendedores, Bitacora>(_entities[6].relations[0]);
}

/// [Estados] entity fields to define ObjectBox queries.
class Estados_ {
  /// see [Estados.id]
  static final id = QueryIntegerProperty<Estados>(_entities[7].properties[0]);

  /// see [Estados.nombre]
  static final nombre =
      QueryStringProperty<Estados>(_entities[7].properties[1]);

  /// see [Estados.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Estados>(_entities[7].properties[2]);

  /// see [Estados.idDBR]
  static final idDBR = QueryStringProperty<Estados>(_entities[7].properties[3]);

  /// see [Estados.activo]
  static final activo =
      QueryBooleanProperty<Estados>(_entities[7].properties[4]);

  /// see [Estados.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Estados>(_entities[7].properties[5]);
}

/// [Municipios] entity fields to define ObjectBox queries.
class Municipios_ {
  /// see [Municipios.id]
  static final id =
      QueryIntegerProperty<Municipios>(_entities[8].properties[0]);

  /// see [Municipios.nombre]
  static final nombre =
      QueryStringProperty<Municipios>(_entities[8].properties[1]);

  /// see [Municipios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Municipios>(_entities[8].properties[2]);

  /// see [Municipios.estados]
  static final estados =
      QueryRelationToOne<Municipios, Estados>(_entities[8].properties[3]);

  /// see [Municipios.idDBR]
  static final idDBR =
      QueryStringProperty<Municipios>(_entities[8].properties[4]);

  /// see [Municipios.activo]
  static final activo =
      QueryBooleanProperty<Municipios>(_entities[8].properties[5]);

  /// see [Municipios.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Municipios>(_entities[8].properties[6]);
}

/// [Jornadas] entity fields to define ObjectBox queries.
class Jornadas_ {
  /// see [Jornadas.id]
  static final id = QueryIntegerProperty<Jornadas>(_entities[9].properties[0]);

  /// see [Jornadas.numJornada]
  static final numJornada =
      QueryStringProperty<Jornadas>(_entities[9].properties[1]);

  /// see [Jornadas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Jornadas>(_entities[9].properties[2]);

  /// see [Jornadas.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Jornadas, Emprendimientos>(_entities[9].properties[3]);

  /// see [Jornadas.tarea]
  static final tarea =
      QueryRelationToOne<Jornadas, Tareas>(_entities[9].properties[4]);

  /// see [Jornadas.idDBR]
  static final idDBR =
      QueryStringProperty<Jornadas>(_entities[9].properties[5]);

  /// see [Jornadas.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Jornadas>(_entities[9].properties[6]);

  /// see [Jornadas.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Jornadas>(_entities[9].properties[7]);

  /// see [Jornadas.completada]
  static final completada =
      QueryBooleanProperty<Jornadas>(_entities[9].properties[8]);

  /// see [Jornadas.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Jornadas>(_entities[9].properties[9]);

  /// see [Jornadas.bitacora]
  static final bitacora =
      QueryRelationToMany<Jornadas, Bitacora>(_entities[9].relations[0]);
}

/// [Bitacora] entity fields to define ObjectBox queries.
class Bitacora_ {
  /// see [Bitacora.id]
  static final id = QueryIntegerProperty<Bitacora>(_entities[10].properties[0]);

  /// see [Bitacora.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Bitacora>(_entities[10].properties[1]);

  /// see [Bitacora.instruccionAdicional]
  static final instruccionAdicional =
      QueryStringProperty<Bitacora>(_entities[10].properties[2]);

  /// see [Bitacora.instruccion]
  static final instruccion =
      QueryStringProperty<Bitacora>(_entities[10].properties[3]);

  /// see [Bitacora.cliente]
  static final cliente =
      QueryRelationToOne<Bitacora, Cliente>(_entities[10].properties[4]);

  /// see [Bitacora.vehiculo]
  static final vehiculo =
      QueryRelationToOne<Bitacora, Vehiculo>(_entities[10].properties[5]);

  /// see [Bitacora.ordenTrabajo]
  static final ordenTrabajo =
      QueryRelationToOne<Bitacora, OrdenTrabajo>(_entities[10].properties[6]);

  /// see [Bitacora.observacion]
  static final observacion =
      QueryRelationToOne<Bitacora, Observaciones>(_entities[10].properties[7]);

  /// see [Bitacora.suspensionDireccion]
  static final suspensionDireccion =
      QueryRelationToOne<Bitacora, SuspensionDireccion>(
          _entities[10].properties[8]);

  /// see [Bitacora.motor]
  static final motor =
      QueryRelationToOne<Bitacora, Motor>(_entities[10].properties[9]);

  /// see [Bitacora.fluidos]
  static final fluidos =
      QueryRelationToOne<Bitacora, Fluidos>(_entities[10].properties[10]);

  /// see [Bitacora.frenos]
  static final frenos =
      QueryRelationToOne<Bitacora, Frenos>(_entities[10].properties[11]);

  /// see [Bitacora.electrico]
  static final electrico =
      QueryRelationToOne<Bitacora, Electrico>(_entities[10].properties[12]);

  /// see [Bitacora.servicio]
  static final servicio =
      QueryRelationToOne<Bitacora, Servicio>(_entities[10].properties[13]);

  /// see [Bitacora.producto]
  static final producto =
      QueryRelationToOne<Bitacora, Producto>(_entities[10].properties[14]);

  /// see [Bitacora.estatus]
  static final estatus =
      QueryRelationToOne<Bitacora, Estatus>(_entities[10].properties[15]);

  /// see [Bitacora.usuarioPropietario]
  static final usuarioPropietario =
      QueryStringProperty<Bitacora>(_entities[10].properties[16]);

  /// see [Bitacora.idOrdenTrabajo]
  static final idOrdenTrabajo =
      QueryIntegerProperty<Bitacora>(_entities[10].properties[17]);

  /// see [Bitacora.usuario]
  static final usuario =
      QueryRelationToOne<Bitacora, Usuarios>(_entities[10].properties[18]);

  /// see [Bitacora.executeSupabase]
  static final executeSupabase =
      QueryBooleanProperty<Bitacora>(_entities[10].properties[19]);

  /// see [Bitacora.ordenServicio]
  static final ordenServicio =
      QueryRelationToOne<Bitacora, OrdenServicio>(_entities[10].properties[20]);

  /// see [Bitacora.revision]
  static final revision =
      QueryRelationToOne<Bitacora, Revision>(_entities[10].properties[21]);
}

/// [AmbitoConsultoria] entity fields to define ObjectBox queries.
class AmbitoConsultoria_ {
  /// see [AmbitoConsultoria.id]
  static final id =
      QueryIntegerProperty<AmbitoConsultoria>(_entities[11].properties[0]);

  /// see [AmbitoConsultoria.nombreAmbito]
  static final nombreAmbito =
      QueryStringProperty<AmbitoConsultoria>(_entities[11].properties[1]);

  /// see [AmbitoConsultoria.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<AmbitoConsultoria>(_entities[11].properties[2]);

  /// see [AmbitoConsultoria.activo]
  static final activo =
      QueryBooleanProperty<AmbitoConsultoria>(_entities[11].properties[3]);

  /// see [AmbitoConsultoria.idDBR]
  static final idDBR =
      QueryStringProperty<AmbitoConsultoria>(_entities[11].properties[4]);

  /// see [AmbitoConsultoria.bitacora]
  static final bitacora = QueryRelationToOne<AmbitoConsultoria, Bitacora>(
      _entities[11].properties[5]);

  /// see [AmbitoConsultoria.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<AmbitoConsultoria>(_entities[11].properties[6]);

  /// see [AmbitoConsultoria.consultorias]
  static final consultorias =
      QueryRelationToMany<AmbitoConsultoria, Consultorias>(
          _entities[11].relations[0]);
}

/// [AreaCirculo] entity fields to define ObjectBox queries.
class AreaCirculo_ {
  /// see [AreaCirculo.id]
  static final id =
      QueryIntegerProperty<AreaCirculo>(_entities[12].properties[0]);

  /// see [AreaCirculo.nombreArea]
  static final nombreArea =
      QueryStringProperty<AreaCirculo>(_entities[12].properties[1]);

  /// see [AreaCirculo.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<AreaCirculo>(_entities[12].properties[2]);

  /// see [AreaCirculo.activo]
  static final activo =
      QueryBooleanProperty<AreaCirculo>(_entities[12].properties[3]);

  /// see [AreaCirculo.idDBR]
  static final idDBR =
      QueryStringProperty<AreaCirculo>(_entities[12].properties[4]);

  /// see [AreaCirculo.consultoria]
  static final consultoria = QueryRelationToOne<AreaCirculo, Consultorias>(
      _entities[12].properties[5]);

  /// see [AreaCirculo.bitacora]
  static final bitacora =
      QueryRelationToOne<AreaCirculo, Bitacora>(_entities[12].properties[6]);

  /// see [AreaCirculo.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<AreaCirculo>(_entities[12].properties[7]);
}

/// [Bancos] entity fields to define ObjectBox queries.
class Bancos_ {
  /// see [Bancos.id]
  static final id = QueryIntegerProperty<Bancos>(_entities[13].properties[0]);

  /// see [Bancos.banco]
  static final banco = QueryStringProperty<Bancos>(_entities[13].properties[1]);

  /// see [Bancos.activo]
  static final activo =
      QueryBooleanProperty<Bancos>(_entities[13].properties[2]);

  /// see [Bancos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Bancos>(_entities[13].properties[3]);

  /// see [Bancos.idDBR]
  static final idDBR = QueryStringProperty<Bancos>(_entities[13].properties[4]);

  /// see [Bancos.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Bancos>(_entities[13].properties[5]);
}

/// [CondicionesPago] entity fields to define ObjectBox queries.
class CondicionesPago_ {
  /// see [CondicionesPago.id]
  static final id =
      QueryIntegerProperty<CondicionesPago>(_entities[14].properties[0]);

  /// see [CondicionesPago.condicion]
  static final condicion =
      QueryStringProperty<CondicionesPago>(_entities[14].properties[1]);

  /// see [CondicionesPago.activo]
  static final activo =
      QueryBooleanProperty<CondicionesPago>(_entities[14].properties[2]);

  /// see [CondicionesPago.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<CondicionesPago>(_entities[14].properties[3]);

  /// see [CondicionesPago.idDBR]
  static final idDBR =
      QueryStringProperty<CondicionesPago>(_entities[14].properties[4]);

  /// see [CondicionesPago.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<CondicionesPago>(_entities[14].properties[5]);
}

/// [FasesEmp] entity fields to define ObjectBox queries.
class FasesEmp_ {
  /// see [FasesEmp.id]
  static final id = QueryIntegerProperty<FasesEmp>(_entities[15].properties[0]);

  /// see [FasesEmp.fase]
  static final fase =
      QueryStringProperty<FasesEmp>(_entities[15].properties[1]);

  /// see [FasesEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<FasesEmp>(_entities[15].properties[2]);

  /// see [FasesEmp.idDBR]
  static final idDBR =
      QueryStringProperty<FasesEmp>(_entities[15].properties[3]);

  /// see [FasesEmp.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<FasesEmp>(_entities[15].properties[4]);

  /// see [FasesEmp.emprendimientos]
  static final emprendimientos = QueryRelationToMany<FasesEmp, Emprendimientos>(
      _entities[15].relations[0]);
}

/// [PrioridadEmp] entity fields to define ObjectBox queries.
class PrioridadEmp_ {
  /// see [PrioridadEmp.id]
  static final id =
      QueryIntegerProperty<PrioridadEmp>(_entities[16].properties[0]);

  /// see [PrioridadEmp.prioridad]
  static final prioridad =
      QueryStringProperty<PrioridadEmp>(_entities[16].properties[1]);

  /// see [PrioridadEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<PrioridadEmp>(_entities[16].properties[2]);

  /// see [PrioridadEmp.idDBR]
  static final idDBR =
      QueryStringProperty<PrioridadEmp>(_entities[16].properties[3]);

  /// see [PrioridadEmp.emprendimientos]
  static final emprendimientos =
      QueryRelationToMany<PrioridadEmp, Emprendimientos>(
          _entities[16].relations[0]);
}

/// [Proveedores] entity fields to define ObjectBox queries.
class Proveedores_ {
  /// see [Proveedores.id]
  static final id =
      QueryIntegerProperty<Proveedores>(_entities[17].properties[0]);

  /// see [Proveedores.nombreFiscal]
  static final nombreFiscal =
      QueryStringProperty<Proveedores>(_entities[17].properties[1]);

  /// see [Proveedores.rfc]
  static final rfc =
      QueryStringProperty<Proveedores>(_entities[17].properties[2]);

  /// see [Proveedores.direccion]
  static final direccion =
      QueryStringProperty<Proveedores>(_entities[17].properties[3]);

  /// see [Proveedores.nombreEncargado]
  static final nombreEncargado =
      QueryStringProperty<Proveedores>(_entities[17].properties[4]);

  /// see [Proveedores.clabe]
  static final clabe =
      QueryStringProperty<Proveedores>(_entities[17].properties[5]);

  /// see [Proveedores.telefono]
  static final telefono =
      QueryStringProperty<Proveedores>(_entities[17].properties[6]);

  /// see [Proveedores.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Proveedores>(_entities[17].properties[7]);

  /// see [Proveedores.archivado]
  static final archivado =
      QueryBooleanProperty<Proveedores>(_entities[17].properties[8]);

  /// see [Proveedores.idDBR]
  static final idDBR =
      QueryStringProperty<Proveedores>(_entities[17].properties[9]);

  /// see [Proveedores.tipoProveedor]
  static final tipoProveedor = QueryRelationToOne<Proveedores, TipoProveedor>(
      _entities[17].properties[10]);

  /// see [Proveedores.comunidades]
  static final comunidades = QueryRelationToOne<Proveedores, Comunidades>(
      _entities[17].properties[11]);

  /// see [Proveedores.condicionPago]
  static final condicionPago = QueryRelationToOne<Proveedores, CondicionesPago>(
      _entities[17].properties[12]);

  /// see [Proveedores.banco]
  static final banco =
      QueryRelationToOne<Proveedores, Bancos>(_entities[17].properties[13]);

  /// see [Proveedores.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Proveedores>(_entities[17].properties[14]);

  /// see [Proveedores.productosProv]
  static final productosProv = QueryRelationToMany<Proveedores, ProductosProv>(
      _entities[17].relations[0]);
}

/// [Roles] entity fields to define ObjectBox queries.
class Roles_ {
  /// see [Roles.id]
  static final id = QueryIntegerProperty<Roles>(_entities[18].properties[0]);

  /// see [Roles.rol]
  static final rol = QueryStringProperty<Roles>(_entities[18].properties[1]);

  /// see [Roles.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Roles>(_entities[18].properties[2]);

  /// see [Roles.idDBR]
  static final idDBR = QueryStringProperty<Roles>(_entities[18].properties[3]);

  /// see [Roles.bitacora]
  static final bitacora =
      QueryRelationToOne<Roles, Bitacora>(_entities[18].properties[4]);

  /// see [Roles.usuarios]
  static final usuarios =
      QueryRelationToMany<Roles, Usuarios>(_entities[18].relations[0]);
}

/// [TipoProveedor] entity fields to define ObjectBox queries.
class TipoProveedor_ {
  /// see [TipoProveedor.id]
  static final id =
      QueryIntegerProperty<TipoProveedor>(_entities[19].properties[0]);

  /// see [TipoProveedor.tipo]
  static final tipo =
      QueryStringProperty<TipoProveedor>(_entities[19].properties[1]);

  /// see [TipoProveedor.activo]
  static final activo =
      QueryBooleanProperty<TipoProveedor>(_entities[19].properties[2]);

  /// see [TipoProveedor.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoProveedor>(_entities[19].properties[3]);

  /// see [TipoProveedor.idDBR]
  static final idDBR =
      QueryStringProperty<TipoProveedor>(_entities[19].properties[4]);

  /// see [TipoProveedor.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<TipoProveedor>(_entities[19].properties[5]);

  /// see [TipoProveedor.proveedores]
  static final proveedores = QueryRelationToMany<TipoProveedor, Proveedores>(
      _entities[19].relations[0]);
}

/// [ProductosEmp] entity fields to define ObjectBox queries.
class ProductosEmp_ {
  /// see [ProductosEmp.id]
  static final id =
      QueryIntegerProperty<ProductosEmp>(_entities[20].properties[0]);

  /// see [ProductosEmp.nombre]
  static final nombre =
      QueryStringProperty<ProductosEmp>(_entities[20].properties[1]);

  /// see [ProductosEmp.descripcion]
  static final descripcion =
      QueryStringProperty<ProductosEmp>(_entities[20].properties[2]);

  /// see [ProductosEmp.costo]
  static final costo =
      QueryDoubleProperty<ProductosEmp>(_entities[20].properties[3]);

  /// see [ProductosEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProductosEmp>(_entities[20].properties[4]);

  /// see [ProductosEmp.archivado]
  static final archivado =
      QueryBooleanProperty<ProductosEmp>(_entities[20].properties[5]);

  /// see [ProductosEmp.idDBR]
  static final idDBR =
      QueryStringProperty<ProductosEmp>(_entities[20].properties[6]);

  /// see [ProductosEmp.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<ProductosEmp, Emprendimientos>(
          _entities[20].properties[7]);

  /// see [ProductosEmp.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProductosEmp, UnidadMedida>(
      _entities[20].properties[8]);

  /// see [ProductosEmp.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProductosEmp>(_entities[20].properties[9]);

  /// see [ProductosEmp.imagen]
  static final imagen =
      QueryRelationToOne<ProductosEmp, Imagenes>(_entities[20].properties[10]);

  /// see [ProductosEmp.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<ProductosEmp>(_entities[20].properties[11]);

  /// see [ProductosEmp.bitacora]
  static final bitacora =
      QueryRelationToMany<ProductosEmp, Bitacora>(_entities[20].relations[0]);
}

/// [CatalogoProyecto] entity fields to define ObjectBox queries.
class CatalogoProyecto_ {
  /// see [CatalogoProyecto.id]
  static final id =
      QueryIntegerProperty<CatalogoProyecto>(_entities[21].properties[0]);

  /// see [CatalogoProyecto.nombre]
  static final nombre =
      QueryStringProperty<CatalogoProyecto>(_entities[21].properties[1]);

  /// see [CatalogoProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<CatalogoProyecto>(_entities[21].properties[2]);

  /// see [CatalogoProyecto.idDBR]
  static final idDBR =
      QueryStringProperty<CatalogoProyecto>(_entities[21].properties[3]);

  /// see [CatalogoProyecto.tipoProyecto]
  static final tipoProyecto =
      QueryRelationToOne<CatalogoProyecto, TipoProyecto>(
          _entities[21].properties[4]);

  /// see [CatalogoProyecto.activo]
  static final activo =
      QueryBooleanProperty<CatalogoProyecto>(_entities[21].properties[5]);

  /// see [CatalogoProyecto.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<CatalogoProyecto>(_entities[21].properties[6]);

  /// see [CatalogoProyecto.emprendimientos]
  static final emprendimientos =
      QueryRelationToMany<CatalogoProyecto, Emprendimientos>(
          _entities[21].relations[0]);

  /// see [CatalogoProyecto.prodProyecto]
  static final prodProyecto =
      QueryRelationToMany<CatalogoProyecto, ProdProyecto>(
          _entities[21].relations[1]);
}

/// [UnidadMedida] entity fields to define ObjectBox queries.
class UnidadMedida_ {
  /// see [UnidadMedida.id]
  static final id =
      QueryIntegerProperty<UnidadMedida>(_entities[22].properties[0]);

  /// see [UnidadMedida.unidadMedida]
  static final unidadMedida =
      QueryStringProperty<UnidadMedida>(_entities[22].properties[1]);

  /// see [UnidadMedida.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<UnidadMedida>(_entities[22].properties[2]);

  /// see [UnidadMedida.activo]
  static final activo =
      QueryBooleanProperty<UnidadMedida>(_entities[22].properties[3]);

  /// see [UnidadMedida.idDBR]
  static final idDBR =
      QueryStringProperty<UnidadMedida>(_entities[22].properties[4]);

  /// see [UnidadMedida.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<UnidadMedida>(_entities[22].properties[5]);

  /// see [UnidadMedida.productosEmp]
  static final productosEmp = QueryRelationToMany<UnidadMedida, ProductosEmp>(
      _entities[22].relations[0]);

  /// see [UnidadMedida.prodSolicitados]
  static final prodSolicitados =
      QueryRelationToMany<UnidadMedida, ProdSolicitado>(
          _entities[22].relations[1]);

  /// see [UnidadMedida.productosProv]
  static final productosProv = QueryRelationToMany<UnidadMedida, ProductosProv>(
      _entities[22].relations[2]);

  /// see [UnidadMedida.prodVendidos]
  static final prodVendidos = QueryRelationToMany<UnidadMedida, ProdVendidos>(
      _entities[22].relations[3]);
}

/// [Imagenes] entity fields to define ObjectBox queries.
class Imagenes_ {
  /// see [Imagenes.id]
  static final id = QueryIntegerProperty<Imagenes>(_entities[23].properties[0]);

  /// see [Imagenes.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Imagenes>(_entities[23].properties[1]);

  /// see [Imagenes.imagenes]
  static final imagenes =
      QueryStringProperty<Imagenes>(_entities[23].properties[2]);

  /// see [Imagenes.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Imagenes>(_entities[23].properties[3]);

  /// see [Imagenes.nombre]
  static final nombre =
      QueryStringProperty<Imagenes>(_entities[23].properties[4]);

  /// see [Imagenes.path]
  static final path =
      QueryStringProperty<Imagenes>(_entities[23].properties[5]);

  /// see [Imagenes.base64]
  static final base64 =
      QueryStringProperty<Imagenes>(_entities[23].properties[6]);

  /// see [Imagenes.idDBR]
  static final idDBR =
      QueryStringProperty<Imagenes>(_entities[23].properties[7]);

  /// see [Imagenes.emprendedor]
  static final emprendedor =
      QueryRelationToOne<Imagenes, Emprendedores>(_entities[23].properties[8]);

  /// see [Imagenes.emprendimiento]
  static final emprendimiento = QueryRelationToOne<Imagenes, Emprendimientos>(
      _entities[23].properties[9]);

  /// see [Imagenes.tarea]
  static final tarea =
      QueryRelationToOne<Imagenes, Tareas>(_entities[23].properties[10]);

  /// see [Imagenes.productosEmp]
  static final productosEmp =
      QueryRelationToOne<Imagenes, ProductosEmp>(_entities[23].properties[11]);

  /// see [Imagenes.inversion]
  static final inversion =
      QueryRelationToOne<Imagenes, Inversiones>(_entities[23].properties[12]);

  /// see [Imagenes.productosProv]
  static final productosProv =
      QueryRelationToOne<Imagenes, ProductosProv>(_entities[23].properties[13]);

  /// see [Imagenes.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Imagenes>(_entities[23].properties[14]);

  /// see [Imagenes.prodSolicitados]
  static final prodSolicitados =
      QueryRelationToMany<Imagenes, ProdSolicitado>(_entities[23].relations[0]);

  /// see [Imagenes.prodProyecto]
  static final prodProyecto =
      QueryRelationToMany<Imagenes, ProdProyecto>(_entities[23].relations[1]);

  /// see [Imagenes.bitacora]
  static final bitacora =
      QueryRelationToMany<Imagenes, Bitacora>(_entities[23].relations[2]);
}

/// [Inversiones] entity fields to define ObjectBox queries.
class Inversiones_ {
  /// see [Inversiones.id]
  static final id =
      QueryIntegerProperty<Inversiones>(_entities[24].properties[0]);

  /// see [Inversiones.fechaCompra]
  static final fechaCompra =
      QueryIntegerProperty<Inversiones>(_entities[24].properties[1]);

  /// see [Inversiones.porcentajePago]
  static final porcentajePago =
      QueryIntegerProperty<Inversiones>(_entities[24].properties[2]);

  /// see [Inversiones.montoPagar]
  static final montoPagar =
      QueryDoubleProperty<Inversiones>(_entities[24].properties[3]);

  /// see [Inversiones.saldo]
  static final saldo =
      QueryDoubleProperty<Inversiones>(_entities[24].properties[4]);

  /// see [Inversiones.totalInversion]
  static final totalInversion =
      QueryDoubleProperty<Inversiones>(_entities[24].properties[5]);

  /// see [Inversiones.inversionRecibida]
  static final inversionRecibida =
      QueryBooleanProperty<Inversiones>(_entities[24].properties[6]);

  /// see [Inversiones.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Inversiones>(_entities[24].properties[7]);

  /// see [Inversiones.idDBR]
  static final idDBR =
      QueryStringProperty<Inversiones>(_entities[24].properties[8]);

  /// see [Inversiones.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Inversiones, Emprendimientos>(
          _entities[24].properties[9]);

  /// see [Inversiones.estadoInversion]
  static final estadoInversion =
      QueryRelationToOne<Inversiones, EstadoInversion>(
          _entities[24].properties[10]);

  /// see [Inversiones.jornada3]
  static final jornada3 =
      QueryBooleanProperty<Inversiones>(_entities[24].properties[11]);

  /// see [Inversiones.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Inversiones>(_entities[24].properties[12]);

  /// see [Inversiones.imagenFirmaRecibido]
  static final imagenFirmaRecibido =
      QueryRelationToOne<Inversiones, Imagenes>(_entities[24].properties[13]);

  /// see [Inversiones.imagenProductoEntregado]
  static final imagenProductoEntregado =
      QueryRelationToOne<Inversiones, Imagenes>(_entities[24].properties[14]);

  /// see [Inversiones.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Inversiones>(_entities[24].properties[15]);

  /// see [Inversiones.bitacora]
  static final bitacora =
      QueryRelationToMany<Inversiones, Bitacora>(_entities[24].relations[0]);

  /// see [Inversiones.prodSolicitados]
  static final prodSolicitados =
      QueryRelationToMany<Inversiones, ProdSolicitado>(
          _entities[24].relations[1]);

  /// see [Inversiones.inversionXprodCotizados]
  static final inversionXprodCotizados =
      QueryRelationToMany<Inversiones, InversionesXProdCotizados>(
          _entities[24].relations[2]);

  /// see [Inversiones.pagos]
  static final pagos =
      QueryRelationToMany<Inversiones, Pagos>(_entities[24].relations[3]);
}

/// [ProdSolicitado] entity fields to define ObjectBox queries.
class ProdSolicitado_ {
  /// see [ProdSolicitado.id]
  static final id =
      QueryIntegerProperty<ProdSolicitado>(_entities[25].properties[0]);

  /// see [ProdSolicitado.idInversion]
  static final idInversion =
      QueryIntegerProperty<ProdSolicitado>(_entities[25].properties[1]);

  /// see [ProdSolicitado.producto]
  static final producto =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[2]);

  /// see [ProdSolicitado.marcaSugerida]
  static final marcaSugerida =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[3]);

  /// see [ProdSolicitado.descripcion]
  static final descripcion =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[4]);

  /// see [ProdSolicitado.proveedorSugerido]
  static final proveedorSugerido =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[5]);

  /// see [ProdSolicitado.cantidad]
  static final cantidad =
      QueryIntegerProperty<ProdSolicitado>(_entities[25].properties[6]);

  /// see [ProdSolicitado.costoEstimado]
  static final costoEstimado =
      QueryDoubleProperty<ProdSolicitado>(_entities[25].properties[7]);

  /// see [ProdSolicitado.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProdSolicitado>(_entities[25].properties[8]);

  /// see [ProdSolicitado.idDBR]
  static final idDBR =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[9]);

  /// see [ProdSolicitado.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProdSolicitado, UnidadMedida>(
      _entities[25].properties[10]);

  /// see [ProdSolicitado.tipoEmpaques]
  static final tipoEmpaques = QueryRelationToOne<ProdSolicitado, TipoEmpaques>(
      _entities[25].properties[11]);

  /// see [ProdSolicitado.imagen]
  static final imagen = QueryRelationToOne<ProdSolicitado, Imagenes>(
      _entities[25].properties[12]);

  /// see [ProdSolicitado.inversion]
  static final inversion = QueryRelationToOne<ProdSolicitado, Inversiones>(
      _entities[25].properties[13]);

  /// see [ProdSolicitado.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProdSolicitado>(_entities[25].properties[14]);

  /// see [ProdSolicitado.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<ProdSolicitado>(_entities[25].properties[15]);

  /// see [ProdSolicitado.familiaInversion]
  static final familiaInversion =
      QueryRelationToOne<ProdSolicitado, FamiliaInversion>(
          _entities[25].properties[16]);

  /// see [ProdSolicitado.bitacora]
  static final bitacora =
      QueryRelationToMany<ProdSolicitado, Bitacora>(_entities[25].relations[0]);
}

/// [ProdVendidos] entity fields to define ObjectBox queries.
class ProdVendidos_ {
  /// see [ProdVendidos.id]
  static final id =
      QueryIntegerProperty<ProdVendidos>(_entities[26].properties[0]);

  /// see [ProdVendidos.cantVendida]
  static final cantVendida =
      QueryIntegerProperty<ProdVendidos>(_entities[26].properties[1]);

  /// see [ProdVendidos.subtotal]
  static final subtotal =
      QueryDoubleProperty<ProdVendidos>(_entities[26].properties[2]);

  /// see [ProdVendidos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProdVendidos>(_entities[26].properties[3]);

  /// see [ProdVendidos.idDBR]
  static final idDBR =
      QueryStringProperty<ProdVendidos>(_entities[26].properties[4]);

  /// see [ProdVendidos.productoEmp]
  static final productoEmp = QueryRelationToOne<ProdVendidos, ProductosEmp>(
      _entities[26].properties[5]);

  /// see [ProdVendidos.precioVenta]
  static final precioVenta =
      QueryDoubleProperty<ProdVendidos>(_entities[26].properties[6]);

  /// see [ProdVendidos.venta]
  static final venta =
      QueryRelationToOne<ProdVendidos, Ventas>(_entities[26].properties[7]);

  /// see [ProdVendidos.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProdVendidos>(_entities[26].properties[8]);

  /// see [ProdVendidos.nombreProd]
  static final nombreProd =
      QueryStringProperty<ProdVendidos>(_entities[26].properties[9]);

  /// see [ProdVendidos.descripcion]
  static final descripcion =
      QueryStringProperty<ProdVendidos>(_entities[26].properties[10]);

  /// see [ProdVendidos.costo]
  static final costo =
      QueryDoubleProperty<ProdVendidos>(_entities[26].properties[11]);

  /// see [ProdVendidos.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProdVendidos, UnidadMedida>(
      _entities[26].properties[12]);

  /// see [ProdVendidos.postEmiWeb]
  static final postEmiWeb =
      QueryBooleanProperty<ProdVendidos>(_entities[26].properties[13]);

  /// see [ProdVendidos.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<ProdVendidos>(_entities[26].properties[14]);

  /// see [ProdVendidos.bitacora]
  static final bitacora =
      QueryRelationToMany<ProdVendidos, Bitacora>(_entities[26].relations[0]);
}

/// [EstadoInversion] entity fields to define ObjectBox queries.
class EstadoInversion_ {
  /// see [EstadoInversion.id]
  static final id =
      QueryIntegerProperty<EstadoInversion>(_entities[27].properties[0]);

  /// see [EstadoInversion.estado]
  static final estado =
      QueryStringProperty<EstadoInversion>(_entities[27].properties[1]);

  /// see [EstadoInversion.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<EstadoInversion>(_entities[27].properties[2]);

  /// see [EstadoInversion.idDBR]
  static final idDBR =
      QueryStringProperty<EstadoInversion>(_entities[27].properties[3]);

  /// see [EstadoInversion.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<EstadoInversion>(_entities[27].properties[4]);

  /// see [EstadoInversion.emprendimientos]
  static final emprendimientos =
      QueryRelationToMany<EstadoInversion, Inversiones>(
          _entities[27].relations[0]);
}

/// [TipoEmpaques] entity fields to define ObjectBox queries.
class TipoEmpaques_ {
  /// see [TipoEmpaques.id]
  static final id =
      QueryIntegerProperty<TipoEmpaques>(_entities[28].properties[0]);

  /// see [TipoEmpaques.tipo]
  static final tipo =
      QueryStringProperty<TipoEmpaques>(_entities[28].properties[1]);

  /// see [TipoEmpaques.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoEmpaques>(_entities[28].properties[2]);

  /// see [TipoEmpaques.activo]
  static final activo =
      QueryBooleanProperty<TipoEmpaques>(_entities[28].properties[3]);

  /// see [TipoEmpaques.idDBR]
  static final idDBR =
      QueryStringProperty<TipoEmpaques>(_entities[28].properties[4]);

  /// see [TipoEmpaques.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<TipoEmpaques>(_entities[28].properties[5]);

  /// see [TipoEmpaques.prodSolicitados]
  static final prodSolicitados =
      QueryRelationToMany<TipoEmpaques, ProdSolicitado>(
          _entities[28].relations[0]);

  /// see [TipoEmpaques.productosProyecto]
  static final productosProyecto =
      QueryRelationToMany<TipoEmpaques, ProdProyecto>(
          _entities[28].relations[1]);
}

/// [ProdCotizados] entity fields to define ObjectBox queries.
class ProdCotizados_ {
  /// see [ProdCotizados.id]
  static final id =
      QueryIntegerProperty<ProdCotizados>(_entities[29].properties[0]);

  /// see [ProdCotizados.cantidad]
  static final cantidad =
      QueryIntegerProperty<ProdCotizados>(_entities[29].properties[1]);

  /// see [ProdCotizados.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProdCotizados>(_entities[29].properties[2]);

  /// see [ProdCotizados.idDBR]
  static final idDBR =
      QueryStringProperty<ProdCotizados>(_entities[29].properties[3]);

  /// see [ProdCotizados.costoTotal]
  static final costoTotal =
      QueryDoubleProperty<ProdCotizados>(_entities[29].properties[4]);

  /// see [ProdCotizados.productosProv]
  static final productosProv = QueryRelationToOne<ProdCotizados, ProductosProv>(
      _entities[29].properties[5]);

  /// see [ProdCotizados.inversionXprodCotizados]
  static final inversionXprodCotizados =
      QueryRelationToOne<ProdCotizados, InversionesXProdCotizados>(
          _entities[29].properties[6]);

  /// see [ProdCotizados.aceptado]
  static final aceptado =
      QueryBooleanProperty<ProdCotizados>(_entities[29].properties[7]);

  /// see [ProdCotizados.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProdCotizados>(_entities[29].properties[8]);

  /// see [ProdCotizados.costoUnitario]
  static final costoUnitario =
      QueryDoubleProperty<ProdCotizados>(_entities[29].properties[9]);

  /// see [ProdCotizados.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<ProdCotizados>(_entities[29].properties[10]);

  /// see [ProdCotizados.bitacora]
  static final bitacora =
      QueryRelationToMany<ProdCotizados, Bitacora>(_entities[29].relations[0]);
}

/// [ProductosProv] entity fields to define ObjectBox queries.
class ProductosProv_ {
  /// see [ProductosProv.id]
  static final id =
      QueryIntegerProperty<ProductosProv>(_entities[30].properties[0]);

  /// see [ProductosProv.nombre]
  static final nombre =
      QueryStringProperty<ProductosProv>(_entities[30].properties[1]);

  /// see [ProductosProv.descripcion]
  static final descripcion =
      QueryStringProperty<ProductosProv>(_entities[30].properties[2]);

  /// see [ProductosProv.marca]
  static final marca =
      QueryStringProperty<ProductosProv>(_entities[30].properties[3]);

  /// see [ProductosProv.costo]
  static final costo =
      QueryDoubleProperty<ProductosProv>(_entities[30].properties[4]);

  /// see [ProductosProv.tiempoEntrega]
  static final tiempoEntrega =
      QueryIntegerProperty<ProductosProv>(_entities[30].properties[5]);

  /// see [ProductosProv.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProductosProv>(_entities[30].properties[6]);

  /// see [ProductosProv.archivado]
  static final archivado =
      QueryBooleanProperty<ProductosProv>(_entities[30].properties[7]);

  /// see [ProductosProv.idDBR]
  static final idDBR =
      QueryStringProperty<ProductosProv>(_entities[30].properties[8]);

  /// see [ProductosProv.proveedor]
  static final proveedor = QueryRelationToOne<ProductosProv, Proveedores>(
      _entities[30].properties[9]);

  /// see [ProductosProv.imagen]
  static final imagen =
      QueryRelationToOne<ProductosProv, Imagenes>(_entities[30].properties[10]);

  /// see [ProductosProv.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProductosProv>(_entities[30].properties[11]);

  /// see [ProductosProv.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProductosProv, UnidadMedida>(
      _entities[30].properties[12]);

  /// see [ProductosProv.prodCotizados]
  static final prodCotizados =
      QueryRelationToMany<ProductosProv, ProdCotizados>(
          _entities[30].relations[0]);
}

/// [InversionesXProdCotizados] entity fields to define ObjectBox queries.
class InversionesXProdCotizados_ {
  /// see [InversionesXProdCotizados.id]
  static final id = QueryIntegerProperty<InversionesXProdCotizados>(
      _entities[31].properties[0]);

  /// see [InversionesXProdCotizados.fechaRegistro]
  static final fechaRegistro = QueryIntegerProperty<InversionesXProdCotizados>(
      _entities[31].properties[1]);

  /// see [InversionesXProdCotizados.idDBR]
  static final idDBR = QueryStringProperty<InversionesXProdCotizados>(
      _entities[31].properties[2]);

  /// see [InversionesXProdCotizados.inversion]
  static final inversion =
      QueryRelationToOne<InversionesXProdCotizados, Inversiones>(
          _entities[31].properties[3]);

  /// see [InversionesXProdCotizados.aceptado]
  static final aceptado = QueryBooleanProperty<InversionesXProdCotizados>(
      _entities[31].properties[4]);

  /// see [InversionesXProdCotizados.idEmiWeb]
  static final idEmiWeb = QueryStringProperty<InversionesXProdCotizados>(
      _entities[31].properties[5]);

  /// see [InversionesXProdCotizados.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<InversionesXProdCotizados>(
          _entities[31].properties[6]);

  /// see [InversionesXProdCotizados.prodCotizados]
  static final prodCotizados =
      QueryRelationToMany<InversionesXProdCotizados, ProdCotizados>(
          _entities[31].relations[0]);

  /// see [InversionesXProdCotizados.bitacora]
  static final bitacora =
      QueryRelationToMany<InversionesXProdCotizados, Bitacora>(
          _entities[31].relations[1]);
}

/// [Pagos] entity fields to define ObjectBox queries.
class Pagos_ {
  /// see [Pagos.id]
  static final id = QueryIntegerProperty<Pagos>(_entities[32].properties[0]);

  /// see [Pagos.montoAbonado]
  static final montoAbonado =
      QueryDoubleProperty<Pagos>(_entities[32].properties[1]);

  /// see [Pagos.fechaMovimiento]
  static final fechaMovimiento =
      QueryIntegerProperty<Pagos>(_entities[32].properties[2]);

  /// see [Pagos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Pagos>(_entities[32].properties[3]);

  /// see [Pagos.idDBR]
  static final idDBR = QueryStringProperty<Pagos>(_entities[32].properties[4]);

  /// see [Pagos.inversion]
  static final inversion =
      QueryRelationToOne<Pagos, Inversiones>(_entities[32].properties[5]);

  /// see [Pagos.usuario]
  static final usuario =
      QueryRelationToOne<Pagos, Usuarios>(_entities[32].properties[6]);

  /// see [Pagos.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<Pagos>(_entities[32].properties[7]);

  /// see [Pagos.idEmprendimiento]
  static final idEmprendimiento =
      QueryIntegerProperty<Pagos>(_entities[32].properties[8]);

  /// see [Pagos.bitacora]
  static final bitacora =
      QueryRelationToMany<Pagos, Bitacora>(_entities[32].relations[0]);
}

/// [PorcentajeAvance] entity fields to define ObjectBox queries.
class PorcentajeAvance_ {
  /// see [PorcentajeAvance.id]
  static final id =
      QueryIntegerProperty<PorcentajeAvance>(_entities[33].properties[0]);

  /// see [PorcentajeAvance.porcentajeAvance]
  static final porcentajeAvance =
      QueryStringProperty<PorcentajeAvance>(_entities[33].properties[1]);

  /// see [PorcentajeAvance.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<PorcentajeAvance>(_entities[33].properties[2]);

  /// see [PorcentajeAvance.idDBR]
  static final idDBR =
      QueryStringProperty<PorcentajeAvance>(_entities[33].properties[3]);

  /// see [PorcentajeAvance.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<PorcentajeAvance>(_entities[33].properties[4]);
}

/// [ProdProyecto] entity fields to define ObjectBox queries.
class ProdProyecto_ {
  /// see [ProdProyecto.id]
  static final id =
      QueryIntegerProperty<ProdProyecto>(_entities[34].properties[0]);

  /// see [ProdProyecto.producto]
  static final producto =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[1]);

  /// see [ProdProyecto.marcaSugerida]
  static final marcaSugerida =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[2]);

  /// see [ProdProyecto.descripcion]
  static final descripcion =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[3]);

  /// see [ProdProyecto.proveedorSugerido]
  static final proveedorSugerido =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[4]);

  /// see [ProdProyecto.cantidad]
  static final cantidad =
      QueryIntegerProperty<ProdProyecto>(_entities[34].properties[5]);

  /// see [ProdProyecto.costoEstimado]
  static final costoEstimado =
      QueryDoubleProperty<ProdProyecto>(_entities[34].properties[6]);

  /// see [ProdProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProdProyecto>(_entities[34].properties[7]);

  /// see [ProdProyecto.idDBR]
  static final idDBR =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[8]);

  /// see [ProdProyecto.catalogoProyecto]
  static final catalogoProyecto =
      QueryRelationToOne<ProdProyecto, CatalogoProyecto>(
          _entities[34].properties[9]);

  /// see [ProdProyecto.imagen]
  static final imagen =
      QueryRelationToOne<ProdProyecto, Imagenes>(_entities[34].properties[10]);

  /// see [ProdProyecto.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<ProdProyecto>(_entities[34].properties[11]);

  /// see [ProdProyecto.tipoEmpaque]
  static final tipoEmpaque = QueryRelationToOne<ProdProyecto, TipoEmpaques>(
      _entities[34].properties[12]);

  /// see [ProdProyecto.familiaInversion]
  static final familiaInversion =
      QueryRelationToOne<ProdProyecto, FamiliaInversion>(
          _entities[34].properties[13]);
}

/// [TipoProyecto] entity fields to define ObjectBox queries.
class TipoProyecto_ {
  /// see [TipoProyecto.id]
  static final id =
      QueryIntegerProperty<TipoProyecto>(_entities[35].properties[0]);

  /// see [TipoProyecto.tipoProyecto]
  static final tipoProyecto =
      QueryStringProperty<TipoProyecto>(_entities[35].properties[1]);

  /// see [TipoProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoProyecto>(_entities[35].properties[2]);

  /// see [TipoProyecto.activo]
  static final activo =
      QueryBooleanProperty<TipoProyecto>(_entities[35].properties[3]);

  /// see [TipoProyecto.idDBR]
  static final idDBR =
      QueryStringProperty<TipoProyecto>(_entities[35].properties[4]);

  /// see [TipoProyecto.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<TipoProyecto>(_entities[35].properties[5]);

  /// see [TipoProyecto.categoriasProyecto]
  static final categoriasProyecto =
      QueryRelationToMany<TipoProyecto, CatalogoProyecto>(
          _entities[35].relations[0]);
}

/// [FamiliaInversion] entity fields to define ObjectBox queries.
class FamiliaInversion_ {
  /// see [FamiliaInversion.id]
  static final id =
      QueryIntegerProperty<FamiliaInversion>(_entities[36].properties[0]);

  /// see [FamiliaInversion.familiaInversion]
  static final familiaInversion =
      QueryStringProperty<FamiliaInversion>(_entities[36].properties[1]);

  /// see [FamiliaInversion.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<FamiliaInversion>(_entities[36].properties[2]);

  /// see [FamiliaInversion.activo]
  static final activo =
      QueryBooleanProperty<FamiliaInversion>(_entities[36].properties[3]);

  /// see [FamiliaInversion.idDBR]
  static final idDBR =
      QueryStringProperty<FamiliaInversion>(_entities[36].properties[4]);

  /// see [FamiliaInversion.idEmiWeb]
  static final idEmiWeb =
      QueryStringProperty<FamiliaInversion>(_entities[36].properties[5]);
}

/// [Cliente] entity fields to define ObjectBox queries.
class Cliente_ {
  /// see [Cliente.id]
  static final id = QueryIntegerProperty<Cliente>(_entities[37].properties[0]);

  /// see [Cliente.nombre]
  static final nombre =
      QueryStringProperty<Cliente>(_entities[37].properties[1]);

  /// see [Cliente.apellidoP]
  static final apellidoP =
      QueryStringProperty<Cliente>(_entities[37].properties[2]);

  /// see [Cliente.apellidoM]
  static final apellidoM =
      QueryStringProperty<Cliente>(_entities[37].properties[3]);

  /// see [Cliente.telefono]
  static final telefono =
      QueryStringProperty<Cliente>(_entities[37].properties[4]);

  /// see [Cliente.celular]
  static final celular =
      QueryStringProperty<Cliente>(_entities[37].properties[5]);

  /// see [Cliente.correo]
  static final correo =
      QueryStringProperty<Cliente>(_entities[37].properties[6]);

  /// see [Cliente.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Cliente>(_entities[37].properties[7]);

  /// see [Cliente.idDBR]
  static final idDBR =
      QueryStringProperty<Cliente>(_entities[37].properties[8]);

  /// see [Cliente.imagen]
  static final imagen =
      QueryRelationToOne<Cliente, Imagenes>(_entities[37].properties[9]);

  /// see [Cliente.rfc]
  static final rfc = QueryStringProperty<Cliente>(_entities[37].properties[10]);

  /// see [Cliente.domicilio]
  static final domicilio =
      QueryStringProperty<Cliente>(_entities[37].properties[11]);
}

/// [Vehiculo] entity fields to define ObjectBox queries.
class Vehiculo_ {
  /// see [Vehiculo.id]
  static final id = QueryIntegerProperty<Vehiculo>(_entities[38].properties[0]);

  /// see [Vehiculo.marca]
  static final marca =
      QueryStringProperty<Vehiculo>(_entities[38].properties[1]);

  /// see [Vehiculo.modelo]
  static final modelo =
      QueryStringProperty<Vehiculo>(_entities[38].properties[2]);

  /// see [Vehiculo.anio]
  static final anio =
      QueryStringProperty<Vehiculo>(_entities[38].properties[3]);

  /// see [Vehiculo.vin]
  static final vin = QueryStringProperty<Vehiculo>(_entities[38].properties[4]);

  /// see [Vehiculo.placas]
  static final placas =
      QueryStringProperty<Vehiculo>(_entities[38].properties[5]);

  /// see [Vehiculo.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Vehiculo>(_entities[38].properties[6]);

  /// see [Vehiculo.idDBR]
  static final idDBR =
      QueryStringProperty<Vehiculo>(_entities[38].properties[7]);

  /// see [Vehiculo.cliente]
  static final cliente =
      QueryRelationToOne<Vehiculo, Usuarios>(_entities[38].properties[8]);

  /// see [Vehiculo.motor]
  static final motor =
      QueryStringProperty<Vehiculo>(_entities[38].properties[9]);

  /// see [Vehiculo.color]
  static final color =
      QueryStringProperty<Vehiculo>(_entities[38].properties[10]);

  /// see [Vehiculo.imagen]
  static final imagen =
      QueryStringProperty<Vehiculo>(_entities[38].properties[11]);

  /// see [Vehiculo.path]
  static final path =
      QueryStringProperty<Vehiculo>(_entities[38].properties[12]);
}

/// [FormaPago] entity fields to define ObjectBox queries.
class FormaPago_ {
  /// see [FormaPago.id]
  static final id =
      QueryIntegerProperty<FormaPago>(_entities[39].properties[0]);

  /// see [FormaPago.formaPago]
  static final formaPago =
      QueryStringProperty<FormaPago>(_entities[39].properties[1]);

  /// see [FormaPago.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<FormaPago>(_entities[39].properties[2]);

  /// see [FormaPago.idDBR]
  static final idDBR =
      QueryStringProperty<FormaPago>(_entities[39].properties[3]);
}

/// [OrdenTrabajo] entity fields to define ObjectBox queries.
class OrdenTrabajo_ {
  /// see [OrdenTrabajo.id]
  static final id =
      QueryIntegerProperty<OrdenTrabajo>(_entities[40].properties[0]);

  /// see [OrdenTrabajo.fechaOrden]
  static final fechaOrden =
      QueryIntegerProperty<OrdenTrabajo>(_entities[40].properties[1]);

  /// see [OrdenTrabajo.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<OrdenTrabajo>(_entities[40].properties[2]);

  /// see [OrdenTrabajo.idDBR]
  static final idDBR =
      QueryStringProperty<OrdenTrabajo>(_entities[40].properties[3]);

  /// see [OrdenTrabajo.cliente]
  static final cliente =
      QueryRelationToOne<OrdenTrabajo, Usuarios>(_entities[40].properties[4]);

  /// see [OrdenTrabajo.vehiculo]
  static final vehiculo =
      QueryRelationToOne<OrdenTrabajo, Vehiculo>(_entities[40].properties[5]);

  /// see [OrdenTrabajo.formaPago]
  static final formaPago =
      QueryRelationToOne<OrdenTrabajo, FormaPago>(_entities[40].properties[6]);

  /// see [OrdenTrabajo.gasolina]
  static final gasolina =
      QueryStringProperty<OrdenTrabajo>(_entities[40].properties[7]);

  /// see [OrdenTrabajo.kilometrajeMillaje]
  static final kilometrajeMillaje =
      QueryStringProperty<OrdenTrabajo>(_entities[40].properties[8]);

  /// see [OrdenTrabajo.descripcionFalla]
  static final descripcionFalla =
      QueryStringProperty<OrdenTrabajo>(_entities[40].properties[9]);

  /// see [OrdenTrabajo.estatus]
  static final estatus =
      QueryRelationToOne<OrdenTrabajo, Estatus>(_entities[40].properties[10]);

  /// see [OrdenTrabajo.asesor]
  static final asesor =
      QueryRelationToOne<OrdenTrabajo, Usuarios>(_entities[40].properties[11]);

  /// see [OrdenTrabajo.completado]
  static final completado =
      QueryBooleanProperty<OrdenTrabajo>(_entities[40].properties[12]);

  /// see [OrdenTrabajo.ordenServicio]
  static final ordenServicio = QueryRelationToOne<OrdenTrabajo, OrdenServicio>(
      _entities[40].properties[13]);

  /// see [OrdenTrabajo.revision]
  static final revision =
      QueryRelationToOne<OrdenTrabajo, Revision>(_entities[40].properties[14]);
}

/// [Observaciones] entity fields to define ObjectBox queries.
class Observaciones_ {
  /// see [Observaciones.id]
  static final id =
      QueryIntegerProperty<Observaciones>(_entities[41].properties[0]);

  /// see [Observaciones.fechaObservacion]
  static final fechaObservacion =
      QueryIntegerProperty<Observaciones>(_entities[41].properties[1]);

  /// see [Observaciones.respuestaP1]
  static final respuestaP1 =
      QueryStringProperty<Observaciones>(_entities[41].properties[2]);

  /// see [Observaciones.respuestaP2]
  static final respuestaP2 =
      QueryStringProperty<Observaciones>(_entities[41].properties[3]);

  /// see [Observaciones.respuestaP3]
  static final respuestaP3 =
      QueryStringProperty<Observaciones>(_entities[41].properties[4]);

  /// see [Observaciones.respuestaP4]
  static final respuestaP4 =
      QueryStringProperty<Observaciones>(_entities[41].properties[5]);

  /// see [Observaciones.respuestaP5]
  static final respuestaP5 =
      QueryStringProperty<Observaciones>(_entities[41].properties[6]);

  /// see [Observaciones.respuestaP6]
  static final respuestaP6 =
      QueryStringProperty<Observaciones>(_entities[41].properties[7]);

  /// see [Observaciones.respuestaP7]
  static final respuestaP7 =
      QueryStringProperty<Observaciones>(_entities[41].properties[8]);

  /// see [Observaciones.respuestaP8]
  static final respuestaP8 =
      QueryStringProperty<Observaciones>(_entities[41].properties[9]);

  /// see [Observaciones.respuestaP9]
  static final respuestaP9 =
      QueryStringProperty<Observaciones>(_entities[41].properties[10]);

  /// see [Observaciones.respuestaP10]
  static final respuestaP10 =
      QueryStringProperty<Observaciones>(_entities[41].properties[11]);

  /// see [Observaciones.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Observaciones>(_entities[41].properties[12]);

  /// see [Observaciones.idDBR]
  static final idDBR =
      QueryStringProperty<Observaciones>(_entities[41].properties[13]);

  /// see [Observaciones.ordenTrabajo]
  static final ordenTrabajo = QueryRelationToOne<Observaciones, OrdenTrabajo>(
      _entities[41].properties[14]);

  /// see [Observaciones.nombreAsesor]
  static final nombreAsesor =
      QueryStringProperty<Observaciones>(_entities[41].properties[15]);
}

/// [Electrico] entity fields to define ObjectBox queries.
class Electrico_ {
  /// see [Electrico.id]
  static final id =
      QueryIntegerProperty<Electrico>(_entities[42].properties[0]);

  /// see [Electrico.terminalesDeBaterias]
  static final terminalesDeBaterias =
      QueryStringProperty<Electrico>(_entities[42].properties[1]);

  /// see [Electrico.terminalesDeBateriasObservaciones]
  static final terminalesDeBateriasObservaciones =
      QueryStringProperty<Electrico>(_entities[42].properties[2]);

  /// see [Electrico.lucesFrenos]
  static final lucesFrenos =
      QueryStringProperty<Electrico>(_entities[42].properties[3]);

  /// see [Electrico.lucesFrenosObservaciones]
  static final lucesFrenosObservaciones =
      QueryStringProperty<Electrico>(_entities[42].properties[4]);

  /// see [Electrico.lucesDireccionales]
  static final lucesDireccionales =
      QueryStringProperty<Electrico>(_entities[42].properties[5]);

  /// see [Electrico.lucesDireccionalesObservaciones]
  static final lucesDireccionalesObservaciones =
      QueryStringProperty<Electrico>(_entities[42].properties[6]);

  /// see [Electrico.lucesCuartos]
  static final lucesCuartos =
      QueryStringProperty<Electrico>(_entities[42].properties[7]);

  /// see [Electrico.lucesCuartosObservaciones]
  static final lucesCuartosObservaciones =
      QueryStringProperty<Electrico>(_entities[42].properties[8]);

  /// see [Electrico.checkEngine]
  static final checkEngine =
      QueryStringProperty<Electrico>(_entities[42].properties[9]);

  /// see [Electrico.checkEngineObservaciones]
  static final checkEngineObservaciones =
      QueryStringProperty<Electrico>(_entities[42].properties[10]);

  /// see [Electrico.completado]
  static final completado =
      QueryBooleanProperty<Electrico>(_entities[42].properties[11]);

  /// see [Electrico.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Electrico>(_entities[42].properties[12]);

  /// see [Electrico.idDBR]
  static final idDBR =
      QueryStringProperty<Electrico>(_entities[42].properties[13]);

  /// see [Electrico.revision]
  static final revision =
      QueryRelationToOne<Electrico, Revision>(_entities[42].properties[14]);
}

/// [Fluidos] entity fields to define ObjectBox queries.
class Fluidos_ {
  /// see [Fluidos.id]
  static final id = QueryIntegerProperty<Fluidos>(_entities[43].properties[0]);

  /// see [Fluidos.atf]
  static final atf = QueryStringProperty<Fluidos>(_entities[43].properties[1]);

  /// see [Fluidos.atfObservaciones]
  static final atfObservaciones =
      QueryStringProperty<Fluidos>(_entities[43].properties[2]);

  /// see [Fluidos.power]
  static final power =
      QueryStringProperty<Fluidos>(_entities[43].properties[3]);

  /// see [Fluidos.powerObservaciones]
  static final powerObservaciones =
      QueryStringProperty<Fluidos>(_entities[43].properties[4]);

  /// see [Fluidos.frenos]
  static final frenos =
      QueryStringProperty<Fluidos>(_entities[43].properties[5]);

  /// see [Fluidos.frenosObservaciones]
  static final frenosObservaciones =
      QueryStringProperty<Fluidos>(_entities[43].properties[6]);

  /// see [Fluidos.anticongelante]
  static final anticongelante =
      QueryStringProperty<Fluidos>(_entities[43].properties[7]);

  /// see [Fluidos.anticongelanteObservaciones]
  static final anticongelanteObservaciones =
      QueryStringProperty<Fluidos>(_entities[43].properties[8]);

  /// see [Fluidos.wipers]
  static final wipers =
      QueryStringProperty<Fluidos>(_entities[43].properties[9]);

  /// see [Fluidos.wipersObservaciones]
  static final wipersObservaciones =
      QueryStringProperty<Fluidos>(_entities[43].properties[10]);

  /// see [Fluidos.completado]
  static final completado =
      QueryBooleanProperty<Fluidos>(_entities[43].properties[11]);

  /// see [Fluidos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Fluidos>(_entities[43].properties[12]);

  /// see [Fluidos.idDBR]
  static final idDBR =
      QueryStringProperty<Fluidos>(_entities[43].properties[13]);

  /// see [Fluidos.revision]
  static final revision =
      QueryRelationToOne<Fluidos, Revision>(_entities[43].properties[14]);
}

/// [Frenos] entity fields to define ObjectBox queries.
class Frenos_ {
  /// see [Frenos.id]
  static final id = QueryIntegerProperty<Frenos>(_entities[44].properties[0]);

  /// see [Frenos.balatasDelanteras]
  static final balatasDelanteras =
      QueryStringProperty<Frenos>(_entities[44].properties[1]);

  /// see [Frenos.balatasDelanterasObservaciones]
  static final balatasDelanterasObservaciones =
      QueryStringProperty<Frenos>(_entities[44].properties[2]);

  /// see [Frenos.balatasTraserasDiscoTambor]
  static final balatasTraserasDiscoTambor =
      QueryStringProperty<Frenos>(_entities[44].properties[3]);

  /// see [Frenos.balatasTraserasDiscoTamborObservaciones]
  static final balatasTraserasDiscoTamborObservaciones =
      QueryStringProperty<Frenos>(_entities[44].properties[4]);

  /// see [Frenos.manguerasLineas]
  static final manguerasLineas =
      QueryStringProperty<Frenos>(_entities[44].properties[5]);

  /// see [Frenos.manguerasLineasObservaciones]
  static final manguerasLineasObservaciones =
      QueryStringProperty<Frenos>(_entities[44].properties[6]);

  /// see [Frenos.cilindroMaestro]
  static final cilindroMaestro =
      QueryStringProperty<Frenos>(_entities[44].properties[7]);

  /// see [Frenos.cilindroMaestroObservaciones]
  static final cilindroMaestroObservaciones =
      QueryStringProperty<Frenos>(_entities[44].properties[8]);

  /// see [Frenos.birlosYTuercas]
  static final birlosYTuercas =
      QueryStringProperty<Frenos>(_entities[44].properties[9]);

  /// see [Frenos.birlosYTuercasObservaciones]
  static final birlosYTuercasObservaciones =
      QueryStringProperty<Frenos>(_entities[44].properties[10]);

  /// see [Frenos.completado]
  static final completado =
      QueryBooleanProperty<Frenos>(_entities[44].properties[11]);

  /// see [Frenos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Frenos>(_entities[44].properties[12]);

  /// see [Frenos.idDBR]
  static final idDBR =
      QueryStringProperty<Frenos>(_entities[44].properties[13]);

  /// see [Frenos.revision]
  static final revision =
      QueryRelationToOne<Frenos, Revision>(_entities[44].properties[14]);
}

/// [Motor] entity fields to define ObjectBox queries.
class Motor_ {
  /// see [Motor.id]
  static final id = QueryIntegerProperty<Motor>(_entities[45].properties[0]);

  /// see [Motor.aceite]
  static final aceite = QueryStringProperty<Motor>(_entities[45].properties[1]);

  /// see [Motor.aceiteObservaciones]
  static final aceiteObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[2]);

  /// see [Motor.cpoDeAceleracion]
  static final cpoDeAceleracion =
      QueryStringProperty<Motor>(_entities[45].properties[3]);

  /// see [Motor.cpoDeAceleracionObservaciones]
  static final cpoDeAceleracionObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[4]);

  /// see [Motor.bujias]
  static final bujias = QueryStringProperty<Motor>(_entities[45].properties[5]);

  /// see [Motor.bujiasObservaciones]
  static final bujiasObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[6]);

  /// see [Motor.bandaCadenaDeTiempo]
  static final bandaCadenaDeTiempo =
      QueryStringProperty<Motor>(_entities[45].properties[7]);

  /// see [Motor.bandaCadenaDeTiempoObservaciones]
  static final bandaCadenaDeTiempoObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[8]);

  /// see [Motor.soportes]
  static final soportes =
      QueryStringProperty<Motor>(_entities[45].properties[9]);

  /// see [Motor.soportesObservaciones]
  static final soportesObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[10]);

  /// see [Motor.bandas]
  static final bandas =
      QueryStringProperty<Motor>(_entities[45].properties[11]);

  /// see [Motor.bandasObservaciones]
  static final bandasObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[12]);

  /// see [Motor.mangueras]
  static final mangueras =
      QueryStringProperty<Motor>(_entities[45].properties[13]);

  /// see [Motor.manguerasObservaciones]
  static final manguerasObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[14]);

  /// see [Motor.completado]
  static final completado =
      QueryBooleanProperty<Motor>(_entities[45].properties[15]);

  /// see [Motor.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Motor>(_entities[45].properties[16]);

  /// see [Motor.idDBR]
  static final idDBR = QueryStringProperty<Motor>(_entities[45].properties[17]);

  /// see [Motor.filtroDeAire]
  static final filtroDeAire =
      QueryStringProperty<Motor>(_entities[45].properties[18]);

  /// see [Motor.filtroDeAireObservaciones]
  static final filtroDeAireObservaciones =
      QueryStringProperty<Motor>(_entities[45].properties[19]);

  /// see [Motor.revision]
  static final revision =
      QueryRelationToOne<Motor, Revision>(_entities[45].properties[20]);
}

/// [SuspensionDireccion] entity fields to define ObjectBox queries.
class SuspensionDireccion_ {
  /// see [SuspensionDireccion.id]
  static final id =
      QueryIntegerProperty<SuspensionDireccion>(_entities[46].properties[0]);

  /// see [SuspensionDireccion.rotulaSuperiorIzq]
  static final rotulaSuperiorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[1]);

  /// see [SuspensionDireccion.rotulaSuperiorIzqObservaciones]
  static final rotulaSuperiorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[2]);

  /// see [SuspensionDireccion.rotulaSuperiorDer]
  static final rotulaSuperiorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[3]);

  /// see [SuspensionDireccion.rotulaSuperiorDerObservaciones]
  static final rotulaSuperiorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[4]);

  /// see [SuspensionDireccion.rotulaInferiorIzq]
  static final rotulaInferiorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[5]);

  /// see [SuspensionDireccion.rotulaInferiorIzqObservaciones]
  static final rotulaInferiorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[6]);

  /// see [SuspensionDireccion.rotulaInferiorDer]
  static final rotulaInferiorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[7]);

  /// see [SuspensionDireccion.rotulaInferiorDerObservaciones]
  static final rotulaInferiorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[8]);

  /// see [SuspensionDireccion.bujeHorquillaSuperiorIzq]
  static final bujeHorquillaSuperiorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[9]);

  /// see [SuspensionDireccion.bujeHorquillaSuperiorIzqObservaciones]
  static final bujeHorquillaSuperiorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[10]);

  /// see [SuspensionDireccion.bujeHorquillaSuperiorDer]
  static final bujeHorquillaSuperiorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[11]);

  /// see [SuspensionDireccion.bujeHorquillaSuperiorDerObservaciones]
  static final bujeHorquillaSuperiorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[12]);

  /// see [SuspensionDireccion.bujeHorquillaInferiorIzq]
  static final bujeHorquillaInferiorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[13]);

  /// see [SuspensionDireccion.bujeHorquillaInferiorIzqObservaciones]
  static final bujeHorquillaInferiorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[14]);

  /// see [SuspensionDireccion.bujeHorquillaInferiorDer]
  static final bujeHorquillaInferiorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[15]);

  /// see [SuspensionDireccion.bujeHorquillaInferiorDerObservaciones]
  static final bujeHorquillaInferiorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[16]);

  /// see [SuspensionDireccion.amortiguadorDelanteroIzq]
  static final amortiguadorDelanteroIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[17]);

  /// see [SuspensionDireccion.amortiguadorDelanteroIzqObservaciones]
  static final amortiguadorDelanteroIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[18]);

  /// see [SuspensionDireccion.amortiguadorDelanteroDer]
  static final amortiguadorDelanteroDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[19]);

  /// see [SuspensionDireccion.amortiguadorDelanteroDerObservaciones]
  static final amortiguadorDelanteroDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[20]);

  /// see [SuspensionDireccion.amortiguadorTraseroIzq]
  static final amortiguadorTraseroIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[21]);

  /// see [SuspensionDireccion.amortiguadorTraseroIzqObservaciones]
  static final amortiguadorTraseroIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[22]);

  /// see [SuspensionDireccion.amortiguadorTraseroDer]
  static final amortiguadorTraseroDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[23]);

  /// see [SuspensionDireccion.amortiguadorTraseroDerObservaciones]
  static final amortiguadorTraseroDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[24]);

  /// see [SuspensionDireccion.bujeBarraEstabilizadoraIzq]
  static final bujeBarraEstabilizadoraIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[25]);

  /// see [SuspensionDireccion.bujeBarraEstabilizadoraIzqObservaciones]
  static final bujeBarraEstabilizadoraIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[26]);

  /// see [SuspensionDireccion.bujeBarraEstabilizadoraDer]
  static final bujeBarraEstabilizadoraDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[27]);

  /// see [SuspensionDireccion.bujeBarraEstabilizadoraDerObservaciones]
  static final bujeBarraEstabilizadoraDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[28]);

  /// see [SuspensionDireccion.linkKitDelanteroIzq]
  static final linkKitDelanteroIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[29]);

  /// see [SuspensionDireccion.linkKitDelanteroIzqObservaciones]
  static final linkKitDelanteroIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[30]);

  /// see [SuspensionDireccion.linkKitDelanteroDer]
  static final linkKitDelanteroDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[31]);

  /// see [SuspensionDireccion.linkKitDelanteroDerObservaciones]
  static final linkKitDelanteroDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[32]);

  /// see [SuspensionDireccion.linkKitTraseroIzq]
  static final linkKitTraseroIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[33]);

  /// see [SuspensionDireccion.linkKitTraseroIzqObservaciones]
  static final linkKitTraseroIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[34]);

  /// see [SuspensionDireccion.linkKitTraseroDer]
  static final linkKitTraseroDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[35]);

  /// see [SuspensionDireccion.linkKitTraseroDerObservaciones]
  static final linkKitTraseroDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[36]);

  /// see [SuspensionDireccion.terminalInteriorIzq]
  static final terminalInteriorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[37]);

  /// see [SuspensionDireccion.terminalInteriorIzqObservaciones]
  static final terminalInteriorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[38]);

  /// see [SuspensionDireccion.terminalInteriorDer]
  static final terminalInteriorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[39]);

  /// see [SuspensionDireccion.terminalInteriorDerObservaciones]
  static final terminalInteriorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[40]);

  /// see [SuspensionDireccion.terminalExteriorIzq]
  static final terminalExteriorIzq =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[41]);

  /// see [SuspensionDireccion.terminalExteriorIzqObservaciones]
  static final terminalExteriorIzqObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[42]);

  /// see [SuspensionDireccion.terminalExteriorDer]
  static final terminalExteriorDer =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[43]);

  /// see [SuspensionDireccion.terminalExteriorDerObservaciones]
  static final terminalExteriorDerObservaciones =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[44]);

  /// see [SuspensionDireccion.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<SuspensionDireccion>(_entities[46].properties[45]);

  /// see [SuspensionDireccion.idDBR]
  static final idDBR =
      QueryStringProperty<SuspensionDireccion>(_entities[46].properties[46]);

  /// see [SuspensionDireccion.completado]
  static final completado =
      QueryBooleanProperty<SuspensionDireccion>(_entities[46].properties[47]);

  /// see [SuspensionDireccion.revision]
  static final revision = QueryRelationToOne<SuspensionDireccion, Revision>(
      _entities[46].properties[48]);
}

/// [Producto] entity fields to define ObjectBox queries.
class Producto_ {
  /// see [Producto.id]
  static final id = QueryIntegerProperty<Producto>(_entities[47].properties[0]);

  /// see [Producto.producto]
  static final producto =
      QueryStringProperty<Producto>(_entities[47].properties[1]);

  /// see [Producto.cantidad]
  static final cantidad =
      QueryIntegerProperty<Producto>(_entities[47].properties[2]);

  /// see [Producto.costo]
  static final costo =
      QueryDoubleProperty<Producto>(_entities[47].properties[3]);

  /// see [Producto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Producto>(_entities[47].properties[4]);

  /// see [Producto.idDBR]
  static final idDBR =
      QueryStringProperty<Producto>(_entities[47].properties[5]);

  /// see [Producto.servicio]
  static final servicio =
      QueryRelationToOne<Producto, Servicio>(_entities[47].properties[6]);
}

/// [Servicio] entity fields to define ObjectBox queries.
class Servicio_ {
  /// see [Servicio.id]
  static final id = QueryIntegerProperty<Servicio>(_entities[48].properties[0]);

  /// see [Servicio.servicio]
  static final servicio =
      QueryStringProperty<Servicio>(_entities[48].properties[1]);

  /// see [Servicio.costoServicio]
  static final costoServicio =
      QueryDoubleProperty<Servicio>(_entities[48].properties[2]);

  /// see [Servicio.autorizado]
  static final autorizado =
      QueryBooleanProperty<Servicio>(_entities[48].properties[3]);

  /// see [Servicio.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Servicio>(_entities[48].properties[4]);

  /// see [Servicio.fechaEntrega]
  static final fechaEntrega =
      QueryIntegerProperty<Servicio>(_entities[48].properties[5]);

  /// see [Servicio.idDBR]
  static final idDBR =
      QueryStringProperty<Servicio>(_entities[48].properties[6]);

  /// see [Servicio.imagen]
  static final imagen =
      QueryStringProperty<Servicio>(_entities[48].properties[7]);

  /// see [Servicio.path]
  static final path =
      QueryStringProperty<Servicio>(_entities[48].properties[8]);

  /// see [Servicio.ordenServicio]
  static final ordenServicio =
      QueryRelationToOne<Servicio, OrdenServicio>(_entities[48].properties[9]);
}

/// [TipoProducto] entity fields to define ObjectBox queries.
class TipoProducto_ {
  /// see [TipoProducto.id]
  static final id =
      QueryIntegerProperty<TipoProducto>(_entities[49].properties[0]);

  /// see [TipoProducto.tipoProducto]
  static final tipoProducto =
      QueryStringProperty<TipoProducto>(_entities[49].properties[1]);

  /// see [TipoProducto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoProducto>(_entities[49].properties[2]);

  /// see [TipoProducto.costo]
  static final costo =
      QueryDoubleProperty<TipoProducto>(_entities[49].properties[3]);

  /// see [TipoProducto.idDBR]
  static final idDBR =
      QueryStringProperty<TipoProducto>(_entities[49].properties[4]);
}

/// [TipoServicio] entity fields to define ObjectBox queries.
class TipoServicio_ {
  /// see [TipoServicio.id]
  static final id =
      QueryIntegerProperty<TipoServicio>(_entities[50].properties[0]);

  /// see [TipoServicio.tipoServicio]
  static final tipoServicio =
      QueryStringProperty<TipoServicio>(_entities[50].properties[1]);

  /// see [TipoServicio.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoServicio>(_entities[50].properties[2]);

  /// see [TipoServicio.costo]
  static final costo =
      QueryDoubleProperty<TipoServicio>(_entities[50].properties[3]);

  /// see [TipoServicio.idDBR]
  static final idDBR =
      QueryStringProperty<TipoServicio>(_entities[50].properties[4]);

  /// see [TipoServicio.imagen]
  static final imagen =
      QueryStringProperty<TipoServicio>(_entities[50].properties[5]);

  /// see [TipoServicio.path]
  static final path =
      QueryStringProperty<TipoServicio>(_entities[50].properties[6]);
}

/// [Estatus] entity fields to define ObjectBox queries.
class Estatus_ {
  /// see [Estatus.id]
  static final id = QueryIntegerProperty<Estatus>(_entities[51].properties[0]);

  /// see [Estatus.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Estatus>(_entities[51].properties[1]);

  /// see [Estatus.idDBR]
  static final idDBR =
      QueryStringProperty<Estatus>(_entities[51].properties[2]);

  /// see [Estatus.avance]
  static final avance =
      QueryDoubleProperty<Estatus>(_entities[51].properties[3]);

  /// see [Estatus.estatus]
  static final estatus =
      QueryStringProperty<Estatus>(_entities[51].properties[4]);
}

/// [OrdenServicio] entity fields to define ObjectBox queries.
class OrdenServicio_ {
  /// see [OrdenServicio.id]
  static final id =
      QueryIntegerProperty<OrdenServicio>(_entities[52].properties[0]);

  /// see [OrdenServicio.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<OrdenServicio>(_entities[52].properties[1]);

  /// see [OrdenServicio.fechaEntrega]
  static final fechaEntrega =
      QueryIntegerProperty<OrdenServicio>(_entities[52].properties[2]);

  /// see [OrdenServicio.costoTotal]
  static final costoTotal =
      QueryDoubleProperty<OrdenServicio>(_entities[52].properties[3]);

  /// see [OrdenServicio.idDBR]
  static final idDBR =
      QueryStringProperty<OrdenServicio>(_entities[52].properties[4]);

  /// see [OrdenServicio.ordenTrabajo]
  static final ordenTrabajo = QueryRelationToOne<OrdenServicio, OrdenTrabajo>(
      _entities[52].properties[5]);
}

/// [Revision] entity fields to define ObjectBox queries.
class Revision_ {
  /// see [Revision.id]
  static final id = QueryIntegerProperty<Revision>(_entities[53].properties[0]);

  /// see [Revision.completado]
  static final completado =
      QueryBooleanProperty<Revision>(_entities[53].properties[1]);

  /// see [Revision.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Revision>(_entities[53].properties[2]);

  /// see [Revision.idDBR]
  static final idDBR =
      QueryStringProperty<Revision>(_entities[53].properties[3]);

  /// see [Revision.ordenTrabajo]
  static final ordenTrabajo =
      QueryRelationToOne<Revision, OrdenTrabajo>(_entities[53].properties[4]);

  /// see [Revision.suspensionDireccion]
  static final suspensionDireccion =
      QueryRelationToOne<Revision, SuspensionDireccion>(
          _entities[53].properties[5]);

  /// see [Revision.motor]
  static final motor =
      QueryRelationToOne<Revision, Motor>(_entities[53].properties[6]);

  /// see [Revision.fluidos]
  static final fluidos =
      QueryRelationToOne<Revision, Fluidos>(_entities[53].properties[7]);

  /// see [Revision.frenos]
  static final frenos =
      QueryRelationToOne<Revision, Frenos>(_entities[53].properties[8]);

  /// see [Revision.electrico]
  static final electrico =
      QueryRelationToOne<Revision, Electrico>(_entities[53].properties[9]);
}
