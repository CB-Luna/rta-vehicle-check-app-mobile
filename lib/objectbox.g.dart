// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entitys.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(8, 804684152773215409),
      name: 'Emprendimientos',
      lastPropertyId: const IdUid(27, 4661688415424027549),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4677830973327539513),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5330112956647391083),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3655261249465798823),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 807468286336679069),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4225051604479617429),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2319564184498508408),
            name: 'emprendedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 6767241145070274732),
            relationTarget: 'Emprendedores'),
        ModelProperty(
            id: const IdUid(15, 1684532864788042377),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 6945808217463090366),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(16, 5126173959103968444),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2815575313211393813),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 400732199218356134),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(62, 2735008652274095664)),
        ModelProperty(
            id: const IdUid(23, 5115364499969904783),
            name: 'comunidadId',
            type: 11,
            flags: 520,
            indexId: const IdUid(108, 9172016749357144224),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(24, 9067992503886811416),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(109, 2158114976016630089),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(25, 8956151736497272082),
            name: 'prioridadEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(110, 6914145295119698584),
            relationTarget: 'PrioridadEmp'),
        ModelProperty(
            id: const IdUid(27, 4661688415424027549),
            name: 'catalogoProyectoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(135, 3071001570087288716),
            relationTarget: 'CatalogoProyecto')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 2038229905033466972),
            name: 'jornadas',
            targetId: const IdUid(24, 6358146304075079104)),
        ModelRelation(
            id: const IdUid(8, 9183356578860779220),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(13, 2084439730118676088),
            name: 'proveedores',
            targetId: const IdUid(38, 5382242557058931829))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'fasesEmp', srcEntity: 'FasesEmp', srcField: ''),
        ModelBacklink(name: 'ventas', srcEntity: 'Ventas', srcField: ''),
        ModelBacklink(
            name: 'productosEmp', srcEntity: 'ProductosEmp', srcField: ''),
        ModelBacklink(
            name: 'productosCot', srcEntity: 'ProductosCot', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 252808688812742776),
      name: 'Usuarios',
      lastPropertyId: const IdUid(19, 1119031807460084459),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2635581039067582434),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8585539283016018259),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4453572026011528588),
            name: 'apellidoP',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 769480280417967138),
            name: 'apellidoM',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6160806538756599358),
            name: 'nacimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8241390027662058716),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8831865134001231809),
            name: 'celular',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4366827260158841734),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 715728503018425294),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3554819703177446556),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2009950526621565134),
            name: 'rol',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7064291300252248252),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2791771992441857032),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 8523822191732594212),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(16, 2225226539771083672),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(70, 177953814522194844)),
        ModelProperty(
            id: const IdUid(17, 7181885270107922782),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(82, 4608900919778481553),
            relationTarget: 'Bitacora'),
        ModelProperty(
            id: const IdUid(18, 4567358900391945362),
            name: 'variablesUsuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(84, 5311167113567925142),
            relationTarget: 'VariablesUsuario'),
        ModelProperty(
            id: const IdUid(19, 1119031807460084459),
            name: 'archivado',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(19, 803629559452567645),
            name: 'documentos',
            targetId: const IdUid(35, 416402482060153165))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendimientos', srcEntity: 'Emprendimientos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 7673785883081583133),
      name: 'Ventas',
      lastPropertyId: const IdUid(9, 1402395516104320476),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3529393499177674234),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3959630620037866869),
            name: 'fechaInicio',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1842463129407517048),
            name: 'fechaTermino',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1303969564249935695),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6490506020631406852),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7248362350774841303),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3759249699517018075),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 4208244129974519526),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(9, 1402395516104320476),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(72, 8935966127410978309))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 5075853906068129300),
      name: 'Consultorias',
      lastPropertyId: const IdUid(14, 9041506210264243534),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3514354406731350672),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4433239802450158965),
            name: 'documentos',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8866915593674479010),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2139629849183696076),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 1231698506270026223),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(8, 7643887216735876476),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 6280604761802477456),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(10, 7906326577399145661),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(60, 7031508221537022440)),
        ModelProperty(
            id: const IdUid(12, 5823608424634900217),
            name: 'areaCirculoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(99, 1257105897648979343),
            relationTarget: 'AreaCirculo'),
        ModelProperty(
            id: const IdUid(13, 5759260250882224252),
            name: 'ambitoConsultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(100, 8661572209442876177),
            relationTarget: 'AmbitoConsultoria'),
        ModelProperty(
            id: const IdUid(14, 9041506210264243534),
            name: 'tareaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(144, 8396189901550464501),
            relationTarget: 'Tareas')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(25, 650409796119095799),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 4450301343199944733),
      name: 'Vendidos',
      lastPropertyId: const IdUid(10, 7365870445831650995),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2253290332606608104),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3861064722112440270),
            name: 'cantVendida',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5941389222733156371),
            name: 'subtotal',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5633075432279483197),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4527500675980092790),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9063014267953462768),
            name: 'ventasId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 7759963732964993012),
            relationTarget: 'Ventas'),
        ModelProperty(
            id: const IdUid(9, 8360434748618374218),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(71, 8437402305858239768)),
        ModelProperty(
            id: const IdUid(10, 7365870445831650995),
            name: 'productoEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(131, 6863462231464342610),
            relationTarget: 'ProductosEmp')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 2491530739310255510),
      name: 'Tareas',
      lastPropertyId: const IdUid(17, 3679854591609531040),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1933555606703313228),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8014791709560172837),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5194084986301717278),
            name: 'observacion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7823032235829845864),
            name: 'porcentaje',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3881874201994923632),
            name: 'fechaRevision',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5323371369283368342),
            name: 'imagenes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5064642112222430336),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7410991421173790048),
            name: 'jornadaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7212582056034264336),
            relationTarget: 'Jornadas'),
        ModelProperty(
            id: const IdUid(12, 609327474518802635),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 5990507287199149727),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(13, 1159353226151624190),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(35, 4489600343659936888),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(15, 7369722519639465454),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(69, 2233256601077182610)),
        ModelProperty(
            id: const IdUid(16, 5688593427736897311),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(81, 2386897909389581505),
            relationTarget: 'Bitacora'),
        ModelProperty(
            id: const IdUid(17, 3679854591609531040),
            name: 'tarea',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 6615538153946220074),
      name: 'Comunidades',
      lastPropertyId: const IdUid(9, 805717021218324759),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8800100372581327104),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8730242443265006025),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 721387320777571889),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5885740297519224064),
            name: 'municipiosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 6694643856830086551),
            relationTarget: 'Municipios'),
        ModelProperty(
            id: const IdUid(7, 4568878887845057899),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(59, 7369061656734412750)),
        ModelProperty(
            id: const IdUid(8, 2953175511506922439),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 805717021218324759),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(85, 4197992763805738004),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos', srcEntity: 'Emprendimientos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(21, 311544265460535081),
      name: 'Emprendedores',
      lastPropertyId: const IdUid(20, 6161823828674097276),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8386730720267544453),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4330157751559637236),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 397638224005716367),
            name: 'nacimiento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3779379054940407382),
            name: 'curp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6772946936896296896),
            name: 'integrantesFamilia',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6532186673116404834),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1488410309800825779),
            name: 'comentarios',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 748875377023563317),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8381385900840453390),
            name: 'comunidadesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 1728042511720879376),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(13, 9142089170751540909),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 6386641065826609180),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(14, 3552854491581449237),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 5629854475557113245),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(15, 9187449762833663479),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4772008941693181500),
            name: 'apellidos',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 677332732810007841),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(61, 8815402416282925921))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 6695548577594940433),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 334643984474072026),
      name: 'Estados',
      lastPropertyId: const IdUid(8, 7648666853331914628),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8944844315150541404),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2660299098597049972),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4495471650360650211),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1340243202863340307),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(64, 5835974261382713960)),
        ModelProperty(
            id: const IdUid(7, 3354600507596039521),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7648666853331914628),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(86, 3278468930080545812),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'municipios', srcEntity: 'Municipios', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(23, 6229275484692578053),
      name: 'Municipios',
      lastPropertyId: const IdUid(9, 4936784167570705480),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8933146656611953476),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8369695090390803726),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3101198272334121532),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3651614083986583572),
            name: 'estadosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 1773413668740873220),
            relationTarget: 'Estados'),
        ModelProperty(
            id: const IdUid(7, 5403234117840867506),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(66, 2437097551889800455)),
        ModelProperty(
            id: const IdUid(8, 7402881280207170997),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4936784167570705480),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(87, 6478200980709363370),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'comunidades', srcEntity: 'Comunidades', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(24, 6358146304075079104),
      name: 'Jornadas',
      lastPropertyId: const IdUid(12, 8889235360537659107),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6358759877557227346),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 498346413789251837),
            name: 'numJornada',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3362702631639476479),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5712771709171787916),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 6035553439883628722),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(7, 4791150844778521105),
            name: 'tareaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 1639668133313135676),
            relationTarget: 'Tareas'),
        ModelProperty(
            id: const IdUid(8, 4099773729934801460),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 8145611823764249187),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(10, 2354079124955583253),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(65, 2011636909834464311)),
        ModelProperty(
            id: const IdUid(12, 8889235360537659107),
            name: 'fechaRevision',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 4246279541821576094),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512)),
        ModelRelation(
            id: const IdUid(15, 844143373802489165),
            name: 'documentos',
            targetId: const IdUid(35, 416402482060153165))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 6276906075580230896),
      name: 'StatusSync',
      lastPropertyId: const IdUid(3, 167975598346545172),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3838759675906565787),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6577146346869035587),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 167975598346545172),
            name: 'fechaRegistro',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos',
            srcEntity: 'Emprendimientos',
            srcField: ''),
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: ''),
        ModelBacklink(name: 'usuarios', srcEntity: 'Usuarios', srcField: ''),
        ModelBacklink(name: 'jornadas', srcEntity: 'Jornadas', srcField: ''),
        ModelBacklink(
            name: 'comunidades', srcEntity: 'Comunidades', srcField: ''),
        ModelBacklink(
            name: 'municipios', srcEntity: 'Municipios', srcField: ''),
        ModelBacklink(name: 'estados', srcEntity: 'Estados', srcField: ''),
        ModelBacklink(
            name: 'clasificacionesEmp',
            srcEntity: 'ClasificacionEmp',
            srcField: ''),
        ModelBacklink(name: 'fasesEmp', srcEntity: 'FasesEmp', srcField: ''),
        ModelBacklink(
            name: 'prioridadesEmp', srcEntity: 'PrioridadEmp', srcField: ''),
        ModelBacklink(
            name: 'productosEmp', srcEntity: 'ProductosEmp', srcField: ''),
        ModelBacklink(
            name: 'productosCot', srcEntity: 'ProductosCot', srcField: ''),
        ModelBacklink(
            name: 'familiasInversion',
            srcEntity: 'FamiliaInversion',
            srcField: ''),
        ModelBacklink(
            name: 'unidadesMedida', srcEntity: 'UnidadMedida', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(27, 1774905738150923512),
      name: 'Bitacora',
      lastPropertyId: const IdUid(11, 3616607795938519256),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2437720472275770378),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 285794828058190926),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6670748245644266493),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2628466040035596378),
            name: 'instrucciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3616607795938519256),
            name: 'usuario',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendedores', srcEntity: 'Emprendedores', srcField: ''),
        ModelBacklink(
            name: 'emprendimientos',
            srcEntity: 'Emprendimientos',
            srcField: ''),
        ModelBacklink(name: 'tareas', srcEntity: 'Tareas', srcField: ''),
        ModelBacklink(
            name: 'consultorias', srcEntity: 'Consultorias', srcField: ''),
        ModelBacklink(name: 'usuarios', srcEntity: 'Usuarios', srcField: ''),
        ModelBacklink(name: 'jornadas', srcEntity: 'Jornadas', srcField: ''),
        ModelBacklink(
            name: 'productosEmp', srcEntity: 'ProductosEmp', srcField: ''),
        ModelBacklink(
            name: 'productosCot', srcEntity: 'ProductosCot', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(29, 7625539946193612618),
      name: 'VariablesUsuario',
      lastPropertyId: const IdUid(4, 7664581841173068663),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6845935698624323595),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2773772202661284417),
            name: 'emprendedores',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2001355623132513549),
            name: 'emprendimientos',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7664581841173068663),
            name: 'fechaActualizacion',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'usuarios', srcEntity: 'Usuarios', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(30, 485586835672622394),
      name: 'AmbitoConsultoria',
      lastPropertyId: const IdUid(7, 4324338883283060091),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4426375179141119539),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2135837894165709071),
            name: 'nombreAmbito',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5845226999957833968),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2777595135217905192),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5063104180889118220),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(88, 4818184016266482651)),
        ModelProperty(
            id: const IdUid(6, 8197216700245087458),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(89, 3727619334081925690),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(7, 4324338883283060091),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(90, 6525247578997517066),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 7426889168202420991),
            name: 'consultorias',
            targetId: const IdUid(12, 5075853906068129300))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 8382413157677919073),
      name: 'AreaCirculo',
      lastPropertyId: const IdUid(8, 7761086571426781835),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4378203071035232794),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8426332937359075528),
            name: 'nombreArea',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3678492327230106894),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 679198805912964589),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6017416368221530385),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(91, 921370380699638957)),
        ModelProperty(
            id: const IdUid(6, 7149773872288751418),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(92, 7365549080914549891),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(7, 1058132069139629169),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(93, 9031244164717773135),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(8, 7761086571426781835),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(94, 5913940684400773460),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 1811709022167361315),
      name: 'Bancos',
      lastPropertyId: const IdUid(5, 4293383646830114252),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1756012209187183210),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1731712842219867702),
            name: 'banco',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5399121294798371700),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2702753041033734925),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4293383646830114252),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(95, 8999014678028092781))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'proveedores', srcEntity: 'Proveedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(33, 6171792505504710034),
      name: 'ClasificacionEmp',
      lastPropertyId: const IdUid(6, 1400701969453774196),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1434391940339194549),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4623941556925944192),
            name: 'clasificacion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9195889777899967802),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2893504049285370318),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5345396877052834205),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(96, 8924894951915172233)),
        ModelProperty(
            id: const IdUid(6, 1400701969453774196),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(97, 7199578124410176767),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 6897781984287572779),
            name: 'categoriasProyecto',
            targetId: const IdUid(44, 7028042862098546470))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 1304959332947864171),
      name: 'CondicionesPago',
      lastPropertyId: const IdUid(5, 2695423455764152197),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 801597087049948180),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8735741652297119805),
            name: 'condicion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6009298259383481514),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3715048591191326703),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2695423455764152197),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(98, 3071625320339972286))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'proveedores', srcEntity: 'Proveedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(35, 416402482060153165),
      name: 'Documentos',
      lastPropertyId: const IdUid(12, 7518146399129654640),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2419646048913111562),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4721663583478119690),
            name: 'nombreArchivo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6765211601357784849),
            name: 'fechaCarga',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3393149240246558542),
            name: 'archivo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7472871579384853493),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 275024665070143236),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(101, 5111763985071597000)),
        ModelProperty(
            id: const IdUid(7, 2126016403256222143),
            name: 'tipoDocumentoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(102, 4309254757168505827),
            relationTarget: 'TipoDocumentos'),
        ModelProperty(
            id: const IdUid(8, 1952396127837611647),
            name: 'jornadaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(103, 6996556203985589585),
            relationTarget: 'Jornadas'),
        ModelProperty(
            id: const IdUid(9, 6263613128532982614),
            name: 'consultoriaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(104, 7809810160425316306),
            relationTarget: 'Consultorias'),
        ModelProperty(
            id: const IdUid(10, 7057232621627471855),
            name: 'usuarioId',
            type: 11,
            flags: 520,
            indexId: const IdUid(105, 5061753440206822427),
            relationTarget: 'Usuarios'),
        ModelProperty(
            id: const IdUid(11, 1415385875565521100),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(106, 6301511722519877303),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(12, 7518146399129654640),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(107, 7719656177725469816),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(36, 8975733277369074245),
      name: 'FasesEmp',
      lastPropertyId: const IdUid(5, 2523510470982254727),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7828986895200618322),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6094806201443064731),
            name: 'fase',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8849603484316850022),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3722514468989464909),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(112, 8969067937454063263)),
        ModelProperty(
            id: const IdUid(5, 2523510470982254727),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(113, 4711016057441657243),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 1687178188832172327),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 562207686048996243),
      name: 'PrioridadEmp',
      lastPropertyId: const IdUid(5, 8393564967718994929),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2811901041029349773),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5054656386255573113),
            name: 'prioridad',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4785767606920915006),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5891548134257716403),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(114, 6094549584282026938)),
        ModelProperty(
            id: const IdUid(5, 8393564967718994929),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(115, 5701493849060623154),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(16, 8314830901667483110),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 5382242557058931829),
      name: 'Proveedores',
      lastPropertyId: const IdUid(15, 1996743748672640144),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1484676459896345649),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2702587581297719928),
            name: 'nombreFiscal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 627179554347977552),
            name: 'rfc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 924042896960532318),
            name: 'direccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4253240073651518778),
            name: 'nombreEncargado',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9188143602532049857),
            name: 'clabe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9068672088910412439),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7123252788145912746),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2688995114984003410),
            name: 'registradoPor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8509517577700052266),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 898724826382222644),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(116, 8487270208938798479)),
        ModelProperty(
            id: const IdUid(12, 2168687520283812027),
            name: 'tipoProveedorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(117, 961819206264313590),
            relationTarget: 'TipoProveedor'),
        ModelProperty(
            id: const IdUid(13, 8605556586939591362),
            name: 'comunidadesId',
            type: 11,
            flags: 520,
            indexId: const IdUid(118, 2076068900619511099),
            relationTarget: 'Comunidades'),
        ModelProperty(
            id: const IdUid(14, 5446471853032327793),
            name: 'condicionPagoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(119, 2470984967591703509),
            relationTarget: 'CondicionesPago'),
        ModelProperty(
            id: const IdUid(15, 1996743748672640144),
            name: 'bancoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(120, 2698679340301377654),
            relationTarget: 'Bancos')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 5004962762570684805),
      name: 'Roles',
      lastPropertyId: const IdUid(6, 7472638587980563205),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9120360617098614714),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8175506260800690164),
            name: 'rol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1629138227601864338),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3030501079695674721),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(121, 836541551050324843)),
        ModelProperty(
            id: const IdUid(5, 1992449025228530298),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(122, 8338339517316328460),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(6, 7472638587980563205),
            name: 'bitacoraId',
            type: 11,
            flags: 520,
            indexId: const IdUid(123, 1234571576087817606),
            relationTarget: 'Bitacora')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(17, 2284205245851171279),
            name: 'usuarios',
            targetId: const IdUid(10, 252808688812742776))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(40, 5431167889155729582),
      name: 'TipoDocumentos',
      lastPropertyId: const IdUid(3, 8088892015231071856),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7586360301405444917),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6833710803124238256),
            name: 'tipo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8088892015231071856),
            name: 'fechaRegistro',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(18, 5505233820407340532),
            name: 'documentos',
            targetId: const IdUid(35, 416402482060153165))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(41, 5659431982863420214),
      name: 'TipoProveedor',
      lastPropertyId: const IdUid(5, 7098281571946668829),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6205972270821820963),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6844452117923663757),
            name: 'tipo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 293831517252750520),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5782809536948366393),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7098281571946668829),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(124, 54236561938110646))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'proveedores', srcEntity: 'Proveedores', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(42, 3199858035416333747),
      name: 'FamiliaInversion',
      lastPropertyId: const IdUid(6, 1749816194949685889),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3956724533417333522),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3802715731545668143),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8987696372421294752),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8350117130262616151),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3226014301147360143),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(125, 6797019913904187382)),
        ModelProperty(
            id: const IdUid(6, 1749816194949685889),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(126, 3755948547611107789),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(43, 8172937846526815489),
      name: 'ProductosEmp',
      lastPropertyId: const IdUid(15, 1466612933068041934),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4694457206836110411),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8138687838003749892),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7857354936296959346),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3172314971365956702),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3433062347635299317),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5798532042156117000),
            name: 'precioVenta',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7908243977080491158),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2999215295973720507),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4117349148605079338),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(127, 5187664837969501724)),
        ModelProperty(
            id: const IdUid(10, 7523160709471259470),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(128, 2557270521250487094),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(11, 4408277863979840317),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(129, 6396345650284201105),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(12, 449037016119055988),
            name: 'familiaInversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(130, 4686570526947596743),
            relationTarget: 'FamiliaInversion'),
        ModelProperty(
            id: const IdUid(13, 770565802267609172),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(136, 1962134460049855123),
            relationTarget: 'UnidadMedida'),
        ModelProperty(
            id: const IdUid(14, 4723303053259007258),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1466612933068041934),
            name: 'proveedor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(22, 7809991115224388687),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'vendidos', srcEntity: 'Vendidos', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(44, 7028042862098546470),
      name: 'CatalogoProyecto',
      lastPropertyId: const IdUid(6, 2446617551955001742),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2320402032859380061),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5836263409631228918),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2962342881882180254),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7173197756596644756),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(132, 6485836029384457432)),
        ModelProperty(
            id: const IdUid(5, 7758743809194774648),
            name: 'clasificacionEmpId',
            type: 11,
            flags: 520,
            indexId: const IdUid(133, 2390143391685661460),
            relationTarget: 'ClasificacionEmp'),
        ModelProperty(
            id: const IdUid(6, 2446617551955001742),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(134, 5205191834236384758),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(20, 1112665914041550299),
            name: 'emprendimientos',
            targetId: const IdUid(8, 804684152773215409))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(45, 7727246235344048855),
      name: 'UnidadMedida',
      lastPropertyId: const IdUid(6, 5402279733305696715),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6552210119824315394),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6031532578549188804),
            name: 'unidadMedida',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2602374307196861226),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3793969537050688732),
            name: 'activo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2515638413658999127),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(137, 2091809350828315876)),
        ModelProperty(
            id: const IdUid(6, 5402279733305696715),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(138, 6686263885413674781),
            relationTarget: 'StatusSync')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 6114299832999780262),
            name: 'productosEmp',
            targetId: const IdUid(43, 8172937846526815489))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(46, 8904698342427392465),
      name: 'ProductosCot',
      lastPropertyId: const IdUid(15, 1991668705024615469),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5328095077095537181),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6284051672797193414),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6365319972112587915),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6606890237353721944),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5628367501338126181),
            name: 'costo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1436917224247812157),
            name: 'precioVenta',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2708316285260983524),
            name: 'cantidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7432480190168004450),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2507416638338706911),
            name: 'archivado',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6999119836743433970),
            name: 'idDBR',
            type: 9,
            flags: 2080,
            indexId: const IdUid(139, 7134386235812622391)),
        ModelProperty(
            id: const IdUid(11, 8092664882881749647),
            name: 'statusSyncId',
            type: 11,
            flags: 520,
            indexId: const IdUid(140, 1771504610223020041),
            relationTarget: 'StatusSync'),
        ModelProperty(
            id: const IdUid(12, 7640856879689498744),
            name: 'emprendimientosId',
            type: 11,
            flags: 520,
            indexId: const IdUid(141, 551694848824488979),
            relationTarget: 'Emprendimientos'),
        ModelProperty(
            id: const IdUid(13, 2514991401100204571),
            name: 'familiaInversionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(142, 5680153590233047661),
            relationTarget: 'FamiliaInversion'),
        ModelProperty(
            id: const IdUid(14, 4261138498742165746),
            name: 'unidadMedidaId',
            type: 11,
            flags: 520,
            indexId: const IdUid(143, 3316376086092469001),
            relationTarget: 'UnidadMedida'),
        ModelProperty(
            id: const IdUid(15, 1991668705024615469),
            name: 'proveedor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(24, 7320385007667993449),
            name: 'bitacora',
            targetId: const IdUid(27, 1774905738150923512))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(46, 8904698342427392465),
      lastIndexId: const IdUid(144, 8396189901550464501),
      lastRelationId: const IdUid(25, 650409796119095799),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1366246136666677579,
        6117759740444770997,
        2166617641346171935,
        3964965102569712035,
        3815886273064837669,
        2781408684735737577,
        2428686942234365602,
        1323666498433169999,
        2042416188864880761,
        1021087970446956343,
        4631117986834657050,
        3867794090434878240,
        859399381735454083,
        9001070558566127547,
        4156773254590137275
      ],
      retiredIndexUids: const [
        8990521503430950587,
        1607831315029447998,
        2758117709587171439,
        7680390338130917281,
        7083281142493979324,
        3380866187592452154,
        898977627675318720,
        4860061050288630164,
        6477492978039659709,
        1884784676683692244,
        6230644741850799714,
        1222153075892218921,
        6456431794726392868,
        21923039932233953,
        8302583708064681419,
        1826338943965397138,
        2193715064152120120,
        4181153384410572043,
        76785533892443862,
        6725194506411062036,
        7912925179002849310,
        4669749725996081754,
        8481960757171179551,
        8868718449044949040,
        6694951196945837935,
        1067877610717947502,
        1990533507654861339,
        2290535798159386957,
        5140011308328673057,
        8062585399034389472,
        668466277065793709,
        360897725695503763,
        7003598226496598726,
        8154602671126157109,
        7569304066565191687,
        5035905392252920596,
        7510634053082529540,
        8309315416341765269
      ],
      retiredPropertyUids: const [
        7079790605743243388,
        6172998306654734553,
        2574672497671950469,
        5347718656034637228,
        6273269044269879201,
        7911475855340885994,
        5829103266196707853,
        7515124161780938608,
        3991281244965765077,
        6017954821795207299,
        3980554204008347119,
        9086365290951858859,
        2452280981631945624,
        8341443670952491819,
        4551103649348469546,
        6909534581842096739,
        5386075232935579859,
        4364625688543508975,
        8474005816611301515,
        291034994140840826,
        7245017250220973753,
        552297950480807692,
        5889322915921969172,
        8304755835049178217,
        3462034544506880697,
        6915994077861086090,
        4932511096555161847,
        3662632218083065242,
        3180136282497114098,
        647799949869266031,
        3681945340148367110,
        2965121636634238955,
        2158551797062253471,
        6431279296723446945,
        176765185759695924,
        956997601706550466,
        3714019547848860305,
        4653993271322157592,
        7633603347667974425,
        3889022425921663783,
        3593890741921782419,
        4870033424336565884,
        6196634665502618124,
        702060131665322309,
        6834895970095104912,
        4298168455532229057,
        6494676936156636610,
        7984657088306364599,
        3469221558317808806,
        7657355535786071996,
        1460263094824080539,
        3348596078791966503,
        6686642139452024167,
        7280661973312265839,
        232832489478303902,
        7424242419126398301,
        4735971027860097783,
        7275271439444339569,
        5329076299621472283,
        4790639327797463942,
        4028495148250116114,
        7930195933533868005,
        7269234199457887678,
        3045954521590561959,
        4548731095880486014,
        3917990569343711155,
        804388285645815931,
        7240701117028268274,
        7020232340501817282,
        4082213459028815417,
        509412325826203117,
        9047558658118118651,
        1406568894842036273,
        8202387200314019143,
        6701648872907734361,
        7104768524590771840,
        7655032466536069673,
        1965574186271044849,
        1382509944249718626,
        8283328889428416807,
        3394511564896037854,
        8624158494612522146,
        5474615315576449195,
        5081084557109504408,
        174707286127388287,
        4444011821186412409,
        3952098520364674379,
        3879749783315811280,
        249851165958766302,
        7867123722378438362,
        891222057461627616,
        1618039077907563691,
        8586458724268756786,
        6140184920981313822,
        5626746320301529232,
        1758281922018199377,
        317028010342762687,
        6994977916160921655,
        6540004964666285680,
        4856817907692795203,
        3441574004683600331,
        2310204940504377436,
        8222154448043311087,
        7833602918531477435,
        6543222186554661806,
        7872004360843974627,
        7851399595546166337,
        5833972560963993700,
        6559411272338609235,
        5059986275729243897,
        4022221953004300558,
        6624197140138252342,
        9045113882157341306,
        8564976400204004342,
        5719240336153726962,
        1887404940434801966,
        5046680042193038920,
        3788539490390442542,
        5992135025932841446,
        6280052136229997375,
        3221284138384568926,
        8861650403401684419,
        8988217608763532952,
        4387081276626837570,
        6161823828674097276,
        6939545807929048684,
        1388327886429615646,
        3312783263241748230,
        782321710570789969,
        2948145743703110893,
        4090875136723971084,
        7992450668665361714,
        7899142688428235984,
        3895257262356450605,
        2584782002890659583,
        5582579692261011195,
        5028158787265648369,
        5407152779426357701,
        8462464237235982526,
        4309447383493916637,
        7521607225935953493,
        6944626713596755992,
        5691040412648373501,
        4570083749155237849,
        2012161149637737564,
        4111001027425517669,
        2235592658688426627,
        3514219219156834755,
        7900770007418559960,
        8727843019342851116,
        2246275948466157951,
        6828598007871134254,
        2210981706424940712,
        8149625297125514299,
        1774385922646110264,
        3611757609493769130,
        1550628132673256737,
        7401453084951799987,
        4168434124669331468,
        4273736957162077610,
        7661096811192140465,
        5032172720157635791,
        3640667548502545688,
        3227581588275626757,
        6169031405257917919,
        3603888931156625013,
        3770705136894608488,
        1431194771886016233,
        6126515006975107011,
        3911938135844163773,
        4915654780717530161
      ],
      retiredRelationUids: const [
        1226469011453769556,
        4334679211015697719,
        658993855133497141,
        7628231779967948088,
        7335578884425240534,
        8472678273863104956
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Emprendimientos: EntityDefinition<Emprendimientos>(
        model: _entities[0],
        toOneRelations: (Emprendimientos object) => [
              object.emprendedor,
              object.statusSync,
              object.comunidad,
              object.usuario,
              object.prioridadEmp,
              object.catalogoProyecto
            ],
        toManyRelations: (Emprendimientos object) => {
              RelInfo<Emprendimientos>.toMany(5, object.id): object.jornadas,
              RelInfo<Emprendimientos>.toMany(8, object.id): object.bitacora,
              RelInfo<Emprendimientos>.toMany(13, object.id):
                  object.proveedores,
              RelInfo<FasesEmp>.toManyBacklink(14, object.id): object.fasesEmp,
              RelInfo<Ventas>.toOneBacklink(7, object.id,
                      (Ventas srcObject) => srcObject.emprendimientos):
                  object.ventas,
              RelInfo<ProductosEmp>.toOneBacklink(11, object.id,
                      (ProductosEmp srcObject) => srcObject.emprendimientos):
                  object.productosEmp,
              RelInfo<ProductosCot>.toOneBacklink(12, object.id,
                      (ProductosCot srcObject) => srcObject.emprendimientos):
                  object.productosCot,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                      (Consultorias srcObject) => srcObject.emprendimiento):
                  object.consultorias
            },
        getId: (Emprendimientos object) => object.id,
        setId: (Emprendimientos object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendimientos object, fb.Builder fbb) {
          final imagenOffset = fbb.writeString(object.imagen);
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagenOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, descripcionOffset);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(12, object.emprendedor.targetId);
          fbb.addInt64(14, object.statusSync.targetId);
          fbb.addBool(15, object.activo);
          fbb.addBool(16, object.archivado);
          fbb.addOffset(18, idDBROffset);
          fbb.addInt64(22, object.comunidad.targetId);
          fbb.addInt64(23, object.usuario.targetId);
          fbb.addInt64(24, object.prioridadEmp.targetId);
          fbb.addInt64(26, object.catalogoProyecto.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendimientos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 34, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 36, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40));
          object.emprendedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.emprendedor.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.statusSync.attach(store);
          object.comunidad.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          object.comunidad.attach(store);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.usuario.attach(store);
          object.prioridadEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.prioridadEmp.attach(store);
          object.catalogoProyecto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          object.catalogoProyecto.attach(store);
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Emprendimientos>.toMany(5, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Emprendimientos>.toMany(8, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Emprendimientos>.toMany(13, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.fasesEmp,
              store,
              RelInfo<FasesEmp>.toManyBacklink(14, object.id),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.ventas,
              store,
              RelInfo<Ventas>.toOneBacklink(7, object.id,
                  (Ventas srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<ProductosEmp>.toOneBacklink(11, object.id,
                  (ProductosEmp srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.productosCot,
              store,
              RelInfo<ProductosCot>.toOneBacklink(12, object.id,
                  (ProductosCot srcObject) => srcObject.emprendimientos),
              store.box<Emprendimientos>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toOneBacklink(7, object.id,
                  (Consultorias srcObject) => srcObject.emprendimiento),
              store.box<Emprendimientos>());
          return object;
        }),
    Usuarios: EntityDefinition<Usuarios>(
        model: _entities[1],
        toOneRelations: (Usuarios object) =>
            [object.statusSync, object.bitacora, object.variablesUsuario],
        toManyRelations: (Usuarios object) => {
              RelInfo<Usuarios>.toMany(19, object.id): object.documentos,
              RelInfo<Emprendimientos>.toOneBacklink(24, object.id,
                      (Emprendimientos srcObject) => srcObject.usuario):
                  object.emprendimientos
            },
        getId: (Usuarios object) => object.id,
        setId: (Usuarios object, int id) {
          object.id = id;
        },
        objectToFB: (Usuarios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoPOffset = fbb.writeString(object.apellidoP);
          final apellidoMOffset = fbb.writeString(object.apellidoM);
          final telefonoOffset = fbb.writeString(object.telefono);
          final celularOffset = fbb.writeString(object.celular);
          final correoOffset = fbb.writeString(object.correo);
          final passwordOffset = fbb.writeString(object.password);
          final imagenOffset = fbb.writeString(object.imagen);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoPOffset);
          fbb.addOffset(3, apellidoMOffset);
          fbb.addInt64(4, object.nacimiento.millisecondsSinceEpoch);
          fbb.addOffset(5, telefonoOffset);
          fbb.addOffset(6, celularOffset);
          fbb.addOffset(7, correoOffset);
          fbb.addOffset(8, passwordOffset);
          fbb.addOffset(9, imagenOffset);
          fbb.addInt64(10, object.rol);
          fbb.addInt64(11, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(13, object.statusSync.targetId);
          fbb.addOffset(15, idDBROffset);
          fbb.addInt64(16, object.bitacora.targetId);
          fbb.addInt64(17, object.variablesUsuario.targetId);
          fbb.addBool(18, object.archivado);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuarios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidoP: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              apellidoM: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nacimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              celular: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              correo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              password: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              imagen: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              rol: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              archivado: const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.bitacora.attach(store);
          object.variablesUsuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          object.variablesUsuario.attach(store);
          InternalToManyAccess.setRelInfo(object.documentos, store,
              RelInfo<Usuarios>.toMany(19, object.id), store.box<Usuarios>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(24, object.id,
                  (Emprendimientos srcObject) => srcObject.usuario),
              store.box<Usuarios>());
          return object;
        }),
    Ventas: EntityDefinition<Ventas>(
        model: _entities[2],
        toOneRelations: (Ventas object) => [object.emprendimientos],
        toManyRelations: (Ventas object) => {},
        getId: (Ventas object) => object.id,
        setId: (Ventas object, int id) {
          object.id = id;
        },
        objectToFB: (Ventas object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.fechaInicio.millisecondsSinceEpoch);
          fbb.addInt64(2, object.fechaTermino.millisecondsSinceEpoch);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(6, object.emprendimientos.targetId);
          fbb.addOffset(8, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ventas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaInicio: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              fechaTermino: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20));
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.emprendimientos.attach(store);
          return object;
        }),
    Consultorias: EntityDefinition<Consultorias>(
        model: _entities[3],
        toOneRelations: (Consultorias object) => [
              object.emprendimiento,
              object.statusSync,
              object.areaCirculo,
              object.ambitoConsultoria,
              object.tarea
            ],
        toManyRelations: (Consultorias object) =>
            {RelInfo<Consultorias>.toMany(25, object.id): object.bitacora},
        getId: (Consultorias object) => object.id,
        setId: (Consultorias object, int id) {
          object.id = id;
        },
        objectToFB: (Consultorias object, fb.Builder fbb) {
          final documentosOffset = object.documentos == null
              ? null
              : fbb.writeList(object.documentos!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, documentosOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(6, object.emprendimiento.targetId);
          fbb.addInt64(7, object.statusSync.targetId);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(11, object.areaCirculo.targetId);
          fbb.addInt64(12, object.ambitoConsultoria.targetId);
          fbb.addInt64(13, object.tarea.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Consultorias(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              documentos: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 8),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.emprendimiento.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.statusSync.attach(store);
          object.areaCirculo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.areaCirculo.attach(store);
          object.ambitoConsultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.ambitoConsultoria.attach(store);
          object.tarea.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.tarea.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Consultorias>.toMany(25, object.id),
              store.box<Consultorias>());
          return object;
        }),
    Vendidos: EntityDefinition<Vendidos>(
        model: _entities[4],
        toOneRelations: (Vendidos object) =>
            [object.ventas, object.productoEmp],
        toManyRelations: (Vendidos object) => {},
        getId: (Vendidos object) => object.id,
        setId: (Vendidos object, int id) {
          object.id = id;
        },
        objectToFB: (Vendidos object, fb.Builder fbb) {
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.cantVendida);
          fbb.addInt64(2, object.subtotal);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(5, object.ventas.targetId);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(9, object.productoEmp.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Vendidos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cantVendida:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              subtotal:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20));
          object.ventas.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.ventas.attach(store);
          object.productoEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.productoEmp.attach(store);
          return object;
        }),
    Tareas: EntityDefinition<Tareas>(
        model: _entities[5],
        toOneRelations: (Tareas object) => [
              object.jornada,
              object.consultoria,
              object.statusSync,
              object.bitacora
            ],
        toManyRelations: (Tareas object) => {},
        getId: (Tareas object) => object.id,
        setId: (Tareas object, int id) {
          object.id = id;
        },
        objectToFB: (Tareas object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          final observacionOffset = fbb.writeString(object.observacion);
          final imagenesOffset = object.imagenes == null
              ? null
              : fbb.writeList(object.imagenes!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final tareaOffset = fbb.writeString(object.tarea);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, observacionOffset);
          fbb.addInt64(4, object.porcentaje);
          fbb.addInt64(5, object.fechaRevision.millisecondsSinceEpoch);
          fbb.addOffset(6, imagenesOffset);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(10, object.jornada.targetId);
          fbb.addInt64(11, object.consultoria.targetId);
          fbb.addInt64(12, object.statusSync.targetId);
          fbb.addOffset(14, idDBROffset);
          fbb.addInt64(15, object.bitacora.targetId);
          fbb.addOffset(16, tareaOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tareas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tarea: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 36, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              observacion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              porcentaje:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              imagenes: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 16),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32));
          object.jornada.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.jornada.attach(store);
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.consultoria.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.bitacora.attach(store);
          return object;
        }),
    Comunidades: EntityDefinition<Comunidades>(
        model: _entities[6],
        toOneRelations: (Comunidades object) =>
            [object.municipios, object.statusSync],
        toManyRelations: (Comunidades object) => {
              RelInfo<Emprendedores>.toOneBacklink(12, object.id,
                      (Emprendedores srcObject) => srcObject.comunidades):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toOneBacklink(23, object.id,
                      (Emprendimientos srcObject) => srcObject.comunidad):
                  object.emprendimientos
            },
        getId: (Comunidades object) => object.id,
        setId: (Comunidades object, int id) {
          object.id = id;
        },
        objectToFB: (Comunidades object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.municipios.targetId);
          fbb.addOffset(6, idDBROffset);
          fbb.addBool(7, object.activo);
          fbb.addInt64(8, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Comunidades(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));
          object.municipios.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.municipios.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toOneBacklink(12, object.id,
                  (Emprendedores srcObject) => srcObject.comunidades),
              store.box<Comunidades>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(23, object.id,
                  (Emprendimientos srcObject) => srcObject.comunidad),
              store.box<Comunidades>());
          return object;
        }),
    Emprendedores: EntityDefinition<Emprendedores>(
        model: _entities[7],
        toOneRelations: (Emprendedores object) =>
            [object.comunidades, object.statusSync, object.emprendimiento],
        toManyRelations: (Emprendedores object) =>
            {RelInfo<Emprendedores>.toMany(9, object.id): object.bitacora},
        getId: (Emprendedores object) => object.id,
        setId: (Emprendedores object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendedores object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final curpOffset = fbb.writeString(object.curp);
          final integrantesFamiliaOffset =
              fbb.writeString(object.integrantesFamilia);
          final telefonoOffset = fbb.writeString(object.telefono);
          final comentariosOffset = fbb.writeString(object.comentarios);
          final imagenOffset = fbb.writeString(object.imagen);
          final apellidosOffset = fbb.writeString(object.apellidos);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(4, object.nacimiento.millisecondsSinceEpoch);
          fbb.addOffset(5, curpOffset);
          fbb.addOffset(6, integrantesFamiliaOffset);
          fbb.addOffset(7, telefonoOffset);
          fbb.addOffset(8, comentariosOffset);
          fbb.addInt64(9, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(11, object.comunidades.targetId);
          fbb.addInt64(12, object.statusSync.targetId);
          fbb.addInt64(13, object.emprendimiento.targetId);
          fbb.addOffset(14, imagenOffset);
          fbb.addOffset(15, apellidosOffset);
          fbb.addOffset(17, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendedores(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellidos: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              nacimiento: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              curp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              integrantesFamilia: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              comentarios:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 38));
          object.comunidades.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.comunidades.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.statusSync.attach(store);
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.emprendimiento.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<Emprendedores>.toMany(9, object.id),
              store.box<Emprendedores>());
          return object;
        }),
    Estados: EntityDefinition<Estados>(
        model: _entities[8],
        toOneRelations: (Estados object) => [object.statusSync],
        toManyRelations: (Estados object) => {
              RelInfo<Municipios>.toOneBacklink(5, object.id,
                      (Municipios srcObject) => srcObject.estados):
                  object.municipios
            },
        getId: (Estados object) => object.id,
        setId: (Estados object, int id) {
          object.id = id;
        },
        objectToFB: (Estados object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(5, idDBROffset);
          fbb.addBool(6, object.activo);
          fbb.addInt64(7, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Estados(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.municipios,
              store,
              RelInfo<Municipios>.toOneBacklink(
                  5, object.id, (Municipios srcObject) => srcObject.estados),
              store.box<Estados>());
          return object;
        }),
    Municipios: EntityDefinition<Municipios>(
        model: _entities[9],
        toOneRelations: (Municipios object) =>
            [object.estados, object.statusSync],
        toManyRelations: (Municipios object) => {
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                      (Comunidades srcObject) => srcObject.municipios):
                  object.comunidades
            },
        getId: (Municipios object) => object.id,
        setId: (Municipios object, int id) {
          object.id = id;
        },
        objectToFB: (Municipios object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(4, object.estados.targetId);
          fbb.addOffset(6, idDBROffset);
          fbb.addBool(7, object.activo);
          fbb.addInt64(8, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Municipios(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));
          object.estados.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.estados.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.comunidades,
              store,
              RelInfo<Comunidades>.toOneBacklink(5, object.id,
                  (Comunidades srcObject) => srcObject.municipios),
              store.box<Municipios>());
          return object;
        }),
    Jornadas: EntityDefinition<Jornadas>(
        model: _entities[10],
        toOneRelations: (Jornadas object) =>
            [object.emprendimiento, object.tarea, object.statusSync],
        toManyRelations: (Jornadas object) => {
              RelInfo<Jornadas>.toMany(10, object.id): object.bitacora,
              RelInfo<Jornadas>.toMany(15, object.id): object.documentos
            },
        getId: (Jornadas object) => object.id,
        setId: (Jornadas object, int id) {
          object.id = id;
        },
        objectToFB: (Jornadas object, fb.Builder fbb) {
          final numJornadaOffset = fbb.writeString(object.numJornada);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, numJornadaOffset);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.emprendimiento.targetId);
          fbb.addInt64(6, object.tarea.targetId);
          fbb.addInt64(7, object.statusSync.targetId);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(11, object.fechaRevision.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Jornadas(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              numJornada: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0)),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.emprendimiento.attach(store);
          object.tarea.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tarea.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(object.bitacora, store,
              RelInfo<Jornadas>.toMany(10, object.id), store.box<Jornadas>());
          InternalToManyAccess.setRelInfo(object.documentos, store,
              RelInfo<Jornadas>.toMany(15, object.id), store.box<Jornadas>());
          return object;
        }),
    StatusSync: EntityDefinition<StatusSync>(
        model: _entities[11],
        toOneRelations: (StatusSync object) => [],
        toManyRelations: (StatusSync object) => {
              RelInfo<Emprendedores>.toOneBacklink(13, object.id,
                      (Emprendedores srcObject) => srcObject.statusSync):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toOneBacklink(15, object.id,
                      (Emprendimientos srcObject) => srcObject.statusSync):
                  object.emprendimientos,
              RelInfo<Tareas>.toOneBacklink(13, object.id,
                  (Tareas srcObject) => srcObject.statusSync): object.tareas,
              RelInfo<Consultorias>.toOneBacklink(8, object.id,
                      (Consultorias srcObject) => srcObject.statusSync):
                  object.consultorias,
              RelInfo<Usuarios>.toOneBacklink(14, object.id,
                      (Usuarios srcObject) => srcObject.statusSync):
                  object.usuarios,
              RelInfo<Jornadas>.toOneBacklink(8, object.id,
                      (Jornadas srcObject) => srcObject.statusSync):
                  object.jornadas,
              RelInfo<Comunidades>.toOneBacklink(9, object.id,
                      (Comunidades srcObject) => srcObject.statusSync):
                  object.comunidades,
              RelInfo<Municipios>.toOneBacklink(9, object.id,
                      (Municipios srcObject) => srcObject.statusSync):
                  object.municipios,
              RelInfo<Estados>.toOneBacklink(8, object.id,
                  (Estados srcObject) => srcObject.statusSync): object.estados,
              RelInfo<ClasificacionEmp>.toOneBacklink(6, object.id,
                      (ClasificacionEmp srcObject) => srcObject.statusSync):
                  object.clasificacionesEmp,
              RelInfo<FasesEmp>.toOneBacklink(5, object.id,
                      (FasesEmp srcObject) => srcObject.statusSync):
                  object.fasesEmp,
              RelInfo<PrioridadEmp>.toOneBacklink(5, object.id,
                      (PrioridadEmp srcObject) => srcObject.statusSync):
                  object.prioridadesEmp,
              RelInfo<ProductosEmp>.toOneBacklink(10, object.id,
                      (ProductosEmp srcObject) => srcObject.statusSync):
                  object.productosEmp,
              RelInfo<ProductosCot>.toOneBacklink(11, object.id,
                      (ProductosCot srcObject) => srcObject.statusSync):
                  object.productosCot,
              RelInfo<FamiliaInversion>.toOneBacklink(6, object.id,
                      (FamiliaInversion srcObject) => srcObject.statusSync):
                  object.familiasInversion,
              RelInfo<UnidadMedida>.toOneBacklink(6, object.id,
                      (UnidadMedida srcObject) => srcObject.statusSync):
                  object.unidadesMedida
            },
        getId: (StatusSync object) => object.id,
        setId: (StatusSync object, int id) {
          object.id = id;
        },
        objectToFB: (StatusSync object, fb.Builder fbb) {
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, statusOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = StatusSync(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toOneBacklink(13, object.id,
                  (Emprendedores srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toOneBacklink(15, object.id,
                  (Emprendimientos srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toOneBacklink(
                  13, object.id, (Tareas srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toOneBacklink(8, object.id,
                  (Consultorias srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Usuarios>.toOneBacklink(
                  14, object.id, (Usuarios srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Jornadas>.toOneBacklink(
                  8, object.id, (Jornadas srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.comunidades,
              store,
              RelInfo<Comunidades>.toOneBacklink(9, object.id,
                  (Comunidades srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.municipios,
              store,
              RelInfo<Municipios>.toOneBacklink(
                  9, object.id, (Municipios srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.estados,
              store,
              RelInfo<Estados>.toOneBacklink(
                  8, object.id, (Estados srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.clasificacionesEmp,
              store,
              RelInfo<ClasificacionEmp>.toOneBacklink(6, object.id,
                  (ClasificacionEmp srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.fasesEmp,
              store,
              RelInfo<FasesEmp>.toOneBacklink(
                  5, object.id, (FasesEmp srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.prioridadesEmp,
              store,
              RelInfo<PrioridadEmp>.toOneBacklink(5, object.id,
                  (PrioridadEmp srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<ProductosEmp>.toOneBacklink(10, object.id,
                  (ProductosEmp srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.productosCot,
              store,
              RelInfo<ProductosCot>.toOneBacklink(11, object.id,
                  (ProductosCot srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.familiasInversion,
              store,
              RelInfo<FamiliaInversion>.toOneBacklink(6, object.id,
                  (FamiliaInversion srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          InternalToManyAccess.setRelInfo(
              object.unidadesMedida,
              store,
              RelInfo<UnidadMedida>.toOneBacklink(6, object.id,
                  (UnidadMedida srcObject) => srcObject.statusSync),
              store.box<StatusSync>());
          return object;
        }),
    Bitacora: EntityDefinition<Bitacora>(
        model: _entities[12],
        toOneRelations: (Bitacora object) => [],
        toManyRelations: (Bitacora object) => {
              RelInfo<Emprendedores>.toManyBacklink(9, object.id):
                  object.emprendedores,
              RelInfo<Emprendimientos>.toManyBacklink(8, object.id):
                  object.emprendimientos,
              RelInfo<Tareas>.toOneBacklink(
                      16, object.id, (Tareas srcObject) => srcObject.bitacora):
                  object.tareas,
              RelInfo<Consultorias>.toManyBacklink(25, object.id):
                  object.consultorias,
              RelInfo<Usuarios>.toOneBacklink(17, object.id,
                  (Usuarios srcObject) => srcObject.bitacora): object.usuarios,
              RelInfo<Jornadas>.toManyBacklink(10, object.id): object.jornadas,
              RelInfo<ProductosEmp>.toManyBacklink(22, object.id):
                  object.productosEmp,
              RelInfo<ProductosCot>.toManyBacklink(24, object.id):
                  object.productosCot
            },
        getId: (Bitacora object) => object.id,
        setId: (Bitacora object, int id) {
          object.id = id;
        },
        objectToFB: (Bitacora object, fb.Builder fbb) {
          final instruccionesOffset = fbb.writeString(object.instrucciones);
          final usuarioOffset = fbb.writeString(object.usuario);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync?.millisecondsSinceEpoch);
          fbb.addOffset(8, instruccionesOffset);
          fbb.addOffset(10, usuarioOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fechaSyncValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Bitacora(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              usuario: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              instrucciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: fechaSyncValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(fechaSyncValue));
          InternalToManyAccess.setRelInfo(
              object.emprendedores,
              store,
              RelInfo<Emprendedores>.toManyBacklink(9, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<Emprendimientos>.toManyBacklink(8, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.tareas,
              store,
              RelInfo<Tareas>.toOneBacklink(
                  16, object.id, (Tareas srcObject) => srcObject.bitacora),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<Consultorias>.toManyBacklink(25, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Usuarios>.toOneBacklink(
                  17, object.id, (Usuarios srcObject) => srcObject.bitacora),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.jornadas,
              store,
              RelInfo<Jornadas>.toManyBacklink(10, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<ProductosEmp>.toManyBacklink(22, object.id),
              store.box<Bitacora>());
          InternalToManyAccess.setRelInfo(
              object.productosCot,
              store,
              RelInfo<ProductosCot>.toManyBacklink(24, object.id),
              store.box<Bitacora>());
          return object;
        }),
    VariablesUsuario: EntityDefinition<VariablesUsuario>(
        model: _entities[13],
        toOneRelations: (VariablesUsuario object) => [],
        toManyRelations: (VariablesUsuario object) => {
              RelInfo<Usuarios>.toOneBacklink(18, object.id,
                      (Usuarios srcObject) => srcObject.variablesUsuario):
                  object.usuarios
            },
        getId: (VariablesUsuario object) => object.id,
        setId: (VariablesUsuario object, int id) {
          object.id = id;
        },
        objectToFB: (VariablesUsuario object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.emprendedores);
          fbb.addBool(2, object.emprendimientos);
          fbb.addInt64(3, object.fechaActualizacion.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VariablesUsuario(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              emprendedores:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              emprendimientos:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaActualizacion: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));
          InternalToManyAccess.setRelInfo(
              object.usuarios,
              store,
              RelInfo<Usuarios>.toOneBacklink(18, object.id,
                  (Usuarios srcObject) => srcObject.variablesUsuario),
              store.box<VariablesUsuario>());
          return object;
        }),
    AmbitoConsultoria: EntityDefinition<AmbitoConsultoria>(
        model: _entities[14],
        toOneRelations: (AmbitoConsultoria object) =>
            [object.statusSync, object.bitacora],
        toManyRelations: (AmbitoConsultoria object) => {
              RelInfo<AmbitoConsultoria>.toMany(11, object.id):
                  object.consultorias
            },
        getId: (AmbitoConsultoria object) => object.id,
        setId: (AmbitoConsultoria object, int id) {
          object.id = id;
        },
        objectToFB: (AmbitoConsultoria object, fb.Builder fbb) {
          final nombreAmbitoOffset = fbb.writeString(object.nombreAmbito);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreAmbitoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.statusSync.targetId);
          fbb.addInt64(6, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AmbitoConsultoria(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreAmbito: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.bitacora.attach(store);
          InternalToManyAccess.setRelInfo(
              object.consultorias,
              store,
              RelInfo<AmbitoConsultoria>.toMany(11, object.id),
              store.box<AmbitoConsultoria>());
          return object;
        }),
    AreaCirculo: EntityDefinition<AreaCirculo>(
        model: _entities[15],
        toOneRelations: (AreaCirculo object) =>
            [object.consultoria, object.statusSync, object.bitacora],
        toManyRelations: (AreaCirculo object) => {},
        getId: (AreaCirculo object) => object.id,
        setId: (AreaCirculo object, int id) {
          object.id = id;
        },
        objectToFB: (AreaCirculo object, fb.Builder fbb) {
          final nombreAreaOffset = fbb.writeString(object.nombreArea);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreAreaOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.consultoria.targetId);
          fbb.addInt64(6, object.statusSync.targetId);
          fbb.addInt64(7, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AreaCirculo(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreArea: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.consultoria.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.bitacora.attach(store);
          return object;
        }),
    Bancos: EntityDefinition<Bancos>(
        model: _entities[16],
        toOneRelations: (Bancos object) => [],
        toManyRelations: (Bancos object) => {
              RelInfo<Proveedores>.toOneBacklink(15, object.id,
                      (Proveedores srcObject) => srcObject.banco):
                  object.proveedores
            },
        getId: (Bancos object) => object.id,
        setId: (Bancos object, int id) {
          object.id = id;
        },
        objectToFB: (Bancos object, fb.Builder fbb) {
          final bancoOffset = fbb.writeString(object.banco);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bancoOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Bancos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              banco: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Proveedores>.toOneBacklink(
                  15, object.id, (Proveedores srcObject) => srcObject.banco),
              store.box<Bancos>());
          return object;
        }),
    ClasificacionEmp: EntityDefinition<ClasificacionEmp>(
        model: _entities[17],
        toOneRelations: (ClasificacionEmp object) => [object.statusSync],
        toManyRelations: (ClasificacionEmp object) => {
              RelInfo<ClasificacionEmp>.toMany(21, object.id):
                  object.categoriasProyecto
            },
        getId: (ClasificacionEmp object) => object.id,
        setId: (ClasificacionEmp object, int id) {
          object.id = id;
        },
        objectToFB: (ClasificacionEmp object, fb.Builder fbb) {
          final clasificacionOffset = fbb.writeString(object.clasificacion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, clasificacionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClasificacionEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              clasificacion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.categoriasProyecto,
              store,
              RelInfo<ClasificacionEmp>.toMany(21, object.id),
              store.box<ClasificacionEmp>());
          return object;
        }),
    CondicionesPago: EntityDefinition<CondicionesPago>(
        model: _entities[18],
        toOneRelations: (CondicionesPago object) => [],
        toManyRelations: (CondicionesPago object) => {
              RelInfo<Proveedores>.toOneBacklink(14, object.id,
                      (Proveedores srcObject) => srcObject.condicionPago):
                  object.proveedores
            },
        getId: (CondicionesPago object) => object.id,
        setId: (CondicionesPago object, int id) {
          object.id = id;
        },
        objectToFB: (CondicionesPago object, fb.Builder fbb) {
          final condicionOffset = fbb.writeString(object.condicion);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, condicionOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CondicionesPago(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              condicion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Proveedores>.toOneBacklink(14, object.id,
                  (Proveedores srcObject) => srcObject.condicionPago),
              store.box<CondicionesPago>());
          return object;
        }),
    Documentos: EntityDefinition<Documentos>(
        model: _entities[19],
        toOneRelations: (Documentos object) => [
              object.tipoDocumento,
              object.jornada,
              object.consultoria,
              object.usuario,
              object.statusSync,
              object.bitacora
            ],
        toManyRelations: (Documentos object) => {},
        getId: (Documentos object) => object.id,
        setId: (Documentos object, int id) {
          object.id = id;
        },
        objectToFB: (Documentos object, fb.Builder fbb) {
          final nombreArchivoOffset = fbb.writeString(object.nombreArchivo);
          final archivoOffset = fbb.writeString(object.archivo);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreArchivoOffset);
          fbb.addInt64(2, object.fechaCarga.millisecondsSinceEpoch);
          fbb.addOffset(3, archivoOffset);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(5, idDBROffset);
          fbb.addInt64(6, object.tipoDocumento.targetId);
          fbb.addInt64(7, object.jornada.targetId);
          fbb.addInt64(8, object.consultoria.targetId);
          fbb.addInt64(9, object.usuario.targetId);
          fbb.addInt64(10, object.statusSync.targetId);
          fbb.addInt64(11, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Documentos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreArchivo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaCarga: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              archivo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));
          object.tipoDocumento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.tipoDocumento.attach(store);
          object.jornada.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.jornada.attach(store);
          object.consultoria.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.consultoria.attach(store);
          object.usuario.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.usuario.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.bitacora.attach(store);
          return object;
        }),
    FasesEmp: EntityDefinition<FasesEmp>(
        model: _entities[20],
        toOneRelations: (FasesEmp object) => [object.statusSync],
        toManyRelations: (FasesEmp object) =>
            {RelInfo<FasesEmp>.toMany(14, object.id): object.emprendimientos},
        getId: (FasesEmp object) => object.id,
        setId: (FasesEmp object, int id) {
          object.id = id;
        },
        objectToFB: (FasesEmp object, fb.Builder fbb) {
          final faseOffset = fbb.writeString(object.fase);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, faseOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FasesEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fase: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(object.emprendimientos, store,
              RelInfo<FasesEmp>.toMany(14, object.id), store.box<FasesEmp>());
          return object;
        }),
    PrioridadEmp: EntityDefinition<PrioridadEmp>(
        model: _entities[21],
        toOneRelations: (PrioridadEmp object) => [object.statusSync],
        toManyRelations: (PrioridadEmp object) => {
              RelInfo<PrioridadEmp>.toMany(16, object.id):
                  object.emprendimientos
            },
        getId: (PrioridadEmp object) => object.id,
        setId: (PrioridadEmp object, int id) {
          object.id = id;
        },
        objectToFB: (PrioridadEmp object, fb.Builder fbb) {
          final prioridadOffset = fbb.writeString(object.prioridad);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, prioridadOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PrioridadEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              prioridad: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<PrioridadEmp>.toMany(16, object.id),
              store.box<PrioridadEmp>());
          return object;
        }),
    Proveedores: EntityDefinition<Proveedores>(
        model: _entities[22],
        toOneRelations: (Proveedores object) => [
              object.tipoProveedor,
              object.comunidades,
              object.condicionPago,
              object.banco
            ],
        toManyRelations: (Proveedores object) => {},
        getId: (Proveedores object) => object.id,
        setId: (Proveedores object, int id) {
          object.id = id;
        },
        objectToFB: (Proveedores object, fb.Builder fbb) {
          final nombreFiscalOffset = fbb.writeString(object.nombreFiscal);
          final rfcOffset = fbb.writeString(object.rfc);
          final direccionOffset = fbb.writeString(object.direccion);
          final nombreEncargadoOffset = fbb.writeString(object.nombreEncargado);
          final clabeOffset = fbb.writeString(object.clabe);
          final telefonoOffset = fbb.writeString(object.telefono);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreFiscalOffset);
          fbb.addOffset(2, rfcOffset);
          fbb.addOffset(3, direccionOffset);
          fbb.addOffset(4, nombreEncargadoOffset);
          fbb.addOffset(5, clabeOffset);
          fbb.addOffset(6, telefonoOffset);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(8, object.registradoPor);
          fbb.addBool(9, object.archivado);
          fbb.addOffset(10, idDBROffset);
          fbb.addInt64(11, object.tipoProveedor.targetId);
          fbb.addInt64(12, object.comunidades.targetId);
          fbb.addInt64(13, object.condicionPago.targetId);
          fbb.addInt64(14, object.banco.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Proveedores(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombreFiscal: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              rfc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              direccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              nombreEncargado: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              clabe: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              registradoPor: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              archivado: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24));
          object.tipoProveedor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.tipoProveedor.attach(store);
          object.comunidades.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.comunidades.attach(store);
          object.condicionPago.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.condicionPago.attach(store);
          object.banco.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.banco.attach(store);
          return object;
        }),
    Roles: EntityDefinition<Roles>(
        model: _entities[23],
        toOneRelations: (Roles object) => [object.statusSync, object.bitacora],
        toManyRelations: (Roles object) =>
            {RelInfo<Roles>.toMany(17, object.id): object.usuarios},
        getId: (Roles object) => object.id,
        setId: (Roles object, int id) {
          object.id = id;
        },
        objectToFB: (Roles object, fb.Builder fbb) {
          final rolOffset = fbb.writeString(object.rol);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rolOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.statusSync.targetId);
          fbb.addInt64(5, object.bitacora.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Roles(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              rol: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.statusSync.attach(store);
          object.bitacora.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.bitacora.attach(store);
          InternalToManyAccess.setRelInfo(object.usuarios, store,
              RelInfo<Roles>.toMany(17, object.id), store.box<Roles>());
          return object;
        }),
    TipoDocumentos: EntityDefinition<TipoDocumentos>(
        model: _entities[24],
        toOneRelations: (TipoDocumentos object) => [],
        toManyRelations: (TipoDocumentos object) =>
            {RelInfo<TipoDocumentos>.toMany(18, object.id): object.documentos},
        getId: (TipoDocumentos object) => object.id,
        setId: (TipoDocumentos object, int id) {
          object.id = id;
        },
        objectToFB: (TipoDocumentos object, fb.Builder fbb) {
          final tipoOffset = fbb.writeString(object.tipo);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoDocumentos(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)));
          InternalToManyAccess.setRelInfo(
              object.documentos,
              store,
              RelInfo<TipoDocumentos>.toMany(18, object.id),
              store.box<TipoDocumentos>());
          return object;
        }),
    TipoProveedor: EntityDefinition<TipoProveedor>(
        model: _entities[25],
        toOneRelations: (TipoProveedor object) => [],
        toManyRelations: (TipoProveedor object) => {
              RelInfo<Proveedores>.toOneBacklink(12, object.id,
                      (Proveedores srcObject) => srcObject.tipoProveedor):
                  object.proveedores
            },
        getId: (TipoProveedor object) => object.id,
        setId: (TipoProveedor object, int id) {
          object.id = id;
        },
        objectToFB: (TipoProveedor object, fb.Builder fbb) {
          final tipoOffset = fbb.writeString(object.tipo);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoOffset);
          fbb.addBool(2, object.activo);
          fbb.addInt64(3, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(4, idDBROffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TipoProveedor(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tipo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              activo:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          InternalToManyAccess.setRelInfo(
              object.proveedores,
              store,
              RelInfo<Proveedores>.toOneBacklink(12, object.id,
                  (Proveedores srcObject) => srcObject.tipoProveedor),
              store.box<TipoProveedor>());
          return object;
        }),
    FamiliaInversion: EntityDefinition<FamiliaInversion>(
        model: _entities[26],
        toOneRelations: (FamiliaInversion object) => [object.statusSync],
        toManyRelations: (FamiliaInversion object) => {},
        getId: (FamiliaInversion object) => object.id,
        setId: (FamiliaInversion object, int id) {
          object.id = id;
        },
        objectToFB: (FamiliaInversion object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FamiliaInversion(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.statusSync.attach(store);
          return object;
        }),
    ProductosEmp: EntityDefinition<ProductosEmp>(
        model: _entities[27],
        toOneRelations: (ProductosEmp object) => [
              object.statusSync,
              object.emprendimientos,
              object.familiaInversion,
              object.unidadMedida
            ],
        toManyRelations: (ProductosEmp object) => {
              RelInfo<ProductosEmp>.toMany(22, object.id): object.bitacora,
              RelInfo<Vendidos>.toOneBacklink(10, object.id,
                      (Vendidos srcObject) => srcObject.productoEmp):
                  object.vendidos
            },
        getId: (ProductosEmp object) => object.id,
        setId: (ProductosEmp object, int id) {
          object.id = id;
        },
        objectToFB: (ProductosEmp object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final imagenOffset = fbb.writeString(object.imagen);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final proveedorOffset = fbb.writeString(object.proveedor);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, imagenOffset);
          fbb.addFloat64(4, object.costo);
          fbb.addInt64(5, object.precioVenta);
          fbb.addInt64(6, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(7, object.archivado);
          fbb.addOffset(8, idDBROffset);
          fbb.addInt64(9, object.statusSync.targetId);
          fbb.addInt64(10, object.emprendimientos.targetId);
          fbb.addInt64(11, object.familiaInversion.targetId);
          fbb.addInt64(12, object.unidadMedida.targetId);
          fbb.addInt64(13, object.cantidad);
          fbb.addOffset(14, proveedorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductosEmp(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              precioVenta:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              proveedor: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.statusSync.attach(store);
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.emprendimientos.attach(store);
          object.familiaInversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.familiaInversion.attach(store);
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.unidadMedida.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProductosEmp>.toMany(22, object.id),
              store.box<ProductosEmp>());
          InternalToManyAccess.setRelInfo(
              object.vendidos,
              store,
              RelInfo<Vendidos>.toOneBacklink(
                  10, object.id, (Vendidos srcObject) => srcObject.productoEmp),
              store.box<ProductosEmp>());
          return object;
        }),
    CatalogoProyecto: EntityDefinition<CatalogoProyecto>(
        model: _entities[28],
        toOneRelations: (CatalogoProyecto object) =>
            [object.clasificacionEmp, object.statusSync],
        toManyRelations: (CatalogoProyecto object) => {
              RelInfo<CatalogoProyecto>.toMany(20, object.id):
                  object.emprendimientos
            },
        getId: (CatalogoProyecto object) => object.id,
        setId: (CatalogoProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (CatalogoProyecto object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addOffset(3, idDBROffset);
          fbb.addInt64(4, object.clasificacionEmp.targetId);
          fbb.addInt64(5, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CatalogoProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.clasificacionEmp.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.clasificacionEmp.attach(store);
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.emprendimientos,
              store,
              RelInfo<CatalogoProyecto>.toMany(20, object.id),
              store.box<CatalogoProyecto>());
          return object;
        }),
    UnidadMedida: EntityDefinition<UnidadMedida>(
        model: _entities[29],
        toOneRelations: (UnidadMedida object) => [object.statusSync],
        toManyRelations: (UnidadMedida object) =>
            {RelInfo<UnidadMedida>.toMany(23, object.id): object.productosEmp},
        getId: (UnidadMedida object) => object.id,
        setId: (UnidadMedida object, int id) {
          object.id = id;
        },
        objectToFB: (UnidadMedida object, fb.Builder fbb) {
          final unidadMedidaOffset = fbb.writeString(object.unidadMedida);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, unidadMedidaOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(3, object.activo);
          fbb.addOffset(4, idDBROffset);
          fbb.addInt64(5, object.statusSync.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UnidadMedida(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              unidadMedida: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              activo: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              idDBR: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.statusSync.attach(store);
          InternalToManyAccess.setRelInfo(
              object.productosEmp,
              store,
              RelInfo<UnidadMedida>.toMany(23, object.id),
              store.box<UnidadMedida>());
          return object;
        }),
    ProductosCot: EntityDefinition<ProductosCot>(
        model: _entities[30],
        toOneRelations: (ProductosCot object) => [
              object.statusSync,
              object.emprendimientos,
              object.familiaInversion,
              object.unidadMedida
            ],
        toManyRelations: (ProductosCot object) =>
            {RelInfo<ProductosCot>.toMany(24, object.id): object.bitacora},
        getId: (ProductosCot object) => object.id,
        setId: (ProductosCot object, int id) {
          object.id = id;
        },
        objectToFB: (ProductosCot object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          final imagenOffset = fbb.writeString(object.imagen);
          final idDBROffset =
              object.idDBR == null ? null : fbb.writeString(object.idDBR!);
          final proveedorOffset = fbb.writeString(object.proveedor);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, descripcionOffset);
          fbb.addOffset(3, imagenOffset);
          fbb.addFloat64(4, object.costo);
          fbb.addInt64(5, object.precioVenta);
          fbb.addInt64(6, object.cantidad);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addBool(8, object.archivado);
          fbb.addOffset(9, idDBROffset);
          fbb.addInt64(10, object.statusSync.targetId);
          fbb.addInt64(11, object.emprendimientos.targetId);
          fbb.addInt64(12, object.familiaInversion.targetId);
          fbb.addInt64(13, object.unidadMedida.targetId);
          fbb.addOffset(14, proveedorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductosCot(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              costo:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              precioVenta:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              cantidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              archivado: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              idDBR: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              proveedor: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''));
          object.statusSync.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.statusSync.attach(store);
          object.emprendimientos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.emprendimientos.attach(store);
          object.familiaInversion.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.familiaInversion.attach(store);
          object.unidadMedida.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.unidadMedida.attach(store);
          InternalToManyAccess.setRelInfo(
              object.bitacora,
              store,
              RelInfo<ProductosCot>.toMany(24, object.id),
              store.box<ProductosCot>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Emprendimientos] entity fields to define ObjectBox queries.
class Emprendimientos_ {
  /// see [Emprendimientos.id]
  static final id =
      QueryIntegerProperty<Emprendimientos>(_entities[0].properties[0]);

  /// see [Emprendimientos.imagen]
  static final imagen =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[1]);

  /// see [Emprendimientos.nombre]
  static final nombre =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[2]);

  /// see [Emprendimientos.descripcion]
  static final descripcion =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[3]);

  /// see [Emprendimientos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendimientos>(_entities[0].properties[4]);

  /// see [Emprendimientos.emprendedor]
  static final emprendedor = QueryRelationToOne<Emprendimientos, Emprendedores>(
      _entities[0].properties[5]);

  /// see [Emprendimientos.statusSync]
  static final statusSync = QueryRelationToOne<Emprendimientos, StatusSync>(
      _entities[0].properties[6]);

  /// see [Emprendimientos.activo]
  static final activo =
      QueryBooleanProperty<Emprendimientos>(_entities[0].properties[7]);

  /// see [Emprendimientos.archivado]
  static final archivado =
      QueryBooleanProperty<Emprendimientos>(_entities[0].properties[8]);

  /// see [Emprendimientos.idDBR]
  static final idDBR =
      QueryStringProperty<Emprendimientos>(_entities[0].properties[9]);

  /// see [Emprendimientos.comunidad]
  static final comunidad = QueryRelationToOne<Emprendimientos, Comunidades>(
      _entities[0].properties[10]);

  /// see [Emprendimientos.usuario]
  static final usuario = QueryRelationToOne<Emprendimientos, Usuarios>(
      _entities[0].properties[11]);

  /// see [Emprendimientos.prioridadEmp]
  static final prioridadEmp = QueryRelationToOne<Emprendimientos, PrioridadEmp>(
      _entities[0].properties[12]);

  /// see [Emprendimientos.catalogoProyecto]
  static final catalogoProyecto =
      QueryRelationToOne<Emprendimientos, CatalogoProyecto>(
          _entities[0].properties[13]);

  /// see [Emprendimientos.jornadas]
  static final jornadas =
      QueryRelationToMany<Emprendimientos, Jornadas>(_entities[0].relations[0]);

  /// see [Emprendimientos.bitacora]
  static final bitacora =
      QueryRelationToMany<Emprendimientos, Bitacora>(_entities[0].relations[1]);

  /// see [Emprendimientos.proveedores]
  static final proveedores = QueryRelationToMany<Emprendimientos, Proveedores>(
      _entities[0].relations[2]);
}

/// [Usuarios] entity fields to define ObjectBox queries.
class Usuarios_ {
  /// see [Usuarios.id]
  static final id = QueryIntegerProperty<Usuarios>(_entities[1].properties[0]);

  /// see [Usuarios.nombre]
  static final nombre =
      QueryStringProperty<Usuarios>(_entities[1].properties[1]);

  /// see [Usuarios.apellidoP]
  static final apellidoP =
      QueryStringProperty<Usuarios>(_entities[1].properties[2]);

  /// see [Usuarios.apellidoM]
  static final apellidoM =
      QueryStringProperty<Usuarios>(_entities[1].properties[3]);

  /// see [Usuarios.nacimiento]
  static final nacimiento =
      QueryIntegerProperty<Usuarios>(_entities[1].properties[4]);

  /// see [Usuarios.telefono]
  static final telefono =
      QueryStringProperty<Usuarios>(_entities[1].properties[5]);

  /// see [Usuarios.celular]
  static final celular =
      QueryStringProperty<Usuarios>(_entities[1].properties[6]);

  /// see [Usuarios.correo]
  static final correo =
      QueryStringProperty<Usuarios>(_entities[1].properties[7]);

  /// see [Usuarios.password]
  static final password =
      QueryStringProperty<Usuarios>(_entities[1].properties[8]);

  /// see [Usuarios.imagen]
  static final imagen =
      QueryStringProperty<Usuarios>(_entities[1].properties[9]);

  /// see [Usuarios.rol]
  static final rol =
      QueryIntegerProperty<Usuarios>(_entities[1].properties[10]);

  /// see [Usuarios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Usuarios>(_entities[1].properties[11]);

  /// see [Usuarios.statusSync]
  static final statusSync =
      QueryRelationToOne<Usuarios, StatusSync>(_entities[1].properties[12]);

  /// see [Usuarios.idDBR]
  static final idDBR =
      QueryStringProperty<Usuarios>(_entities[1].properties[13]);

  /// see [Usuarios.bitacora]
  static final bitacora =
      QueryRelationToOne<Usuarios, Bitacora>(_entities[1].properties[14]);

  /// see [Usuarios.variablesUsuario]
  static final variablesUsuario =
      QueryRelationToOne<Usuarios, VariablesUsuario>(
          _entities[1].properties[15]);

  /// see [Usuarios.archivado]
  static final archivado =
      QueryBooleanProperty<Usuarios>(_entities[1].properties[16]);

  /// see [Usuarios.documentos]
  static final documentos =
      QueryRelationToMany<Usuarios, Documentos>(_entities[1].relations[0]);
}

/// [Ventas] entity fields to define ObjectBox queries.
class Ventas_ {
  /// see [Ventas.id]
  static final id = QueryIntegerProperty<Ventas>(_entities[2].properties[0]);

  /// see [Ventas.fechaInicio]
  static final fechaInicio =
      QueryIntegerProperty<Ventas>(_entities[2].properties[1]);

  /// see [Ventas.fechaTermino]
  static final fechaTermino =
      QueryIntegerProperty<Ventas>(_entities[2].properties[2]);

  /// see [Ventas.total]
  static final total = QueryIntegerProperty<Ventas>(_entities[2].properties[3]);

  /// see [Ventas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Ventas>(_entities[2].properties[4]);

  /// see [Ventas.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Ventas>(_entities[2].properties[5]);

  /// see [Ventas.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<Ventas, Emprendimientos>(_entities[2].properties[6]);

  /// see [Ventas.idDBR]
  static final idDBR = QueryStringProperty<Ventas>(_entities[2].properties[7]);
}

/// [Consultorias] entity fields to define ObjectBox queries.
class Consultorias_ {
  /// see [Consultorias.id]
  static final id =
      QueryIntegerProperty<Consultorias>(_entities[3].properties[0]);

  /// see [Consultorias.documentos]
  static final documentos =
      QueryStringVectorProperty<Consultorias>(_entities[3].properties[1]);

  /// see [Consultorias.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Consultorias>(_entities[3].properties[2]);

  /// see [Consultorias.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Consultorias, Emprendimientos>(
          _entities[3].properties[3]);

  /// see [Consultorias.statusSync]
  static final statusSync =
      QueryRelationToOne<Consultorias, StatusSync>(_entities[3].properties[4]);

  /// see [Consultorias.idDBR]
  static final idDBR =
      QueryStringProperty<Consultorias>(_entities[3].properties[5]);

  /// see [Consultorias.areaCirculo]
  static final areaCirculo =
      QueryRelationToOne<Consultorias, AreaCirculo>(_entities[3].properties[6]);

  /// see [Consultorias.ambitoConsultoria]
  static final ambitoConsultoria =
      QueryRelationToOne<Consultorias, AmbitoConsultoria>(
          _entities[3].properties[7]);

  /// see [Consultorias.tarea]
  static final tarea =
      QueryRelationToOne<Consultorias, Tareas>(_entities[3].properties[8]);

  /// see [Consultorias.bitacora]
  static final bitacora =
      QueryRelationToMany<Consultorias, Bitacora>(_entities[3].relations[0]);
}

/// [Vendidos] entity fields to define ObjectBox queries.
class Vendidos_ {
  /// see [Vendidos.id]
  static final id = QueryIntegerProperty<Vendidos>(_entities[4].properties[0]);

  /// see [Vendidos.cantVendida]
  static final cantVendida =
      QueryIntegerProperty<Vendidos>(_entities[4].properties[1]);

  /// see [Vendidos.subtotal]
  static final subtotal =
      QueryIntegerProperty<Vendidos>(_entities[4].properties[2]);

  /// see [Vendidos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Vendidos>(_entities[4].properties[3]);

  /// see [Vendidos.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Vendidos>(_entities[4].properties[4]);

  /// see [Vendidos.ventas]
  static final ventas =
      QueryRelationToOne<Vendidos, Ventas>(_entities[4].properties[5]);

  /// see [Vendidos.idDBR]
  static final idDBR =
      QueryStringProperty<Vendidos>(_entities[4].properties[6]);

  /// see [Vendidos.productoEmp]
  static final productoEmp =
      QueryRelationToOne<Vendidos, ProductosEmp>(_entities[4].properties[7]);
}

/// [Tareas] entity fields to define ObjectBox queries.
class Tareas_ {
  /// see [Tareas.id]
  static final id = QueryIntegerProperty<Tareas>(_entities[5].properties[0]);

  /// see [Tareas.descripcion]
  static final descripcion =
      QueryStringProperty<Tareas>(_entities[5].properties[1]);

  /// see [Tareas.observacion]
  static final observacion =
      QueryStringProperty<Tareas>(_entities[5].properties[2]);

  /// see [Tareas.porcentaje]
  static final porcentaje =
      QueryIntegerProperty<Tareas>(_entities[5].properties[3]);

  /// see [Tareas.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Tareas>(_entities[5].properties[4]);

  /// see [Tareas.imagenes]
  static final imagenes =
      QueryStringVectorProperty<Tareas>(_entities[5].properties[5]);

  /// see [Tareas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Tareas>(_entities[5].properties[6]);

  /// see [Tareas.jornada]
  static final jornada =
      QueryRelationToOne<Tareas, Jornadas>(_entities[5].properties[7]);

  /// see [Tareas.consultoria]
  static final consultoria =
      QueryRelationToOne<Tareas, Consultorias>(_entities[5].properties[8]);

  /// see [Tareas.statusSync]
  static final statusSync =
      QueryRelationToOne<Tareas, StatusSync>(_entities[5].properties[9]);

  /// see [Tareas.idDBR]
  static final idDBR = QueryStringProperty<Tareas>(_entities[5].properties[10]);

  /// see [Tareas.bitacora]
  static final bitacora =
      QueryRelationToOne<Tareas, Bitacora>(_entities[5].properties[11]);

  /// see [Tareas.tarea]
  static final tarea = QueryStringProperty<Tareas>(_entities[5].properties[12]);
}

/// [Comunidades] entity fields to define ObjectBox queries.
class Comunidades_ {
  /// see [Comunidades.id]
  static final id =
      QueryIntegerProperty<Comunidades>(_entities[6].properties[0]);

  /// see [Comunidades.nombre]
  static final nombre =
      QueryStringProperty<Comunidades>(_entities[6].properties[1]);

  /// see [Comunidades.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Comunidades>(_entities[6].properties[2]);

  /// see [Comunidades.municipios]
  static final municipios =
      QueryRelationToOne<Comunidades, Municipios>(_entities[6].properties[3]);

  /// see [Comunidades.idDBR]
  static final idDBR =
      QueryStringProperty<Comunidades>(_entities[6].properties[4]);

  /// see [Comunidades.activo]
  static final activo =
      QueryBooleanProperty<Comunidades>(_entities[6].properties[5]);

  /// see [Comunidades.statusSync]
  static final statusSync =
      QueryRelationToOne<Comunidades, StatusSync>(_entities[6].properties[6]);
}

/// [Emprendedores] entity fields to define ObjectBox queries.
class Emprendedores_ {
  /// see [Emprendedores.id]
  static final id =
      QueryIntegerProperty<Emprendedores>(_entities[7].properties[0]);

  /// see [Emprendedores.nombre]
  static final nombre =
      QueryStringProperty<Emprendedores>(_entities[7].properties[1]);

  /// see [Emprendedores.nacimiento]
  static final nacimiento =
      QueryIntegerProperty<Emprendedores>(_entities[7].properties[2]);

  /// see [Emprendedores.curp]
  static final curp =
      QueryStringProperty<Emprendedores>(_entities[7].properties[3]);

  /// see [Emprendedores.integrantesFamilia]
  static final integrantesFamilia =
      QueryStringProperty<Emprendedores>(_entities[7].properties[4]);

  /// see [Emprendedores.telefono]
  static final telefono =
      QueryStringProperty<Emprendedores>(_entities[7].properties[5]);

  /// see [Emprendedores.comentarios]
  static final comentarios =
      QueryStringProperty<Emprendedores>(_entities[7].properties[6]);

  /// see [Emprendedores.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendedores>(_entities[7].properties[7]);

  /// see [Emprendedores.comunidades]
  static final comunidades = QueryRelationToOne<Emprendedores, Comunidades>(
      _entities[7].properties[8]);

  /// see [Emprendedores.statusSync]
  static final statusSync =
      QueryRelationToOne<Emprendedores, StatusSync>(_entities[7].properties[9]);

  /// see [Emprendedores.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Emprendedores, Emprendimientos>(
          _entities[7].properties[10]);

  /// see [Emprendedores.imagen]
  static final imagen =
      QueryStringProperty<Emprendedores>(_entities[7].properties[11]);

  /// see [Emprendedores.apellidos]
  static final apellidos =
      QueryStringProperty<Emprendedores>(_entities[7].properties[12]);

  /// see [Emprendedores.idDBR]
  static final idDBR =
      QueryStringProperty<Emprendedores>(_entities[7].properties[13]);

  /// see [Emprendedores.bitacora]
  static final bitacora =
      QueryRelationToMany<Emprendedores, Bitacora>(_entities[7].relations[0]);
}

/// [Estados] entity fields to define ObjectBox queries.
class Estados_ {
  /// see [Estados.id]
  static final id = QueryIntegerProperty<Estados>(_entities[8].properties[0]);

  /// see [Estados.nombre]
  static final nombre =
      QueryStringProperty<Estados>(_entities[8].properties[1]);

  /// see [Estados.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Estados>(_entities[8].properties[2]);

  /// see [Estados.idDBR]
  static final idDBR = QueryStringProperty<Estados>(_entities[8].properties[3]);

  /// see [Estados.activo]
  static final activo =
      QueryBooleanProperty<Estados>(_entities[8].properties[4]);

  /// see [Estados.statusSync]
  static final statusSync =
      QueryRelationToOne<Estados, StatusSync>(_entities[8].properties[5]);
}

/// [Municipios] entity fields to define ObjectBox queries.
class Municipios_ {
  /// see [Municipios.id]
  static final id =
      QueryIntegerProperty<Municipios>(_entities[9].properties[0]);

  /// see [Municipios.nombre]
  static final nombre =
      QueryStringProperty<Municipios>(_entities[9].properties[1]);

  /// see [Municipios.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Municipios>(_entities[9].properties[2]);

  /// see [Municipios.estados]
  static final estados =
      QueryRelationToOne<Municipios, Estados>(_entities[9].properties[3]);

  /// see [Municipios.idDBR]
  static final idDBR =
      QueryStringProperty<Municipios>(_entities[9].properties[4]);

  /// see [Municipios.activo]
  static final activo =
      QueryBooleanProperty<Municipios>(_entities[9].properties[5]);

  /// see [Municipios.statusSync]
  static final statusSync =
      QueryRelationToOne<Municipios, StatusSync>(_entities[9].properties[6]);
}

/// [Jornadas] entity fields to define ObjectBox queries.
class Jornadas_ {
  /// see [Jornadas.id]
  static final id = QueryIntegerProperty<Jornadas>(_entities[10].properties[0]);

  /// see [Jornadas.numJornada]
  static final numJornada =
      QueryStringProperty<Jornadas>(_entities[10].properties[1]);

  /// see [Jornadas.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Jornadas>(_entities[10].properties[2]);

  /// see [Jornadas.emprendimiento]
  static final emprendimiento = QueryRelationToOne<Jornadas, Emprendimientos>(
      _entities[10].properties[3]);

  /// see [Jornadas.tarea]
  static final tarea =
      QueryRelationToOne<Jornadas, Tareas>(_entities[10].properties[4]);

  /// see [Jornadas.statusSync]
  static final statusSync =
      QueryRelationToOne<Jornadas, StatusSync>(_entities[10].properties[5]);

  /// see [Jornadas.idDBR]
  static final idDBR =
      QueryStringProperty<Jornadas>(_entities[10].properties[6]);

  /// see [Jornadas.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Jornadas>(_entities[10].properties[7]);

  /// see [Jornadas.bitacora]
  static final bitacora =
      QueryRelationToMany<Jornadas, Bitacora>(_entities[10].relations[0]);

  /// see [Jornadas.documentos]
  static final documentos =
      QueryRelationToMany<Jornadas, Documentos>(_entities[10].relations[1]);
}

/// [StatusSync] entity fields to define ObjectBox queries.
class StatusSync_ {
  /// see [StatusSync.id]
  static final id =
      QueryIntegerProperty<StatusSync>(_entities[11].properties[0]);

  /// see [StatusSync.status]
  static final status =
      QueryStringProperty<StatusSync>(_entities[11].properties[1]);

  /// see [StatusSync.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<StatusSync>(_entities[11].properties[2]);
}

/// [Bitacora] entity fields to define ObjectBox queries.
class Bitacora_ {
  /// see [Bitacora.id]
  static final id = QueryIntegerProperty<Bitacora>(_entities[12].properties[0]);

  /// see [Bitacora.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Bitacora>(_entities[12].properties[1]);

  /// see [Bitacora.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Bitacora>(_entities[12].properties[2]);

  /// see [Bitacora.instrucciones]
  static final instrucciones =
      QueryStringProperty<Bitacora>(_entities[12].properties[3]);

  /// see [Bitacora.usuario]
  static final usuario =
      QueryStringProperty<Bitacora>(_entities[12].properties[4]);
}

/// [VariablesUsuario] entity fields to define ObjectBox queries.
class VariablesUsuario_ {
  /// see [VariablesUsuario.id]
  static final id =
      QueryIntegerProperty<VariablesUsuario>(_entities[13].properties[0]);

  /// see [VariablesUsuario.emprendedores]
  static final emprendedores =
      QueryBooleanProperty<VariablesUsuario>(_entities[13].properties[1]);

  /// see [VariablesUsuario.emprendimientos]
  static final emprendimientos =
      QueryBooleanProperty<VariablesUsuario>(_entities[13].properties[2]);

  /// see [VariablesUsuario.fechaActualizacion]
  static final fechaActualizacion =
      QueryIntegerProperty<VariablesUsuario>(_entities[13].properties[3]);
}

/// [AmbitoConsultoria] entity fields to define ObjectBox queries.
class AmbitoConsultoria_ {
  /// see [AmbitoConsultoria.id]
  static final id =
      QueryIntegerProperty<AmbitoConsultoria>(_entities[14].properties[0]);

  /// see [AmbitoConsultoria.nombreAmbito]
  static final nombreAmbito =
      QueryStringProperty<AmbitoConsultoria>(_entities[14].properties[1]);

  /// see [AmbitoConsultoria.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<AmbitoConsultoria>(_entities[14].properties[2]);

  /// see [AmbitoConsultoria.activo]
  static final activo =
      QueryBooleanProperty<AmbitoConsultoria>(_entities[14].properties[3]);

  /// see [AmbitoConsultoria.idDBR]
  static final idDBR =
      QueryStringProperty<AmbitoConsultoria>(_entities[14].properties[4]);

  /// see [AmbitoConsultoria.statusSync]
  static final statusSync = QueryRelationToOne<AmbitoConsultoria, StatusSync>(
      _entities[14].properties[5]);

  /// see [AmbitoConsultoria.bitacora]
  static final bitacora = QueryRelationToOne<AmbitoConsultoria, Bitacora>(
      _entities[14].properties[6]);

  /// see [AmbitoConsultoria.consultorias]
  static final consultorias =
      QueryRelationToMany<AmbitoConsultoria, Consultorias>(
          _entities[14].relations[0]);
}

/// [AreaCirculo] entity fields to define ObjectBox queries.
class AreaCirculo_ {
  /// see [AreaCirculo.id]
  static final id =
      QueryIntegerProperty<AreaCirculo>(_entities[15].properties[0]);

  /// see [AreaCirculo.nombreArea]
  static final nombreArea =
      QueryStringProperty<AreaCirculo>(_entities[15].properties[1]);

  /// see [AreaCirculo.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<AreaCirculo>(_entities[15].properties[2]);

  /// see [AreaCirculo.activo]
  static final activo =
      QueryBooleanProperty<AreaCirculo>(_entities[15].properties[3]);

  /// see [AreaCirculo.idDBR]
  static final idDBR =
      QueryStringProperty<AreaCirculo>(_entities[15].properties[4]);

  /// see [AreaCirculo.consultoria]
  static final consultoria = QueryRelationToOne<AreaCirculo, Consultorias>(
      _entities[15].properties[5]);

  /// see [AreaCirculo.statusSync]
  static final statusSync =
      QueryRelationToOne<AreaCirculo, StatusSync>(_entities[15].properties[6]);

  /// see [AreaCirculo.bitacora]
  static final bitacora =
      QueryRelationToOne<AreaCirculo, Bitacora>(_entities[15].properties[7]);
}

/// [Bancos] entity fields to define ObjectBox queries.
class Bancos_ {
  /// see [Bancos.id]
  static final id = QueryIntegerProperty<Bancos>(_entities[16].properties[0]);

  /// see [Bancos.banco]
  static final banco = QueryStringProperty<Bancos>(_entities[16].properties[1]);

  /// see [Bancos.activo]
  static final activo =
      QueryBooleanProperty<Bancos>(_entities[16].properties[2]);

  /// see [Bancos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Bancos>(_entities[16].properties[3]);

  /// see [Bancos.idDBR]
  static final idDBR = QueryStringProperty<Bancos>(_entities[16].properties[4]);
}

/// [ClasificacionEmp] entity fields to define ObjectBox queries.
class ClasificacionEmp_ {
  /// see [ClasificacionEmp.id]
  static final id =
      QueryIntegerProperty<ClasificacionEmp>(_entities[17].properties[0]);

  /// see [ClasificacionEmp.clasificacion]
  static final clasificacion =
      QueryStringProperty<ClasificacionEmp>(_entities[17].properties[1]);

  /// see [ClasificacionEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ClasificacionEmp>(_entities[17].properties[2]);

  /// see [ClasificacionEmp.activo]
  static final activo =
      QueryBooleanProperty<ClasificacionEmp>(_entities[17].properties[3]);

  /// see [ClasificacionEmp.idDBR]
  static final idDBR =
      QueryStringProperty<ClasificacionEmp>(_entities[17].properties[4]);

  /// see [ClasificacionEmp.statusSync]
  static final statusSync = QueryRelationToOne<ClasificacionEmp, StatusSync>(
      _entities[17].properties[5]);

  /// see [ClasificacionEmp.categoriasProyecto]
  static final categoriasProyecto =
      QueryRelationToMany<ClasificacionEmp, CatalogoProyecto>(
          _entities[17].relations[0]);
}

/// [CondicionesPago] entity fields to define ObjectBox queries.
class CondicionesPago_ {
  /// see [CondicionesPago.id]
  static final id =
      QueryIntegerProperty<CondicionesPago>(_entities[18].properties[0]);

  /// see [CondicionesPago.condicion]
  static final condicion =
      QueryStringProperty<CondicionesPago>(_entities[18].properties[1]);

  /// see [CondicionesPago.activo]
  static final activo =
      QueryBooleanProperty<CondicionesPago>(_entities[18].properties[2]);

  /// see [CondicionesPago.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<CondicionesPago>(_entities[18].properties[3]);

  /// see [CondicionesPago.idDBR]
  static final idDBR =
      QueryStringProperty<CondicionesPago>(_entities[18].properties[4]);
}

/// [Documentos] entity fields to define ObjectBox queries.
class Documentos_ {
  /// see [Documentos.id]
  static final id =
      QueryIntegerProperty<Documentos>(_entities[19].properties[0]);

  /// see [Documentos.nombreArchivo]
  static final nombreArchivo =
      QueryStringProperty<Documentos>(_entities[19].properties[1]);

  /// see [Documentos.fechaCarga]
  static final fechaCarga =
      QueryIntegerProperty<Documentos>(_entities[19].properties[2]);

  /// see [Documentos.archivo]
  static final archivo =
      QueryStringProperty<Documentos>(_entities[19].properties[3]);

  /// see [Documentos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Documentos>(_entities[19].properties[4]);

  /// see [Documentos.idDBR]
  static final idDBR =
      QueryStringProperty<Documentos>(_entities[19].properties[5]);

  /// see [Documentos.tipoDocumento]
  static final tipoDocumento = QueryRelationToOne<Documentos, TipoDocumentos>(
      _entities[19].properties[6]);

  /// see [Documentos.jornada]
  static final jornada =
      QueryRelationToOne<Documentos, Jornadas>(_entities[19].properties[7]);

  /// see [Documentos.consultoria]
  static final consultoria =
      QueryRelationToOne<Documentos, Consultorias>(_entities[19].properties[8]);

  /// see [Documentos.usuario]
  static final usuario =
      QueryRelationToOne<Documentos, Usuarios>(_entities[19].properties[9]);

  /// see [Documentos.statusSync]
  static final statusSync =
      QueryRelationToOne<Documentos, StatusSync>(_entities[19].properties[10]);

  /// see [Documentos.bitacora]
  static final bitacora =
      QueryRelationToOne<Documentos, Bitacora>(_entities[19].properties[11]);
}

/// [FasesEmp] entity fields to define ObjectBox queries.
class FasesEmp_ {
  /// see [FasesEmp.id]
  static final id = QueryIntegerProperty<FasesEmp>(_entities[20].properties[0]);

  /// see [FasesEmp.fase]
  static final fase =
      QueryStringProperty<FasesEmp>(_entities[20].properties[1]);

  /// see [FasesEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<FasesEmp>(_entities[20].properties[2]);

  /// see [FasesEmp.idDBR]
  static final idDBR =
      QueryStringProperty<FasesEmp>(_entities[20].properties[3]);

  /// see [FasesEmp.statusSync]
  static final statusSync =
      QueryRelationToOne<FasesEmp, StatusSync>(_entities[20].properties[4]);

  /// see [FasesEmp.emprendimientos]
  static final emprendimientos = QueryRelationToMany<FasesEmp, Emprendimientos>(
      _entities[20].relations[0]);
}

/// [PrioridadEmp] entity fields to define ObjectBox queries.
class PrioridadEmp_ {
  /// see [PrioridadEmp.id]
  static final id =
      QueryIntegerProperty<PrioridadEmp>(_entities[21].properties[0]);

  /// see [PrioridadEmp.prioridad]
  static final prioridad =
      QueryStringProperty<PrioridadEmp>(_entities[21].properties[1]);

  /// see [PrioridadEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<PrioridadEmp>(_entities[21].properties[2]);

  /// see [PrioridadEmp.idDBR]
  static final idDBR =
      QueryStringProperty<PrioridadEmp>(_entities[21].properties[3]);

  /// see [PrioridadEmp.statusSync]
  static final statusSync =
      QueryRelationToOne<PrioridadEmp, StatusSync>(_entities[21].properties[4]);

  /// see [PrioridadEmp.emprendimientos]
  static final emprendimientos =
      QueryRelationToMany<PrioridadEmp, Emprendimientos>(
          _entities[21].relations[0]);
}

/// [Proveedores] entity fields to define ObjectBox queries.
class Proveedores_ {
  /// see [Proveedores.id]
  static final id =
      QueryIntegerProperty<Proveedores>(_entities[22].properties[0]);

  /// see [Proveedores.nombreFiscal]
  static final nombreFiscal =
      QueryStringProperty<Proveedores>(_entities[22].properties[1]);

  /// see [Proveedores.rfc]
  static final rfc =
      QueryStringProperty<Proveedores>(_entities[22].properties[2]);

  /// see [Proveedores.direccion]
  static final direccion =
      QueryStringProperty<Proveedores>(_entities[22].properties[3]);

  /// see [Proveedores.nombreEncargado]
  static final nombreEncargado =
      QueryStringProperty<Proveedores>(_entities[22].properties[4]);

  /// see [Proveedores.clabe]
  static final clabe =
      QueryStringProperty<Proveedores>(_entities[22].properties[5]);

  /// see [Proveedores.telefono]
  static final telefono =
      QueryStringProperty<Proveedores>(_entities[22].properties[6]);

  /// see [Proveedores.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Proveedores>(_entities[22].properties[7]);

  /// see [Proveedores.registradoPor]
  static final registradoPor =
      QueryIntegerProperty<Proveedores>(_entities[22].properties[8]);

  /// see [Proveedores.archivado]
  static final archivado =
      QueryBooleanProperty<Proveedores>(_entities[22].properties[9]);

  /// see [Proveedores.idDBR]
  static final idDBR =
      QueryStringProperty<Proveedores>(_entities[22].properties[10]);

  /// see [Proveedores.tipoProveedor]
  static final tipoProveedor = QueryRelationToOne<Proveedores, TipoProveedor>(
      _entities[22].properties[11]);

  /// see [Proveedores.comunidades]
  static final comunidades = QueryRelationToOne<Proveedores, Comunidades>(
      _entities[22].properties[12]);

  /// see [Proveedores.condicionPago]
  static final condicionPago = QueryRelationToOne<Proveedores, CondicionesPago>(
      _entities[22].properties[13]);

  /// see [Proveedores.banco]
  static final banco =
      QueryRelationToOne<Proveedores, Bancos>(_entities[22].properties[14]);
}

/// [Roles] entity fields to define ObjectBox queries.
class Roles_ {
  /// see [Roles.id]
  static final id = QueryIntegerProperty<Roles>(_entities[23].properties[0]);

  /// see [Roles.rol]
  static final rol = QueryStringProperty<Roles>(_entities[23].properties[1]);

  /// see [Roles.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Roles>(_entities[23].properties[2]);

  /// see [Roles.idDBR]
  static final idDBR = QueryStringProperty<Roles>(_entities[23].properties[3]);

  /// see [Roles.statusSync]
  static final statusSync =
      QueryRelationToOne<Roles, StatusSync>(_entities[23].properties[4]);

  /// see [Roles.bitacora]
  static final bitacora =
      QueryRelationToOne<Roles, Bitacora>(_entities[23].properties[5]);

  /// see [Roles.usuarios]
  static final usuarios =
      QueryRelationToMany<Roles, Usuarios>(_entities[23].relations[0]);
}

/// [TipoDocumentos] entity fields to define ObjectBox queries.
class TipoDocumentos_ {
  /// see [TipoDocumentos.id]
  static final id =
      QueryIntegerProperty<TipoDocumentos>(_entities[24].properties[0]);

  /// see [TipoDocumentos.tipo]
  static final tipo =
      QueryStringProperty<TipoDocumentos>(_entities[24].properties[1]);

  /// see [TipoDocumentos.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoDocumentos>(_entities[24].properties[2]);

  /// see [TipoDocumentos.documentos]
  static final documentos = QueryRelationToMany<TipoDocumentos, Documentos>(
      _entities[24].relations[0]);
}

/// [TipoProveedor] entity fields to define ObjectBox queries.
class TipoProveedor_ {
  /// see [TipoProveedor.id]
  static final id =
      QueryIntegerProperty<TipoProveedor>(_entities[25].properties[0]);

  /// see [TipoProveedor.tipo]
  static final tipo =
      QueryStringProperty<TipoProveedor>(_entities[25].properties[1]);

  /// see [TipoProveedor.activo]
  static final activo =
      QueryBooleanProperty<TipoProveedor>(_entities[25].properties[2]);

  /// see [TipoProveedor.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<TipoProveedor>(_entities[25].properties[3]);

  /// see [TipoProveedor.idDBR]
  static final idDBR =
      QueryStringProperty<TipoProveedor>(_entities[25].properties[4]);
}

/// [FamiliaInversion] entity fields to define ObjectBox queries.
class FamiliaInversion_ {
  /// see [FamiliaInversion.id]
  static final id =
      QueryIntegerProperty<FamiliaInversion>(_entities[26].properties[0]);

  /// see [FamiliaInversion.nombre]
  static final nombre =
      QueryStringProperty<FamiliaInversion>(_entities[26].properties[1]);

  /// see [FamiliaInversion.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<FamiliaInversion>(_entities[26].properties[2]);

  /// see [FamiliaInversion.activo]
  static final activo =
      QueryBooleanProperty<FamiliaInversion>(_entities[26].properties[3]);

  /// see [FamiliaInversion.idDBR]
  static final idDBR =
      QueryStringProperty<FamiliaInversion>(_entities[26].properties[4]);

  /// see [FamiliaInversion.statusSync]
  static final statusSync = QueryRelationToOne<FamiliaInversion, StatusSync>(
      _entities[26].properties[5]);
}

/// [ProductosEmp] entity fields to define ObjectBox queries.
class ProductosEmp_ {
  /// see [ProductosEmp.id]
  static final id =
      QueryIntegerProperty<ProductosEmp>(_entities[27].properties[0]);

  /// see [ProductosEmp.nombre]
  static final nombre =
      QueryStringProperty<ProductosEmp>(_entities[27].properties[1]);

  /// see [ProductosEmp.descripcion]
  static final descripcion =
      QueryStringProperty<ProductosEmp>(_entities[27].properties[2]);

  /// see [ProductosEmp.imagen]
  static final imagen =
      QueryStringProperty<ProductosEmp>(_entities[27].properties[3]);

  /// see [ProductosEmp.costo]
  static final costo =
      QueryDoubleProperty<ProductosEmp>(_entities[27].properties[4]);

  /// see [ProductosEmp.precioVenta]
  static final precioVenta =
      QueryIntegerProperty<ProductosEmp>(_entities[27].properties[5]);

  /// see [ProductosEmp.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProductosEmp>(_entities[27].properties[6]);

  /// see [ProductosEmp.archivado]
  static final archivado =
      QueryBooleanProperty<ProductosEmp>(_entities[27].properties[7]);

  /// see [ProductosEmp.idDBR]
  static final idDBR =
      QueryStringProperty<ProductosEmp>(_entities[27].properties[8]);

  /// see [ProductosEmp.statusSync]
  static final statusSync =
      QueryRelationToOne<ProductosEmp, StatusSync>(_entities[27].properties[9]);

  /// see [ProductosEmp.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<ProductosEmp, Emprendimientos>(
          _entities[27].properties[10]);

  /// see [ProductosEmp.familiaInversion]
  static final familiaInversion =
      QueryRelationToOne<ProductosEmp, FamiliaInversion>(
          _entities[27].properties[11]);

  /// see [ProductosEmp.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProductosEmp, UnidadMedida>(
      _entities[27].properties[12]);

  /// see [ProductosEmp.cantidad]
  static final cantidad =
      QueryIntegerProperty<ProductosEmp>(_entities[27].properties[13]);

  /// see [ProductosEmp.proveedor]
  static final proveedor =
      QueryStringProperty<ProductosEmp>(_entities[27].properties[14]);

  /// see [ProductosEmp.bitacora]
  static final bitacora =
      QueryRelationToMany<ProductosEmp, Bitacora>(_entities[27].relations[0]);
}

/// [CatalogoProyecto] entity fields to define ObjectBox queries.
class CatalogoProyecto_ {
  /// see [CatalogoProyecto.id]
  static final id =
      QueryIntegerProperty<CatalogoProyecto>(_entities[28].properties[0]);

  /// see [CatalogoProyecto.nombre]
  static final nombre =
      QueryStringProperty<CatalogoProyecto>(_entities[28].properties[1]);

  /// see [CatalogoProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<CatalogoProyecto>(_entities[28].properties[2]);

  /// see [CatalogoProyecto.idDBR]
  static final idDBR =
      QueryStringProperty<CatalogoProyecto>(_entities[28].properties[3]);

  /// see [CatalogoProyecto.clasificacionEmp]
  static final clasificacionEmp =
      QueryRelationToOne<CatalogoProyecto, ClasificacionEmp>(
          _entities[28].properties[4]);

  /// see [CatalogoProyecto.statusSync]
  static final statusSync = QueryRelationToOne<CatalogoProyecto, StatusSync>(
      _entities[28].properties[5]);

  /// see [CatalogoProyecto.emprendimientos]
  static final emprendimientos =
      QueryRelationToMany<CatalogoProyecto, Emprendimientos>(
          _entities[28].relations[0]);
}

/// [UnidadMedida] entity fields to define ObjectBox queries.
class UnidadMedida_ {
  /// see [UnidadMedida.id]
  static final id =
      QueryIntegerProperty<UnidadMedida>(_entities[29].properties[0]);

  /// see [UnidadMedida.unidadMedida]
  static final unidadMedida =
      QueryStringProperty<UnidadMedida>(_entities[29].properties[1]);

  /// see [UnidadMedida.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<UnidadMedida>(_entities[29].properties[2]);

  /// see [UnidadMedida.activo]
  static final activo =
      QueryBooleanProperty<UnidadMedida>(_entities[29].properties[3]);

  /// see [UnidadMedida.idDBR]
  static final idDBR =
      QueryStringProperty<UnidadMedida>(_entities[29].properties[4]);

  /// see [UnidadMedida.statusSync]
  static final statusSync =
      QueryRelationToOne<UnidadMedida, StatusSync>(_entities[29].properties[5]);

  /// see [UnidadMedida.productosEmp]
  static final productosEmp = QueryRelationToMany<UnidadMedida, ProductosEmp>(
      _entities[29].relations[0]);
}

/// [ProductosCot] entity fields to define ObjectBox queries.
class ProductosCot_ {
  /// see [ProductosCot.id]
  static final id =
      QueryIntegerProperty<ProductosCot>(_entities[30].properties[0]);

  /// see [ProductosCot.nombre]
  static final nombre =
      QueryStringProperty<ProductosCot>(_entities[30].properties[1]);

  /// see [ProductosCot.descripcion]
  static final descripcion =
      QueryStringProperty<ProductosCot>(_entities[30].properties[2]);

  /// see [ProductosCot.imagen]
  static final imagen =
      QueryStringProperty<ProductosCot>(_entities[30].properties[3]);

  /// see [ProductosCot.costo]
  static final costo =
      QueryDoubleProperty<ProductosCot>(_entities[30].properties[4]);

  /// see [ProductosCot.precioVenta]
  static final precioVenta =
      QueryIntegerProperty<ProductosCot>(_entities[30].properties[5]);

  /// see [ProductosCot.cantidad]
  static final cantidad =
      QueryIntegerProperty<ProductosCot>(_entities[30].properties[6]);

  /// see [ProductosCot.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ProductosCot>(_entities[30].properties[7]);

  /// see [ProductosCot.archivado]
  static final archivado =
      QueryBooleanProperty<ProductosCot>(_entities[30].properties[8]);

  /// see [ProductosCot.idDBR]
  static final idDBR =
      QueryStringProperty<ProductosCot>(_entities[30].properties[9]);

  /// see [ProductosCot.statusSync]
  static final statusSync = QueryRelationToOne<ProductosCot, StatusSync>(
      _entities[30].properties[10]);

  /// see [ProductosCot.emprendimientos]
  static final emprendimientos =
      QueryRelationToOne<ProductosCot, Emprendimientos>(
          _entities[30].properties[11]);

  /// see [ProductosCot.familiaInversion]
  static final familiaInversion =
      QueryRelationToOne<ProductosCot, FamiliaInversion>(
          _entities[30].properties[12]);

  /// see [ProductosCot.unidadMedida]
  static final unidadMedida = QueryRelationToOne<ProductosCot, UnidadMedida>(
      _entities[30].properties[13]);

  /// see [ProductosCot.proveedor]
  static final proveedor =
      QueryStringProperty<ProductosCot>(_entities[30].properties[14]);

  /// see [ProductosCot.bitacora]
  static final bitacora =
      QueryRelationToMany<ProductosCot, Bitacora>(_entities[30].relations[0]);
}
