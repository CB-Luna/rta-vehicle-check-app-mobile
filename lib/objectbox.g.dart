// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'object_box_files/entitys.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3867794090434878240),
      name: 'ClasificacionProyecto',
      lastPropertyId: const IdUid(4, 4570083749155237849),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7521607225935953493),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6944626713596755992),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5691040412648373501),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4570083749155237849),
            name: 'fechaSync',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6117759740444770997),
      name: 'Emprendimiento',
      lastPropertyId: const IdUid(6, 8341443670952491819),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3991281244965765077),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6017954821795207299),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3980554204008347119),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9086365290951858859),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2452280981631945624),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8341443670952491819),
            name: 'fechaSync',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 8612740868205840040),
            name: 'usuario',
            targetId: const IdUid(5, 3964965102569712035))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'jornada', srcEntity: 'Jornada', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 2166617641346171935),
      name: 'Jornada',
      lastPropertyId: const IdUid(10, 3462034544506880697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6909534581842096739),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5386075232935579859),
            name: 'numeroJornada',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4364625688543508975),
            name: 'fechaRevision',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8474005816611301515),
            name: 'circuloEmpresa',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 291034994140840826),
            name: 'analisisFinanciero',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7245017250220973753),
            name: 'convenio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 552297950480807692),
            name: 'agregarRegistro',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5889322915921969172),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8304755835049178217),
            name: 'fechaSync',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3462034544506880697),
            name: 'emprendimientoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8599028730148103623),
            relationTarget: 'Emprendimiento')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1366246136666677579),
      name: 'PriporidadProyecto',
      lastPropertyId: const IdUid(4, 5347718656034637228),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7079790605743243388),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6172998306654734553),
            name: 'descripcion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2574672497671950469),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5347718656034637228),
            name: 'fechaSync',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 3964965102569712035),
      name: 'Usuario',
      lastPropertyId: const IdUid(11, 176765185759695924),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6915994077861086090),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4932511096555161847),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6273269044269879201),
            name: 'apellido',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3662632218083065242),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3180136282497114098),
            name: 'celular',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 647799949869266031),
            name: 'correo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3681945340148367110),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2965121636634238955),
            name: 'imagen',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2158551797062253471),
            name: 'rol',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6431279296723446945),
            name: 'fechaRegistro',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 176765185759695924),
            name: 'fechaSync',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'emprendimiento', srcEntity: 'Emprendimiento', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 3964965102569712035),
      lastIndexId: const IdUid(1, 8599028730148103623),
      lastRelationId: const IdUid(1, 8612740868205840040),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ClasificacionProyecto: EntityDefinition<ClasificacionProyecto>(
        model: _entities[0],
        toOneRelations: (ClasificacionProyecto object) => [],
        toManyRelations: (ClasificacionProyecto object) => {},
        getId: (ClasificacionProyecto object) => object.id,
        setId: (ClasificacionProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (ClasificacionProyecto object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descripcionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClasificacionProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    Emprendimiento: EntityDefinition<Emprendimiento>(
        model: _entities[1],
        toOneRelations: (Emprendimiento object) => [],
        toManyRelations: (Emprendimiento object) => {
              RelInfo<Emprendimiento>.toMany(1, object.id): object.usuario,
              RelInfo<Jornada>.toOneBacklink(10, object.id,
                      (Jornada srcObject) => srcObject.emprendimiento):
                  object.jornada
            },
        getId: (Emprendimiento object) => object.id,
        setId: (Emprendimiento object, int id) {
          object.id = id;
        },
        objectToFB: (Emprendimiento object, fb.Builder fbb) {
          final imagenOffset = fbb.writeString(object.imagen);
          final nombreOffset = fbb.writeString(object.nombre);
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imagenOffset);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, descripcionOffset);
          fbb.addInt64(4, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(5, object.fechaSync.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Emprendimiento(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)));
          InternalToManyAccess.setRelInfo(
              object.usuario,
              store,
              RelInfo<Emprendimiento>.toMany(1, object.id),
              store.box<Emprendimiento>());
          InternalToManyAccess.setRelInfo(
              object.jornada,
              store,
              RelInfo<Jornada>.toOneBacklink(10, object.id,
                  (Jornada srcObject) => srcObject.emprendimiento),
              store.box<Emprendimiento>());
          return object;
        }),
    Jornada: EntityDefinition<Jornada>(
        model: _entities[2],
        toOneRelations: (Jornada object) => [object.emprendimiento],
        toManyRelations: (Jornada object) => {},
        getId: (Jornada object) => object.id,
        setId: (Jornada object, int id) {
          object.id = id;
        },
        objectToFB: (Jornada object, fb.Builder fbb) {
          final circuloEmpresaOffset = fbb.writeString(object.circuloEmpresa);
          final analisisFinancieroOffset =
              fbb.writeString(object.analisisFinanciero);
          final convenioOffset = fbb.writeString(object.convenio);
          final agregarRegistroOffset = fbb.writeString(object.agregarRegistro);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.numeroJornada);
          fbb.addInt64(2, object.fechaRevision.millisecondsSinceEpoch);
          fbb.addOffset(3, circuloEmpresaOffset);
          fbb.addOffset(4, analisisFinancieroOffset);
          fbb.addOffset(5, convenioOffset);
          fbb.addOffset(6, agregarRegistroOffset);
          fbb.addInt64(7, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(8, object.fechaSync.millisecondsSinceEpoch);
          fbb.addInt64(9, object.emprendimiento.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Jornada(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              numeroJornada:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              fechaRevision: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              circuloEmpresa: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              analisisFinanciero: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              convenio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              agregarRegistro: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              fechaSync:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)));
          object.emprendimiento.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.emprendimiento.attach(store);
          return object;
        }),
    PriporidadProyecto: EntityDefinition<PriporidadProyecto>(
        model: _entities[3],
        toOneRelations: (PriporidadProyecto object) => [],
        toManyRelations: (PriporidadProyecto object) => {},
        getId: (PriporidadProyecto object) => object.id,
        setId: (PriporidadProyecto object, int id) {
          object.id = id;
        },
        objectToFB: (PriporidadProyecto object, fb.Builder fbb) {
          final descripcionOffset = fbb.writeString(object.descripcion);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descripcionOffset);
          fbb.addInt64(2, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(3, object.fechaSync.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PriporidadProyecto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descripcion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              fechaRegistro: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    Usuario: EntityDefinition<Usuario>(
        model: _entities[4],
        toOneRelations: (Usuario object) => [],
        toManyRelations: (Usuario object) => {
              RelInfo<Emprendimiento>.toManyBacklink(1, object.id):
                  object.emprendimiento
            },
        getId: (Usuario object) => object.id,
        setId: (Usuario object, int id) {
          object.id = id;
        },
        objectToFB: (Usuario object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoOffset = fbb.writeString(object.apellido);
          final telefonoOffset = fbb.writeString(object.telefono);
          final celularOffset = fbb.writeString(object.celular);
          final correoOffset = fbb.writeString(object.correo);
          final passwordOffset = fbb.writeString(object.password);
          final imagenOffset = fbb.writeString(object.imagen);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoOffset);
          fbb.addOffset(3, telefonoOffset);
          fbb.addOffset(4, celularOffset);
          fbb.addOffset(5, correoOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.addOffset(7, imagenOffset);
          fbb.addInt64(8, object.rol);
          fbb.addInt64(9, object.fechaRegistro.millisecondsSinceEpoch);
          fbb.addInt64(10, object.fechaSync.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuario(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellido: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              celular: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              correo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              imagen: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              rol: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              fechaRegistro:
                  DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)),
              fechaSync: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0)));
          InternalToManyAccess.setRelInfo(
              object.emprendimiento,
              store,
              RelInfo<Emprendimiento>.toManyBacklink(1, object.id),
              store.box<Usuario>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ClasificacionProyecto] entity fields to define ObjectBox queries.
class ClasificacionProyecto_ {
  /// see [ClasificacionProyecto.id]
  static final id =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[0]);

  /// see [ClasificacionProyecto.descripcion]
  static final descripcion =
      QueryStringProperty<ClasificacionProyecto>(_entities[0].properties[1]);

  /// see [ClasificacionProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[2]);

  /// see [ClasificacionProyecto.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<ClasificacionProyecto>(_entities[0].properties[3]);
}

/// [Emprendimiento] entity fields to define ObjectBox queries.
class Emprendimiento_ {
  /// see [Emprendimiento.id]
  static final id =
      QueryIntegerProperty<Emprendimiento>(_entities[1].properties[0]);

  /// see [Emprendimiento.imagen]
  static final imagen =
      QueryStringProperty<Emprendimiento>(_entities[1].properties[1]);

  /// see [Emprendimiento.nombre]
  static final nombre =
      QueryStringProperty<Emprendimiento>(_entities[1].properties[2]);

  /// see [Emprendimiento.descripcion]
  static final descripcion =
      QueryStringProperty<Emprendimiento>(_entities[1].properties[3]);

  /// see [Emprendimiento.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Emprendimiento>(_entities[1].properties[4]);

  /// see [Emprendimiento.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Emprendimiento>(_entities[1].properties[5]);

  /// see [Emprendimiento.usuario]
  static final usuario =
      QueryRelationToMany<Emprendimiento, Usuario>(_entities[1].relations[0]);
}

/// [Jornada] entity fields to define ObjectBox queries.
class Jornada_ {
  /// see [Jornada.id]
  static final id = QueryIntegerProperty<Jornada>(_entities[2].properties[0]);

  /// see [Jornada.numeroJornada]
  static final numeroJornada =
      QueryIntegerProperty<Jornada>(_entities[2].properties[1]);

  /// see [Jornada.fechaRevision]
  static final fechaRevision =
      QueryIntegerProperty<Jornada>(_entities[2].properties[2]);

  /// see [Jornada.circuloEmpresa]
  static final circuloEmpresa =
      QueryStringProperty<Jornada>(_entities[2].properties[3]);

  /// see [Jornada.analisisFinanciero]
  static final analisisFinanciero =
      QueryStringProperty<Jornada>(_entities[2].properties[4]);

  /// see [Jornada.convenio]
  static final convenio =
      QueryStringProperty<Jornada>(_entities[2].properties[5]);

  /// see [Jornada.agregarRegistro]
  static final agregarRegistro =
      QueryStringProperty<Jornada>(_entities[2].properties[6]);

  /// see [Jornada.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Jornada>(_entities[2].properties[7]);

  /// see [Jornada.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Jornada>(_entities[2].properties[8]);

  /// see [Jornada.emprendimiento]
  static final emprendimiento =
      QueryRelationToOne<Jornada, Emprendimiento>(_entities[2].properties[9]);
}

/// [PriporidadProyecto] entity fields to define ObjectBox queries.
class PriporidadProyecto_ {
  /// see [PriporidadProyecto.id]
  static final id =
      QueryIntegerProperty<PriporidadProyecto>(_entities[3].properties[0]);

  /// see [PriporidadProyecto.descripcion]
  static final descripcion =
      QueryStringProperty<PriporidadProyecto>(_entities[3].properties[1]);

  /// see [PriporidadProyecto.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<PriporidadProyecto>(_entities[3].properties[2]);

  /// see [PriporidadProyecto.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<PriporidadProyecto>(_entities[3].properties[3]);
}

/// [Usuario] entity fields to define ObjectBox queries.
class Usuario_ {
  /// see [Usuario.id]
  static final id = QueryIntegerProperty<Usuario>(_entities[4].properties[0]);

  /// see [Usuario.nombre]
  static final nombre =
      QueryStringProperty<Usuario>(_entities[4].properties[1]);

  /// see [Usuario.apellido]
  static final apellido =
      QueryStringProperty<Usuario>(_entities[4].properties[2]);

  /// see [Usuario.telefono]
  static final telefono =
      QueryStringProperty<Usuario>(_entities[4].properties[3]);

  /// see [Usuario.celular]
  static final celular =
      QueryStringProperty<Usuario>(_entities[4].properties[4]);

  /// see [Usuario.correo]
  static final correo =
      QueryStringProperty<Usuario>(_entities[4].properties[5]);

  /// see [Usuario.password]
  static final password =
      QueryStringProperty<Usuario>(_entities[4].properties[6]);

  /// see [Usuario.imagen]
  static final imagen =
      QueryStringProperty<Usuario>(_entities[4].properties[7]);

  /// see [Usuario.rol]
  static final rol = QueryIntegerProperty<Usuario>(_entities[4].properties[8]);

  /// see [Usuario.fechaRegistro]
  static final fechaRegistro =
      QueryIntegerProperty<Usuario>(_entities[4].properties[9]);

  /// see [Usuario.fechaSync]
  static final fechaSync =
      QueryIntegerProperty<Usuario>(_entities[4].properties[10]);
}
